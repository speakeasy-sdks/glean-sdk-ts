openapi: 3.0.0
info:
    version: 0.9.0
    title: Glean API
    contact:
        email: support@glean.com
    description: |
        # Introduction
        In addition to the data sources that Glean has built-in support for, Glean also provides a REST API that enables customers to put arbitrary content in the search index. This is useful, for example, for doing permissions-aware search over content in internal tools that reside on-prem as well as for searching over applications that Glean does not currently support first class. In addition these APIs allow the customer to push organization data (people info, organization structure etc) into Glean.

        # Usage guidelines
        This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along
        with a 6-month sunset period for anything that requires developers to adopt the new versions.

        # API Clients
        Official API clients for the Glean Indexing API are available in multiple languages:

        - [Python](https://github.com/gleanwork/api-client-python)
        - [TypeScript](https://github.com/gleanwork/api-client-typescript)
        - [Go](https://github.com/gleanwork/api-client-go)
        - [Java](https://github.com/gleanwork/api-client-java)

        These API clients provide type-safe, idiomatic interfaces for working with Glean IndexingAPIs in your language of choice.
    x-logo:
        url: https://app.glean.com/images/glean-text2.svg
    x-speakeasy-name: "Glean API"
servers:
    - url: https://{domain}-be.glean.com
      variables:
        domain:
            default: domain
            description: Email domain (without extension) that determines the deployment backend.
security:
    - BearerAuth: []
paths:
    /rest/api/v1/activity:
        post:
            tags:
                - Activity
            summary: Report document activity
            description: Report user activity that occurs on indexed documents such as viewing or editing. This signal improves search quality.
            operationId: activity
            x-visibility: Public
            x-codegen-request-body-name: payload
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Activity"
                required: true
                x-exportParamName: Activity
            responses:
                "200":
                    description: OK
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: report
            x-speakeasy-group: client.activity
    /rest/api/v1/feedback:
        post:
            tags:
                - Activity
            summary: Report client activity
            description: Report events that happen to results within a Glean client UI, such as search result views and clicks.  This signal improves search quality.
            operationId: feedback
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters:
                - name: feedback
                  in: query
                  description: A URL encoded versions of Feedback. This is useful for requests.
                  required: false
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Feedback"
                x-exportParamName: Feedback
            responses:
                "200":
                    description: OK
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-group: client.activity
    /rest/api/v1/createannouncement:
        post:
            tags:
                - Announcements
            summary: Create Announcement
            description: Create a textual announcement visible to some set of users based on department and location.
            operationId: createannouncement
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CreateAnnouncementRequest"
                description: Announcement content
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Announcement"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: create
            x-speakeasy-group: client.announcements
    /rest/api/v1/deleteannouncement:
        post:
            tags:
                - Announcements
            summary: Delete Announcement
            description: Delete an existing user-generated announcement.
            operationId: deleteannouncement
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/DeleteAnnouncementRequest"
                description: Delete announcement request
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: delete
            x-speakeasy-group: client.announcements
    /rest/api/v1/updateannouncement:
        post:
            tags:
                - Announcements
            summary: Update Announcement
            description: Update a textual announcement visible to some set of users based on department and location.
            operationId: updateannouncement
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UpdateAnnouncementRequest"
                description: Announcement content. Id need to be specified for the announcement.
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Announcement"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: update
            x-speakeasy-group: client.announcements
    /rest/api/v1/createanswer:
        post:
            tags:
                - Answers
            summary: Create Answer
            description: Create a user-generated Answer that contains a question and answer.
            operationId: createanswer
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CreateAnswerRequest"
                description: CreateAnswer request
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Answer"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: create
            x-speakeasy-group: client.answers
    /rest/api/v1/deleteanswer:
        post:
            tags:
                - Answers
            summary: Delete Answer
            description: Delete an existing user-generated Answer.
            operationId: deleteanswer
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/DeleteAnswerRequest"
                description: DeleteAnswer request
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: delete
            x-speakeasy-group: client.answers
    /rest/api/v1/editanswer:
        post:
            tags:
                - Answers
            summary: Update Answer
            description: Update an existing user-generated Answer.
            operationId: editanswer
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/EditAnswerRequest"
                description: EditAnswer request
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Answer"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: update
            x-speakeasy-group: client.answers
    /rest/api/v1/getanswer:
        post:
            tags:
                - Answers
            summary: Read Answer
            description: Read the details of a particular Answer given its ID.
            operationId: getanswer
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/GetAnswerRequest"
                description: GetAnswer request
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GetAnswerResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: retrieve
            x-speakeasy-group: client.answers
    /rest/api/v1/listanswers:
        post:
            tags:
                - Answers
            summary: List Answers
            description: List Answers created by the current user.
            operationId: listanswers
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ListAnswersRequest"
                description: ListAnswers request
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ListAnswersResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: list
            x-speakeasy-group: client.answers
    /rest/api/v1/createauthtoken:
        post:
            tags:
                - Authentication
            summary: Create authentication token
            description: Creates an authentication token for the authenticated user.
            operationId: createauthtoken
            x-visibility: Public
            parameters: []
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CreateAuthTokenResponse"
                "400":
                    description: Invalid Request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: createToken
            x-speakeasy-group: client.authentication
    /rest/api/v1/chat:
        post:
            tags:
                - Chat
            summary: Chat
            description: Have a conversation with Glean AI.
            operationId: chat
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters:
                - $ref: "#/components/parameters/timezoneOffset"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ChatRequest"
                        examples:
                            defaultExample:
                                value:
                                    messages:
                                        - author: USER
                                          messageType: CONTENT
                                          fragments:
                                            - text: What are the company holidays this year?
                            gptAgentExample:
                                value:
                                    agentConfig:
                                        agent: GPT
                                    messages:
                                        - author: USER
                                          messageType: CONTENT
                                          fragments:
                                            - text: Who was the first person to land on the moon?
                description: Includes chat history for Glean AI to respond to.
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ChatResponse"
                            examples:
                                defaultExample:
                                    value:
                                        messages:
                                            - author: GLEAN_AI
                                              messageType: CONTENT
                                              hasMoreFragments: false
                                              agentConfig:
                                                agent: DEFAULT
                                                mode: DEFAULT
                                              fragments:
                                                - text: There are no holidays!
                                streamingExample:
                                    value:
                                        messages:
                                            - author: GLEAN_AI
                                              messageType: CONTENT
                                              agentConfig:
                                                agent: DEFAULT
                                                mode: DEFAULT
                                                hasMoreFragments: true
                                              fragments: null
                                            - author: GLEAN_AI
                                              messageType: CONTENT
                                              agentConfig:
                                                agent: DEFAULT
                                                mode: DEFAULT
                                                hasMoreFragments: true
                                              fragments: null
                                            - author: GLEAN_AI
                                              messageType: CONTENT
                                              agentConfig:
                                                agent: DEFAULT
                                                mode: DEFAULT
                                                hasMoreFragments: true
                                              fragments:
                                                - text: e are
                                            - author: GLEAN_AI
                                              messageType: CONTENT
                                              agentConfig:
                                                agent: DEFAULT
                                                mode: DEFAULT
                                                hasMoreFragments: true
                                              fragments:
                                                - text: no hol
                                            - author: GLEAN_AI
                                              messageType: CONTENT
                                              agentConfig:
                                                agent: DEFAULT
                                                mode: DEFAULT
                                                hasMoreFragments: false
                                              fragments:
                                                - text: idays!
                                updateResponse:
                                    value:
                                        messages:
                                            - author: GLEAN_AI
                                              messageType: UPDATE
                                              agentConfig:
                                                agent: DEFAULT
                                                mode: DEFAULT
                                              fragments:
                                                - text: "**Reading:**"
                                                - structuredResults:
                                                    - document:
                                                        id: "123"
                                                        title: Company Handbook
                                citationResponse:
                                    value:
                                        messages:
                                            - author: GLEAN_AI
                                              messageType: CONTENT
                                              agentConfig:
                                                agent: DEFAULT
                                                mode: DEFAULT
                                              citations:
                                                - sourceDocument:
                                                    id: "123"
                                                    title: Company Handbook
                                                    referenceRanges:
                                                        - textRange:
                                                            startIndex: 0
                                                            endIndex: 12
                                                            type: CITATION
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "408":
                    description: Request Timeout
                "429":
                    description: Too Many Requests
            x-speakeasy-group: client.chat
            x-speakeasy-name-override: create
            x-speakeasy-usage-example: true
    /rest/api/v1/deleteallchats:
        post:
            tags:
                - Chat
            summary: Deletes all saved Chats owned by a user
            description: Deletes all saved Chats a user has had and all their contained conversational content.
            operationId: deleteallchats
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters:
                - $ref: "#/components/parameters/timezoneOffset"
            responses:
                "200":
                    description: OK
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "403":
                    description: Forbidden
            x-speakeasy-name-override: deleteAll
            x-speakeasy-group: client.chat
    /rest/api/v1/deletechats:
        post:
            tags:
                - Chat
            summary: Deletes saved Chats
            description: Deletes saved Chats and all their contained conversational content.
            operationId: deletechats
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters:
                - $ref: "#/components/parameters/timezoneOffset"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/DeleteChatsRequest"
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "403":
                    description: Forbidden
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: delete
            x-speakeasy-group: client.chat
    /rest/api/v1/getchat:
        post:
            tags:
                - Chat
            summary: Retrieves a Chat
            description: Retrieves the chat history between Glean Assistant and the user for a given Chat.
            operationId: getchat
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters:
                - $ref: "#/components/parameters/timezoneOffset"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/GetChatRequest"
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GetChatResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "403":
                    description: Forbidden
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: retrieve
            x-speakeasy-group: client.chat
    /rest/api/v1/listchats:
        post:
            tags:
                - Chat
            summary: Retrieves all saved Chats
            description: Retrieves all the saved Chats between Glean Assistant and the user. The returned Chats contain only metadata and no conversational content.
            operationId: listchats
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters:
                - $ref: "#/components/parameters/timezoneOffset"
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ListChatsResponse"
                "401":
                    description: Not Authorized
                "403":
                    description: Forbidden
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: list
            x-speakeasy-group: client.chat
    /rest/api/v1/getchatapplication:
        post:
            tags:
                - Chat
            summary: Gets the metadata for a custom Chat application
            description: Gets the Chat application details for the specified application ID.
            operationId: getchatapplication
            x-visibility: Preview
            x-codegen-request-body-name: payload
            parameters:
                - $ref: "#/components/parameters/timezoneOffset"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/GetChatApplicationRequest"
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GetChatApplicationResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "403":
                    description: Forbidden
            x-speakeasy-name-override: retrieveApplication
            x-speakeasy-group: client.chat
    /rest/api/v1/uploadchatfiles:
        post:
            tags:
                - Chat
            summary: Upload files for Chat.
            description: Upload files for Chat.
            operationId: uploadchatfiles
            x-visibility: Public
            parameters:
                - $ref: "#/components/parameters/timezoneOffset"
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            $ref: "#/components/schemas/UploadChatFilesRequest"
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UploadChatFilesResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "403":
                    description: Forbidden
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: uploadFiles
            x-speakeasy-group: client.chat
    /rest/api/v1/getchatfiles:
        post:
            tags:
                - Chat
            summary: Get files uploaded by a user for Chat.
            description: Get files uploaded by a user for Chat.
            operationId: getchatfiles
            x-visibility: Public
            parameters:
                - $ref: "#/components/parameters/timezoneOffset"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/GetChatFilesRequest"
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GetChatFilesResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "403":
                    description: Forbidden
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: retrieveFiles
            x-speakeasy-group: client.chat
    /rest/api/v1/deletechatfiles:
        post:
            tags:
                - Chat
            summary: Delete files uploaded by a user for chat.
            description: Delete files uploaded by a user for Chat.
            operationId: deletechatfiles
            x-visibility: Public
            parameters:
                - $ref: "#/components/parameters/timezoneOffset"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/DeleteChatFilesRequest"
            responses:
                "200":
                    description: OK
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "403":
                    description: Forbidden
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: deleteFiles
            x-speakeasy-group: client.chat
    /rest/api/v1/runagent:
        post:
            tags:
                - Agents
            summary: Runs an Agent.
            description: Trigger an Agent with a given id.
            operationId: runagent
            x-visibility: Preview
            x-codegen-request-body-name: payload
            parameters:
                - $ref: "#/components/parameters/timezoneOffset"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/RunAgentRequest"
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ChatResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "408":
                    description: Request Timeout
                "429":
                    description: Too Many Requests
            x-speakeasy-group: client.agents
            x-speakeasy-name-override: run
    /rest/api/v1/listagents:
        post:
            tags:
                - Agents
            x-visibility: Preview
            summary: Lists all agents.
            x-codegen-request-body-name: payload
            description: Lists all agents that are available.
            operationId: listagents
            parameters:
                - $ref: "#/components/parameters/timezoneOffset"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ListWorkflowsRequest"
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ListAgentsResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "408":
                    description: Request Timeout
                "429":
                    description: Too Many Requests
            x-speakeasy-group: client.agents
            x-speakeasy-name-override: list
    /rest/api/v1/getagentinputs:
        post:
            tags:
                - Agents
            summary: Gets the inputs to an agent.
            description: Get the inputs to an agent with a given id.
            operationId: getagentinputs
            x-visibility: Preview
            x-codegen-request-body-name: payload
            parameters:
                - $ref: "#/components/parameters/timezoneOffset"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/GetAgentInputsRequest"
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GetAgentInputsResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "408":
                    description: Request Timeout
                "429":
                    description: Too Many Requests
            x-speakeasy-group: client.agents
            x-speakeasy-name-override: retrieveInputs
    /rest/api/v1/addcollectionitems:
        post:
            tags:
                - Collections
            summary: Add Collection item
            description: Add items to a Collection.
            operationId: addcollectionitems
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/AddCollectionItemsRequest"
                description: Data describing the add operation.
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/AddCollectionItemsResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: addItems
            x-speakeasy-group: client.collections
    /rest/api/v1/createcollection:
        post:
            tags:
                - Collections
            summary: Create Collection
            description: Create a publicly visible (empty) Collection of documents.
            operationId: createcollection
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CreateCollectionRequest"
                description: Collection content plus any additional metadata for the request.
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CreateCollectionResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "422":
                    description: Semantic error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CollectionError"
                "429":
                    description: Too Many Requests
            x-speakeasy-group: client.collections
            x-speakeasy-name-override: create
    /rest/api/v1/deletecollection:
        post:
            tags:
                - Collections
            summary: Delete Collection
            description: Delete a Collection given the Collection's ID.
            operationId: deletecollection
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/DeleteCollectionRequest"
                description: DeleteCollection request
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "422":
                    description: Semantic error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CollectionError"
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: delete
            x-speakeasy-group: client.collections
    /rest/api/v1/deletecollectionitem:
        post:
            tags:
                - Collections
            summary: Delete Collection item
            description: Delete a single item from a Collection.
            operationId: deletecollectionitem
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/DeleteCollectionItemRequest"
                description: Data describing the delete operation.
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/DeleteCollectionItemResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "422":
                    description: Failed to save deletion
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: deleteItem
            x-speakeasy-group: client.collections
    /rest/api/v1/editcollection:
        post:
            tags:
                - Collections
            summary: Update Collection
            description: Update the properties of an existing Collection.
            operationId: editcollection
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/EditCollectionRequest"
                description: Collection content plus any additional metadata for the request.
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/EditCollectionResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "422":
                    description: Semantic error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CollectionError"
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: update
            x-speakeasy-group: client.collections
    /rest/api/v1/editcollectionitem:
        post:
            tags:
                - Collections
            summary: Update Collection item
            description: Update the URL, Glean Document ID, description of an item within a Collection given its ID.
            operationId: editcollectionitem
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/EditCollectionItemRequest"
                description: Edit Collection Items request
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/EditCollectionItemResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: updateItem
            x-speakeasy-group: client.collections
    /rest/api/v1/getcollection:
        post:
            tags:
                - Collections
            summary: Read Collection
            description: Read the details of a Collection given its ID. Does not fetch items in this Collection.
            operationId: getcollection
            x-visibility: Preview
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/GetCollectionRequest"
                description: GetCollection request
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GetCollectionResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: retrieve
            x-speakeasy-group: client.collections
    /rest/api/v1/listcollections:
        post:
            tags:
                - Collections
            summary: List Collections
            description: List all existing Collections.
            operationId: listcollections
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ListCollectionsRequest"
                description: ListCollections request
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ListCollectionsResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: list
            x-speakeasy-group: client.collections
    /rest/api/v1/getdocpermissions:
        post:
            tags:
                - Documents
            summary: Read document permissions
            description: Read the emails of all users who have access to the given document.
            operationId: getdocpermissions
            x-visibility: Preview
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/GetDocPermissionsRequest"
                description: Document permissions request
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GetDocPermissionsResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "403":
                    description: Forbidden
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: retrievePermissions
            x-speakeasy-group: client.documents
    /rest/api/v1/getdocuments:
        post:
            tags:
                - Documents
            summary: Read documents
            description: Read the documents including metadata (does not include enhanced metadata via `/documentmetadata`) for the given list of Glean Document IDs or URLs specified in the request.
            operationId: getdocuments
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/GetDocumentsRequest"
                description: Information about documents requested.
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GetDocumentsResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "403":
                    description: Documents does not exist, or user cannot access documents.
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: retrieve
            x-speakeasy-group: client.documents
    /rest/api/v1/getdocumentsbyfacets:
        post:
            tags:
                - Documents
            summary: Read documents by facets
            description: Read the documents including metadata (does not include enhanced metadata via `/documentmetadata`) macthing the given facet conditions.
            operationId: getdocumentsbyfacets
            x-visibility: Preview
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/GetDocumentsByFacetsRequest"
                description: Information about facet conditions for documents to be retrieved.
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GetDocumentsByFacetsResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "404":
                    description: Not Found
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: retrieveByFacets
            x-speakeasy-group: client.documents
    /rest/api/v1/insights:
        post:
            tags:
                - Insights
            summary: Read insights
            description: Reads the aggregate information for each user, query, and content.
            operationId: insights
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/InsightsRequest"
                description: Includes request params for insights dashboard data.
                required: true
                x-exportParamName: InsightsRequest
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/InsightsResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: retrieve
            x-speakeasy-group: client.insights
    /rest/api/v1/messages:
        post:
            tags:
                - Messages
            summary: Read messages
            description: Retrieves list of messages from messaging/chat datasources (e.g. Slack, Teams).
            operationId: messages
            x-visibility: Preview
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/MessagesRequest"
                description: Includes request params such as the id for channel/message and direction.
                required: true
                x-exportParamName: MessagesRequest
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MessagesResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: retrieve
            x-speakeasy-group: client.messages
    /rest/api/v1/editpin:
        post:
            tags:
                - Pins
            summary: Update pin
            description: Update an existing user-generated pin.
            operationId: editpin
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/EditPinRequest"
                description: Edit pins request
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PinDocument"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: update
            x-speakeasy-group: client.pins
    /rest/api/v1/getpin:
        post:
            tags:
                - Pins
            summary: Read pin
            description: Read pin details given its ID.
            operationId: getpin
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/GetPinRequest"
                description: Get pin request
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GetPinResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: retrieve
            x-speakeasy-group: client.pins
    /rest/api/v1/listpins:
        post:
            tags:
                - Pins
            summary: List pins
            description: Lists all pins.
            operationId: listpins
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                description: List pins request
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ListPinsResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: list
            x-speakeasy-group: client.pins
    /rest/api/v1/pin:
        post:
            tags:
                - Pins
            summary: Create pin
            description: Pin a document as a result for a given search query.Pin results that are known to be a good match.
            operationId: pin
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PinRequest"
                description: Details about the document and query for the pin.
                required: true
                x-exportParamName: PinDocument
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PinDocument"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: create
            x-speakeasy-group: client.pins
    /rest/api/v1/unpin:
        post:
            tags:
                - Pins
            summary: Delete pin
            description: Unpin a previously pinned result.
            operationId: unpin
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Unpin"
                description: Details about the pin being unpinned.
                required: true
                x-exportParamName: Unpin
            responses:
                "200":
                    description: OK
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "403":
                    description: Forbidden from unpinning someone else's pin
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: remove
            x-speakeasy-group: client.pins
    /rest/api/v1/adminsearch:
        post:
            tags:
                - Search
            summary: Search the index (admin)
            description: Retrieves results for search query without respect for permissions. This is available only to privileged users.
            operationId: adminsearch
            x-visibility: Preview
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/SearchRequest"
                description: Admin search request
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SearchResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "403":
                    description: Forbidden
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorInfo"
                "422":
                    description: Invalid Query
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorInfo"
                "429":
                    description: Too Many Requests
            x-speakeasy-group: client.search
            x-speakeasy-name-override: queryAsAdmin
    /rest/api/v1/autocomplete:
        post:
            tags:
                - Search
            summary: Autocomplete
            description: Retrieve query suggestions, operators and documents for the given partially typed query.
            operationId: autocomplete
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/AutocompleteRequest"
                description: Autocomplete request
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/AutocompleteResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-group: client.search
            x-speakeasy-name-override: autocomplete
    /rest/api/v1/feed:
        post:
            tags:
                - Search
            summary: Feed of documents and events
            description: The personalized feed/home includes different types of contents including suggestions, recents, calendar events and many more.
            operationId: feed
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/FeedRequest"
                description: Includes request params, client data and more for making user's feed.
                required: true
                x-exportParamName: FeedRequest
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/FeedResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "408":
                    description: Request Timeout
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: retrieveFeed
            x-speakeasy-group: client.search
    /rest/api/v1/recommendations:
        post:
            tags:
                - Search
            summary: Recommend documents
            description: Retrieve recommended documents for the given URL or Glean Document ID.
            operationId: recommendations
            x-visibility: Preview
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/RecommendationsRequest"
                description: Recommendations request
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/RecommendationsResponse"
                "202":
                    description: Accepted. The Retry-After header has a hint about when the response will be available
                "204":
                    description: There are no recommendations for this URL
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "403":
                    description: Document does not exist or user cannot access document
                "429":
                    description: Too Many Requests
            x-speakeasy-group: client.search
            x-speakeasy-name-override: recommendations
    /rest/api/v1/search:
        post:
            tags:
                - Search
            summary: Search
            description: Retrieve results from the index for the given query and filters.
            operationId: search
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/SearchRequest"
                description: Search request
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SearchResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "403":
                    description: Forbidden
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorInfo"
                "408":
                    description: Request Timeout
                "422":
                    description: Invalid Query
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorInfo"
                "429":
                    description: Too Many Requests
            x-speakeasy-group: client.search
            x-speakeasy-name-override: query
    /rest/api/v1/listentities:
        post:
            tags:
                - Entities
            summary: List entities
            description: List some set of details for all entities that fit the given criteria and return in the requested order. Does not support negation in filters, assumes relation type EQUALS. There is a limit of 10000 entities that can be retrieved via this endpoint.
            operationId: listentities
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ListEntitiesRequest"
                description: List people request
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ListEntitiesResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-group: client.entities
            x-speakeasy-name-override: list
    /rest/api/v1/people:
        post:
            tags:
                - Entities
            summary: Read people
            description: Read people details for the given IDs.
            operationId: people
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PeopleRequest"
                description: People request
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PeopleResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: readPeople
            x-speakeasy-group: client.entities
    /rest/api/v1/createshortcut:
        post:
            tags:
                - Shortcuts
            summary: Create shortcut
            description: Create a user-generated shortcut that contains an alias and destination URL.
            operationId: createshortcut
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CreateShortcutRequest"
                description: CreateShortcut request
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CreateShortcutResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: create
            x-speakeasy-group: client.shortcuts
    /rest/api/v1/deleteshortcut:
        post:
            tags:
                - Shortcuts
            summary: Delete shortcut
            description: Delete an existing user-generated shortcut.
            operationId: deleteshortcut
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/DeleteShortcutRequest"
                description: DeleteShortcut request
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: delete
            x-speakeasy-group: client.shortcuts
    /rest/api/v1/getshortcut:
        post:
            tags:
                - Shortcuts
            summary: Read shortcut
            description: Read a particular shortcut's details given its ID.
            operationId: getshortcut
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/GetShortcutRequest"
                description: GetShortcut request
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GetShortcutResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-group: client.shortcuts
            x-speakeasy-name-override: retrieve
    /rest/api/v1/listshortcuts:
        post:
            tags:
                - Shortcuts
            summary: List shortcuts
            description: List shortcuts editable/owned by the currently authenticated user.
            operationId: listshortcuts
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ListShortcutsPaginatedRequest"
                description: Filters, sorters, paging params required for pagination
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ListShortcutsPaginatedResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-group: client.shortcuts
            x-speakeasy-name-override: list
    /rest/api/v1/updateshortcut:
        post:
            tags:
                - Shortcuts
            summary: Update shortcut
            description: Updates the shortcut with the given ID.
            operationId: updateshortcut
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UpdateShortcutRequest"
                description: Shortcut content. Id need to be specified for the shortcut.
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UpdateShortcutResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-group: client.shortcuts
            x-speakeasy-name-override: update
    /rest/api/v1/summarize:
        post:
            tags:
                - Summarize
            summary: Summarize documents
            description: Generate an AI summary of the requested documents.
            operationId: summarize
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/SummarizeRequest"
                description: Includes request params such as the query and specs of the documents to summarize.
                required: true
                x-exportParamName: Request
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SummarizeResponse"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: summarize
            x-speakeasy-group: client.documents
    /rest/api/v1/addverificationreminder:
        post:
            tags:
                - Verification
            summary: Create verification
            description: Creates a verification reminder for the document. Users can create verification reminders from different product surfaces.
            operationId: addverificationreminder
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ReminderRequest"
                description: Details about the reminder.
                required: true
                x-exportParamName: ReminderRequest
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Verification"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "403":
                    description: Document does not exist, does not support verification or user cannot access document
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: addReminder
            x-speakeasy-group: client.verification
    /rest/api/v1/listverifications:
        post:
            tags:
                - Verification
            summary: List verifications
            description: Returns the information to be rendered in verification dashboard. Includes information for each document owned by user regarding their verifications.
            operationId: listverifications
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters:
                - in: query
                  name: count
                  description: Maximum number of documents to return
                  required: false
                  schema:
                    type: integer
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/VerificationFeed"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: list
            x-speakeasy-group: client.verification
    /rest/api/v1/verify:
        post:
            tags:
                - Verification
            summary: Update verification
            description: Verify documents to keep the knowledge up to date within customer corpus.
            operationId: verify
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters: []
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/VerifyRequest"
                description: Details about the verification request.
                required: true
                x-exportParamName: VerifyRequest
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Verification"
                "400":
                    description: Invalid request
                "401":
                    description: Not Authorized
                "403":
                    description: Document does not exist, does not support verification or user cannot access document
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: verify
            x-speakeasy-group: client.verification
    /api/index/v1/indexdocument:
        post:
            summary: Index document
            description: Adds a document to the index or updates an existing document.
            tags:
                - Documents
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/IndexDocumentRequest"
                required: true
                x-exportParamName: IndexDocumentRequest
            responses:
                "200":
                    description: OK
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
                "409":
                    description: Conflict
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: addOrUpdate
            x-speakeasy-group: indexing.documents
    /api/index/v1/indexdocuments:
        post:
            summary: Index documents
            description: Adds or updates multiple documents in the index. Please refer to the [bulk indexing](https://developers.glean.com/docs/indexing_api_bulk_indexing/#choosing-indexdocuments-vs-bulkindexdocuments) documentation for an explanation of when to use this endpoint.
            tags:
                - Documents
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/IndexDocumentsRequest"
                required: true
                x-exportParamName: IndexDocumentsRequest
            responses:
                "200":
                    description: OK
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
                "409":
                    description: Conflict
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: index
            x-speakeasy-group: indexing.documents
    /api/index/v1/bulkindexdocuments:
        post:
            summary: Bulk index documents
            description: Replaces the documents in a datasource using paginated batch API calls. Please refer to the [bulk indexing](https://developers.glean.com/docs/indexing_api_bulk_indexing/#bulk-upload-model) documentation for an explanation of how to use bulk endpoints.
            tags:
                - Documents
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/BulkIndexDocumentsRequest"
                required: true
                x-exportParamName: BulkIndexDocumentsRequest
            responses:
                "200":
                    description: OK
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
                "409":
                    description: Conflict
            x-speakeasy-name-override: bulkIndex
            x-speakeasy-group: indexing.documents
    /api/index/v1/updatepermissions:
        post:
            summary: Update document permissions
            description: Updates the permissions for a given document without modifying document content.
            tags:
                - Documents
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UpdatePermissionsRequest"
                required: true
                x-exportParamName: UpdatePermissionsRequest
            responses:
                "200":
                    description: OK
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
                "409":
                    description: Conflict
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: updatePermissions
            x-speakeasy-group: indexing.permissions
    /api/index/v1/processalldocuments:
        post:
            summary: Schedules the processing of uploaded documents
            description: |
                Schedules the immediate processing of documents uploaded through the indexing API. By default the uploaded documents will be processed asynchronously but this API can be used to schedule processing of all documents on demand.

                If a `datasource` parameter is specified, processing is limited to that custom datasource. Without it, processing applies to all documents across all custom datasources.
                #### Rate Limits
                This endpoint is rate-limited to one usage every 3 hours. Exceeding this limit results in a 429 response code. Here's how the rate limit works:
                1. Calling `/processalldocuments` for datasource `foo` prevents another call for `foo` for 3 hours.
                2. Calling `/processalldocuments` for datasource `foo` doesn't affect immediate calls for `bar`.
                3. Calling `/processalldocuments` for all datasources prevents any datasource calls for 3 hours.
                4. Calling `/processalldocuments` for datasource `foo` doesn't affect immediate calls for all datasources.

                For more frequent document processing, contact Glean support.
            tags:
                - Documents
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ProcessAllDocumentsRequest"
                x-exportParamName: ProcessAllDocumentsRequest
            responses:
                "200":
                    description: OK
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: processAll
            x-speakeasy-group: indexing.documents
    /api/index/v1/deletedocument:
        post:
            summary: Delete document
            description: Deletes the specified document from the index. Succeeds if document is not present.
            tags:
                - Documents
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/DeleteDocumentRequest"
                required: true
                x-exportParamName: DeleteDocumentRequest
            responses:
                "200":
                    description: OK
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
                "409":
                    description: Conflict
            x-speakeasy-name-override: delete
            x-speakeasy-group: indexing.documents
    /api/index/v1/indexuser:
        post:
            summary: Index user
            description: Adds a datasource user or updates an existing user.
            tags:
                - Permissions
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/IndexUserRequest"
                required: true
                x-exportParamName: IndexUserRequest
            responses:
                "200":
                    description: OK
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
                "409":
                    description: Conflict
            x-speakeasy-name-override: indexUser
            x-speakeasy-group: indexing.permissions
    /api/index/v1/bulkindexusers:
        post:
            summary: Bulk index users
            description: Replaces the users in a datasource using paginated batch API calls. Please refer to the [bulk indexing](https://developers.glean.com/docs/indexing_api_bulk_indexing/#bulk-upload-model) documentation for an explanation of how to use bulk endpoints.
            tags:
                - Permissions
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/BulkIndexUsersRequest"
                required: true
                x-exportParamName: BulkIndexUsersRequest
            responses:
                "200":
                    description: OK
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
                "409":
                    description: Conflict
            x-speakeasy-name-override: bulkIndexUsers
            x-speakeasy-group: indexing.permissions
    /api/index/v1/indexgroup:
        post:
            summary: Index group
            description: Add or update a group in the datasource.
            tags:
                - Permissions
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/IndexGroupRequest"
                required: true
                x-exportParamName: IndexGroupRequest
            responses:
                "200":
                    description: OK
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
                "409":
                    description: Conflict
            x-speakeasy-name-override: indexGroup
            x-speakeasy-group: indexing.permissions
    /api/index/v1/bulkindexgroups:
        post:
            summary: Bulk index groups
            description: Replaces the groups in a datasource using paginated batch API calls. Please refer to the [bulk indexing](https://developers.glean.com/docs/indexing_api_bulk_indexing/#bulk-upload-model) documentation for an explanation of how to use bulk endpoints.
            tags:
                - Permissions
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/BulkIndexGroupsRequest"
                required: true
                x-exportParamName: BulkIndexGroupsRequest
            responses:
                "200":
                    description: OK
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
                "409":
                    description: Conflict
            x-speakeasy-name-override: bulkIndexGroups
            x-speakeasy-group: indexing.permissions
    /api/index/v1/indexmembership:
        post:
            summary: Index membership
            description: Add the memberships of a group in the datasource.
            tags:
                - Permissions
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/IndexMembershipRequest"
                required: true
                x-exportParamName: IndexMembershipRequest
            responses:
                "200":
                    description: OK
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
                "409":
                    description: Conflict
            x-speakeasy-name-override: indexMembership
            x-speakeasy-group: indexing.permissions
    /api/index/v1/bulkindexmemberships:
        post:
            summary: Bulk index memberships for a group
            description: Replaces the memberships for a group in a datasource using paginated batch API calls. Please refer to the [bulk indexing](https://developers.glean.com/docs/indexing_api_bulk_indexing/#bulk-upload-model) documentation for an explanation of how to use bulk endpoints.
            tags:
                - Permissions
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/BulkIndexMembershipsRequest"
                required: true
                x-exportParamName: BulkIndexMembershipsRequest
            responses:
                "200":
                    description: OK
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
                "409":
                    description: Conflict
            x-speakeasy-name-override: bulkIndexMemberships
            x-speakeasy-group: indexing.permissions
    /api/index/v1/processallmemberships:
        post:
            summary: Schedules the processing of group memberships
            description: |
                Schedules the immediate processing of all group memberships uploaded through the indexing API. By default the uploaded group memberships will be processed asynchronously but this API can be used to schedule processing of all memberships on demand.
            tags:
                - Permissions
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ProcessAllMembershipsRequest"
                x-exportParamName: ProcessAllMembershipsRequest
            responses:
                "200":
                    description: OK
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
            x-speakeasy-name-override: processMemberships
            x-speakeasy-group: indexing.permissions
    /api/index/v1/deleteuser:
        post:
            summary: Delete user
            description: Delete the user from the datasource. Silently succeeds if user is not present.
            tags:
                - Permissions
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/DeleteUserRequest"
                required: true
                x-exportParamName: DeleteUserRequest
            responses:
                "200":
                    description: OK
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
                "409":
                    description: Conflict
            x-speakeasy-name-override: deleteUser
            x-speakeasy-group: indexing.permissions
    /api/index/v1/deletegroup:
        post:
            summary: Delete group
            description: Delete group from the datasource. Silently succeeds if group is not present.
            tags:
                - Permissions
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/DeleteGroupRequest"
                required: true
                x-exportParamName: DeleteGroupRequest
            responses:
                "200":
                    description: OK
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
                "409":
                    description: Conflict
            x-speakeasy-name-override: deleteGroup
            x-speakeasy-group: indexing.permissions
    /api/index/v1/deletemembership:
        post:
            summary: Delete membership
            description: Delete membership to a group in the specified datasource. Silently succeeds if membership is not present.
            tags:
                - Permissions
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/DeleteMembershipRequest"
                required: true
                x-exportParamName: DeleteMembershipRequest
            responses:
                "200":
                    description: OK
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
                "409":
                    description: Conflict
            x-speakeasy-name-override: deleteMembership
            x-speakeasy-group: indexing.permissions
    /api/index/v1/debug/{datasource}/status:
        post:
            x-beta: true
            summary: |
                Beta: Get datasource status
            description: |
                Gather information about the datasource's overall status. Currently in beta, might undergo breaking changes without prior notice.

                Tip: Refer to the [Troubleshooting tutorial](https://developers.glean.com/docs/indexing_api/indexing_api_troubleshooting/) for more information.
            tags:
                - Troubleshooting
            parameters:
                - name: datasource
                  in: path
                  description: The datasource to get debug status for.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json; charset=UTF-8:
                            schema:
                                $ref: "#/components/schemas/DebugDatasourceStatusResponse"
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
            x-speakeasy-name-override: status
            x-speakeasy-group: indexing.datasource
    /api/index/v1/debug/{datasource}/document:
        post:
            x-beta: true
            summary: |
                Beta: Get document information
            description: |
                Gives various information that would help in debugging related to a particular document. Currently in beta, might undergo breaking changes without prior notice.

                Tip: Refer to the [Troubleshooting tutorial](https://developers.glean.com/docs/indexing_api/indexing_api_troubleshooting/) for more information.
            tags:
                - Troubleshooting
            parameters:
                - name: datasource
                  in: path
                  description: The datasource to which the document belongs
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json; charset=UTF-8:
                        schema:
                            $ref: "#/components/schemas/DebugDocumentRequest"
                required: true
                x-exportParamName: DebugDocumentRequest
            responses:
                "200":
                    description: OK
                    content:
                        application/json; charset=UTF-8:
                            schema:
                                $ref: "#/components/schemas/DebugDocumentResponse"
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
            x-speakeasy-group: indexing.documents
            x-speakeasy-name-override: debug
    /api/index/v1/debug/{datasource}/documents:
        post:
            x-beta: true
            summary: |
                Beta: Get information of a batch of documents
            description: |
                Gives various information that would help in debugging related to a batch of documents. Currently in beta, might undergo breaking changes without prior notice.

                Tip: Refer to the [Troubleshooting tutorial](https://developers.glean.com/docs/indexing_api/indexing_api_troubleshooting/) for more information.
            tags:
                - Troubleshooting
            parameters:
                - name: datasource
                  in: path
                  description: The datasource to which the document belongs
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json; charset=UTF-8:
                        schema:
                            $ref: "#/components/schemas/DebugDocumentsRequest"
                required: true
                x-exportParamName: DebugDocumentsRequest
            responses:
                "200":
                    description: OK
                    content:
                        application/json; charset=UTF-8:
                            schema:
                                $ref: "#/components/schemas/DebugDocumentsResponse"
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
            x-speakeasy-group: indexing.documents
            x-speakeasy-name-override: debugMany
    /api/index/v1/debug/{datasource}/user:
        post:
            x-beta: true
            summary: |
                Beta: Get user information
            description: |
                Gives various information that would help in debugging related to a particular user. Currently in beta, might undergo breaking changes without prior notice.

                Tip: Refer to the [Troubleshooting tutorial](https://developers.glean.com/docs/indexing_api/indexing_api_troubleshooting/) for more information.
            tags:
                - Troubleshooting
            parameters:
                - name: datasource
                  in: path
                  description: The datasource to which the user belongs
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json; charset=UTF-8:
                        schema:
                            $ref: "#/components/schemas/DebugUserRequest"
                required: true
                x-exportParamName: DebugUserRequest
            responses:
                "200":
                    description: OK
                    content:
                        application/json; charset=UTF-8:
                            schema:
                                $ref: "#/components/schemas/DebugUserResponse"
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
            x-speakeasy-name-override: debug
            x-speakeasy-group: indexing.people
    /api/index/v1/checkdocumentaccess:
        post:
            summary: Check document access
            description: |
                Check if a given user has access to access a document in a custom datasource

                Tip: Refer to the [Troubleshooting tutorial](https://developers.glean.com/docs/indexing_api/indexing_api_troubleshooting/) for more information.
            tags:
                - Troubleshooting
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CheckDocumentAccessRequest"
                required: true
                x-exportParamName: CheckDocumentAccessRequest
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CheckDocumentAccessResponse"
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-group: indexing.documents
            x-speakeasy-name-override: checkAccess
    /api/index/v1/getdocumentstatus:
        post:
            deprecated: true
            summary: Get document upload and indexing status
            description: |
                Intended for debugging/validation. Fetches the current upload and indexing status of documents.

                Tip: Use [/debug/{datasource}/document](https://developers.glean.com/docs/indexing_api/indexing_api_troubleshooting/#debug-datasource-document) for richer information.
            tags:
                - Troubleshooting
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/GetDocumentStatusRequest"
                required: true
                x-exportParamName: GetDocumentStatusRequest
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GetDocumentStatusResponse"
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-group: indexing.documents
            x-speakeasy-name-override: status
    /api/index/v1/getdocumentcount:
        post:
            deprecated: true
            summary: Get document count
            description: |
                Fetches document count for the specified custom datasource.

                Tip: Use [/debug/{datasource}/status](https://developers.glean.com/docs/indexing_api/indexing_api_troubleshooting/#debug-datasource-status) for richer information.
            tags:
                - Troubleshooting
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/GetDocumentCountRequest"
                required: true
                x-exportParamName: GetDocumentCountRequest
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GetDocumentCountResponse"
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
                "409":
                    description: Conflict
            x-speakeasy-group: indexing.documents
            x-speakeasy-name-override: count
    /api/index/v1/getusercount:
        post:
            deprecated: true
            summary: Get user count
            description: |
                Fetches user count for the specified custom datasource.

                Tip: Use [/debug/{datasource}/status](https://developers.glean.com/docs/indexing_api/indexing_api_troubleshooting/#debug-datasource-status) for richer information.
            tags:
                - Troubleshooting
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/GetUserCountRequest"
                required: true
                x-exportParamName: GetUserCountRequest
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GetUserCountResponse"
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
                "409":
                    description: Conflict
            x-speakeasy-name-override: count
            x-speakeasy-group: indexing.people
    /api/index/v1/betausers:
        post:
            summary: Beta users
            description: Allow the datasource be visible to the specified beta users. The default behaviour is datasource being visible to all users if it is enabled and not visible to any user if it is not enabled.
            tags:
                - Permissions
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/GreenlistUsersRequest"
                required: true
                x-exportParamName: GreenlistUsersRequest
            responses:
                "200":
                    description: OK
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
                "409":
                    description: Conflict
            x-speakeasy-name-override: authorizeBetaUsers
            x-speakeasy-group: indexing.permissions
    /api/index/v1/adddatasource:
        post:
            summary: Add or update datasource
            description: Add or update a custom datasource and its schema.
            tags:
                - Datasources
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CustomDatasourceConfig"
                required: true
                x-exportParamName: DatasourceConfig
            responses:
                "200":
                    description: OK
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
            x-speakeasy-name-override: add
            x-speakeasy-group: indexing.datasources
    /api/index/v1/getdatasourceconfig:
        post:
            summary: Get datasource config
            description: Fetches the datasource config for the specified custom datasource.
            tags:
                - Datasources
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/GetDatasourceConfigRequest"
                required: true
                x-exportParamName: GetDatasourceConfigRequest
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CustomDatasourceConfig"
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
                "409":
                    description: Conflict
            x-speakeasy-name-override: retrieveConfig
            x-speakeasy-group: indexing.datasources
    /api/index/v1/rotatetoken:
        post:
            summary: Rotate token
            description: Rotates the secret value inside the Indexing API token and returns the new raw secret. All other properties of the token are unchanged. In order to rotate the secret value, include the token as the bearer token in the `/rotatetoken` request. Please refer to [Token rotation](https://developers.glean.com/docs/indexing_api_token_rotation/) documentation for more information.
            tags:
                - Authentication
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/RotateTokenResponse"
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
            x-speakeasy-name-override: rotateToken
            x-speakeasy-group: indexing.authentication
    /api/index/v1/indexemployee:
        post:
            summary: Index employee
            description: Adds an employee or updates information about an employee
            tags:
                - People
            requestBody:
                content:
                    application/json; charset=UTF-8:
                        schema:
                            $ref: "#/components/schemas/IndexEmployeeRequest"
                required: true
                x-exportParamName: IndexEmployeeRequest
            responses:
                "200":
                    description: OK
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
                "409":
                    description: Conflict
            x-speakeasy-name-override: index
            x-speakeasy-group: indexing.people
    /api/index/v1/bulkindexemployees:
        post:
            summary: Bulk index employees
            description: Replaces all the currently indexed employees using paginated batch API calls. Please refer to the [bulk indexing](https://developers.glean.com/docs/indexing_api_bulk_indexing/#bulk-upload-model) documentation for an explanation of how to use bulk endpoints.
            tags:
                - People
            requestBody:
                content:
                    application/json; charset=UTF-8:
                        schema:
                            $ref: "#/components/schemas/BulkIndexEmployeesRequest"
                required: true
                x-exportParamName: BulkIndexEmployeesRequest
            responses:
                "200":
                    description: OK
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
                "409":
                    description: Conflict
            x-speakeasy-name-override: bulkIndex
            x-speakeasy-group: indexing.people
    /api/index/v1/indexemployeelist: {}
    /api/index/v1/processallemployeesandteams:
        post:
            summary: Schedules the processing of uploaded employees and teams
            description: |
                Schedules the immediate processing of employees and teams uploaded through the indexing API. By default all uploaded people data will be processed asynchronously but this API can be used to schedule its processing on demand.
            tags:
                - People
            responses:
                "200":
                    description: OK
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
                "429":
                    description: Too Many Requests
            x-speakeasy-name-override: processAllEmployeesAndTeams
            x-speakeasy-group: indexing.people
    /api/index/v1/deleteemployee:
        post:
            summary: Delete employee
            description: Delete an employee. Silently succeeds if employee is not present.
            tags:
                - People
            requestBody:
                content:
                    application/json; charset=UTF-8:
                        schema:
                            $ref: "#/components/schemas/DeleteEmployeeRequest"
                required: true
                x-exportParamName: DeleteEmployeeRequest
            responses:
                "200":
                    description: OK
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
                "409":
                    description: Conflict
            x-speakeasy-name-override: delete
            x-speakeasy-group: indexing.people
    /api/index/v1/indexteam:
        post:
            summary: Index team
            description: Adds a team or updates information about a team
            tags:
                - People
            requestBody:
                content:
                    application/json; charset=UTF-8:
                        schema:
                            $ref: "#/components/schemas/IndexTeamRequest"
                required: true
                x-exportParamName: IndexTeamRequest
            responses:
                "200":
                    description: OK
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
                "409":
                    description: Conflict
            x-speakeasy-name-override: indexTeam
            x-speakeasy-group: indexing.people
    /api/index/v1/deleteteam:
        post:
            summary: Delete team
            description: Delete a team based on provided id.
            tags:
                - People
            requestBody:
                content:
                    application/json; charset=UTF-8:
                        schema:
                            $ref: "#/components/schemas/DeleteTeamRequest"
                required: true
                x-exportParamName: DeleteTeamRequest
            responses:
                "200":
                    description: OK
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
                "409":
                    description: Conflict
            x-speakeasy-name-override: deleteTeam
            x-speakeasy-group: indexing.people
    /api/index/v1/bulkindexteams:
        post:
            summary: Bulk index teams
            description: Replaces all the currently indexed teams using paginated batch API calls. Please refer to the [bulk indexing](https://developers.glean.com/docs/indexing_api_bulk_indexing/#bulk-upload-model) documentation for an explanation of how to use bulk endpoints.
            tags:
                - People
            requestBody:
                content:
                    application/json; charset=UTF-8:
                        schema:
                            $ref: "#/components/schemas/BulkIndexTeamsRequest"
                required: true
                x-exportParamName: BulkIndexTeamsRequest
            responses:
                "200":
                    description: OK
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
                "409":
                    description: Conflict
            x-speakeasy-name-override: bulkIndexTeams
            x-speakeasy-group: indexing.people
    /api/index/v1/bulkindexshortcuts:
        post:
            summary: Bulk index external shortcuts
            description: Replaces all the currently indexed shortcuts using paginated batch API calls. Note that this endpoint is used for indexing shortcuts not hosted by Glean. If you want to upload shortcuts that would be hosted by Glean, please use the `/uploadshortcuts` endpoint. For information on what you can do with Golinks, which are Glean-hosted shortcuts, please refer to [this](https://help.glean.com/en/articles/5628838-how-go-links-work) page.
            tags:
                - Shortcuts
            requestBody:
                content:
                    application/json; charset=UTF-8:
                        schema:
                            $ref: "#/components/schemas/BulkIndexShortcutsRequest"
                required: true
                x-exportParamName: BulkIndexShortcutsRequest
            responses:
                "200":
                    description: OK
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
                "409":
                    description: Conflict
            x-speakeasy-name-override: bulkIndex
            x-speakeasy-group: indexing.shortcuts
    /api/index/v1/uploadshortcuts:
        post:
            summary: Upload shortcuts
            description: Creates glean shortcuts for uploaded shortcuts info. Glean would host the shortcuts, and they can be managed in the knowledge tab once uploaded.
            tags:
                - Shortcuts
            requestBody:
                content:
                    application/json; charset=UTF-8:
                        schema:
                            $ref: "#/components/schemas/UploadShortcutsRequest"
                required: true
                x-exportParamName: UploadShortcutsRequest
            responses:
                "200":
                    description: OK
                "400":
                    description: Bad Request
                "401":
                    description: Not Authorized
                "409":
                    description: Conflict
            x-speakeasy-name-override: upload
            x-speakeasy-group: indexing.shortcuts
    /rest/api/v1/chat#stream:
        post:
            tags:
                - Chat
            summary: Chat
            description: Have a conversation with Glean AI.
            operationId: chatStream
            x-visibility: Public
            x-codegen-request-body-name: payload
            parameters:
                - $ref: '#/components/parameters/timezoneOffset'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ChatRequest'
                        examples:
                            defaultExample:
                                value:
                                    messages:
                                        - author: USER
                                          messageType: CONTENT
                                          fragments:
                                            - text: What are the company holidays this year?
                            gptAgentExample:
                                value:
                                    agentConfig:
                                        agent: GPT
                                    messages:
                                        - author: USER
                                          messageType: CONTENT
                                          fragments:
                                            - text: Who was the first person to land on the moon?
                description: Includes chat history for Glean AI to respond to.
                required: true
                x-exportParamName: Request
            responses:
                '200':
                    description: OK
                    content:
                        text/plain:
                            schema:
                                $ref: '#/components/schemas/ChatRequestStream'
                            examples:
                                defaultExample:
                                    value:
                                        messages:
                                            - author: GLEAN_AI
                                              messageType: CONTENT
                                              hasMoreFragments: false
                                              agentConfig:
                                                agent: DEFAULT
                                                mode: DEFAULT
                                              fragments:
                                                - text: There are no holidays!
                                streamingExample:
                                    value:
                                        messages:
                                            - author: GLEAN_AI
                                              messageType: CONTENT
                                              agentConfig:
                                                agent: DEFAULT
                                                mode: DEFAULT
                                                hasMoreFragments: true
                                              fragments: null
                                            - author: GLEAN_AI
                                              messageType: CONTENT
                                              agentConfig:
                                                agent: DEFAULT
                                                mode: DEFAULT
                                                hasMoreFragments: true
                                              fragments: null
                                            - author: GLEAN_AI
                                              messageType: CONTENT
                                              agentConfig:
                                                agent: DEFAULT
                                                mode: DEFAULT
                                                hasMoreFragments: true
                                              fragments:
                                                - text: e are
                                            - author: GLEAN_AI
                                              messageType: CONTENT
                                              agentConfig:
                                                agent: DEFAULT
                                                mode: DEFAULT
                                                hasMoreFragments: true
                                              fragments:
                                                - text: no hol
                                            - author: GLEAN_AI
                                              messageType: CONTENT
                                              agentConfig:
                                                agent: DEFAULT
                                                mode: DEFAULT
                                                hasMoreFragments: false
                                              fragments:
                                                - text: idays!
                                updateResponse:
                                    value:
                                        messages:
                                            - author: GLEAN_AI
                                              messageType: UPDATE
                                              agentConfig:
                                                agent: DEFAULT
                                                mode: DEFAULT
                                              fragments:
                                                - text: '**Reading:**'
                                                - structuredResults:
                                                    - document:
                                                        id: '123'
                                                        title: Company Handbook
                                citationResponse:
                                    value:
                                        messages:
                                            - author: GLEAN_AI
                                              messageType: CONTENT
                                              agentConfig:
                                                agent: DEFAULT
                                                mode: DEFAULT
                                              citations:
                                                - sourceDocument:
                                                    id: '123'
                                                    title: Company Handbook
                                                    referenceRanges:
                                                        - textRange:
                                                            startIndex: 0
                                                            endIndex: 12
                                                            type: CITATION
                '400':
                    description: Invalid request
                '401':
                    description: Not Authorized
                '408':
                    description: Request Timeout
                '429':
                    description: Too Many Requests
            x-speakeasy-group: client.chat
            x-speakeasy-name-override: createStream
            x-speakeasy-usage-example: true
components:
    securitySchemes:
        BearerAuth:
            scheme: bearer
            type: http
    schemas:
        ActivityEventParams:
            properties:
                bodyContent:
                    description: The HTML content of the page body.
                    type: string
                datasourceInstance:
                    type: string
                    description: The full datasource instance name inferred from the URL of the event
                datasource:
                    type: string
                    description: The datasource without the instance inferred from the URL of the event
                instanceOnlyName:
                    type: string
                    description: The instance only name of the datasource instance, e.g. 1 for jira_1, inferred from the URL of the event
                duration:
                    description: Length in seconds of the activity. For VIEWS, this represents the amount the page was visible in the foreground.
                    type: integer
                query:
                    description: The user's search query associated with a SEARCH.
                    type: string
                referrer:
                    description: The referring URL of the VIEW or SEARCH.
                    type: string
                title:
                    description: The page title associated with the URL of the event
                    type: string
                truncated:
                    description: Indicates that the parameters are incomplete and more parameters may be sent with the same action+timestamp+URL in the future. This is used for sending the duration when a `VIEW` is finished.
                    type: boolean
        ActivityEvent:
            required:
                - action
                - source
                - timestamp
                - url
            properties:
                id:
                    type: string
                    description: Universally unique identifier of the event. To allow for reliable retransmission, only the earliest received event of a given UUID is considered valid by the server and subsequent are ignored.
                action:
                    type: string
                    description: The type of activity this represents.
                    x-enumDescriptions:
                        VIEW: Represents a visit to the given `url`.
                        EDIT: Represents an edit of the document represented by the `url`.
                        SEARCH: Represents a search performed at the given `url`.
                        COMMENT: Represents a comment on the document represented by the `url`.
                        CRAWL: Represents an explicit request to index the given `url` along with associated attributes in this payload.
                        HISTORICAL_SEARCH: Represents a search performed at the given `url` as indicated by the user's history.
                        HISTORICAL_VIEW: Represents a visit to the given `url` as indicated by the user's history.
                    enum:
                        - VIEW
                        - EDIT
                        - SEARCH
                        - COMMENT
                        - CRAWL
                        - HISTORICAL_SEARCH
                        - HISTORICAL_VIEW
                params:
                    $ref: "#/components/schemas/ActivityEventParams"
                timestamp:
                    type: string
                    description: The ISO 8601 timestamp when the activity began.
                    format: date-time
                url:
                    description: The URL of the activity.
                    type: string
        Activity:
            required:
                - events
            properties:
                events:
                    type: array
                    items:
                        $ref: "#/components/schemas/ActivityEvent"
            example:
                events:
                    - url: https://example.com/
                      action: HISTORICAL_VIEW
                      timestamp: "2000-01-23T04:56:07.000Z"
                    - url: https://example.com/search?q=query
                      action: SEARCH
                      timestamp: "2000-01-23T04:56:07.000Z"
                      params:
                        query: query
                    - url: https://example.com/
                      action: VIEW
                      timestamp: "2000-01-23T04:56:07.000Z"
                      params:
                        duration: 20
                        referrer: https://example.com/document
        SessionInfo:
            properties:
                sessionTrackingToken:
                    type: string
                    description: A unique token for this session. A new session (and token) is created when the user issues a request from a new tab or when our server hasn't seen activity for more than 10 minutes from a tab.
                tabId:
                    type: string
                    description: A unique id for all requests a user makes from a given tab, no matter how far apart. A new tab id is only generated when a user issues a request from a new tab.
                lastSeen:
                    type: string
                    format: date-time
                    description: The last time the server saw this token.
                lastQuery:
                    type: string
                    description: The last query seen by the server.
        User:
            properties:
                userID:
                    description: An opaque user ID for the claimed authority (i.e., the actas param, or the origid if actas is not specified).
                    type: string
                origID:
                    description: An opaque user ID for the authenticated user (ignores actas).
                    type: string
        FeedbackChatExchange:
            properties:
                timestamp:
                    type: integer
                    format: int64
                    description: Unix timestamp in millis for the chat request.
                agent:
                    type: string
                    description: Either DEFAULT (company knowledge) or GPT (world knowledge).
                userQuery:
                    type: string
                    description: Initial query entered by the user.
                searchQuery:
                    type: string
                    description: Search query performed by the agent.
                resultDocuments:
                    type: array
                    description: List of documents read by the agent.
                    items:
                        properties:
                            title:
                                type: string
                            url:
                                type: string
                response:
                    type: string
        ManualFeedbackInfo:
            properties:
                email:
                    type: string
                    description: The email address of the user who submitted the Feedback.event.MANUAL_FEEDBACK event.
                source:
                    type: string
                    description: The source associated with the Feedback.event.MANUAL_FEEDBACK event.
                    enum:
                        - AUTOCOMPLETE
                        - CALENDAR
                        - CHAT
                        - CHAT_GENERAL
                        - CONCEPT_CARD
                        - DESKTOP_APP
                        - DISAMBIGUATION_CARD
                        - EXPERT_DETECTION
                        - FEED
                        - GENERATED_Q_AND_A
                        - INLINE_MENU
                        - NATIVE_RESULT
                        - Q_AND_A
                        - RELATED_QUESTIONS
                        - REPORT_ISSUE
                        - SCIOBOT
                        - SEARCH
                        - SIDEBAR
                        - SUMMARY
                issue:
                    type: string
                    description: The issue the user indicated in the feedback.
                    deprecated: true
                issues:
                    type: array
                    description: The issue(s) the user indicated in the feedback.
                    items:
                        type: string
                        enum:
                            - INACCURATE_RESPONSE
                            - INCOMPLETE_OR_NO_ANSWER
                            - INCORRECT_CITATION
                            - MISSING_CITATION
                            - OTHER
                            - OUTDATED_RESPONSE
                            - RESULT_MISSING
                            - RESULT_SHOULD_NOT_APPEAR
                            - RESULTS_HELPFUL
                            - RESULTS_POOR_ORDER
                            - TOO_MUCH_ONE_KIND
                imageUrls:
                    type: array
                    items:
                        type: string
                    description: URLs of images uploaded by user when providing feedback
                query:
                    type: string
                    description: The query associated with the Feedback.event.MANUAL_FEEDBACK event.
                obscuredQuery:
                    type: string
                    description: The query associated with the Feedback.event.MANUAL_FEEDBACK event, but obscured such that the vowels are replaced with special characters. For search feedback events only.
                activeTab:
                    type: string
                    description: Which tabs the user had chosen at the time of the Feedback.event.MANUAL_FEEDBACK event. For search feedback events only.
                comments:
                    type: string
                    description: The comments users can optionally add to the Feedback.event.MANUAL_FEEDBACK events.
                searchResults:
                    type: array
                    items:
                        type: string
                    description: The array of search result Glean Document IDs, ordered by top to bottom result.
                previousMessages:
                    type: array
                    items:
                        type: string
                    description: The array of previous messages in a chat session, ordered by oldest to newest.
                chatTranscript:
                    type: array
                    items:
                        $ref: "#/components/schemas/FeedbackChatExchange"
                    description: Array of previous request/response exchanges, ordered by oldest to newest.
                numQueriesFromFirstRun:
                    type: integer
                    description: How many times this query has been run in the past.
                vote:
                    type: string
                    description: The vote associated with the Feedback.event.MANUAL_FEEDBACK event.
                    enum:
                        - UPVOTE
                        - DOWNVOTE
                rating:
                    type: integer
                    description: A rating associated with the user feedback. The value will be between one and the maximum given by ratingScale, inclusive.
                ratingKey:
                    type: string
                    description: A description of the rating that contextualizes how it appeared to the user, e.g. "satisfied".
                ratingScale:
                    type: integer
                    description: The scale of comparison for a rating associated with the feedback. Rating values start from one and go up to the maximum specified by ratingScale. For example, a five-option satisfaction rating will have a ratingScale of 5 and a thumbs-up/thumbs-down rating will have a ratingScale of 2.
        SeenFeedbackInfo:
            properties:
                isExplicit:
                    type: boolean
                    description: The confidence of the user seeing the object is high because they explicitly interacted with it e.g. answer impression in SERP with additional user interaction.
        UserViewInfo:
            properties:
                docId:
                    type: string
                    description: Unique Glean Document ID of the associated document.
                docTitle:
                    type: string
                    description: Title of associated document.
                docUrl:
                    type: string
                    description: URL of associated document.
        WorkflowFeedbackInfo:
            properties:
                source:
                    type: string
                    enum:
                        - ZERO_STATE
                        - LIBRARY
                        - HOMEPAGE
                    description: Where the feedback of the workflow originated from
        Feedback:
            required:
                - event
                - trackingTokens
            properties:
                id:
                    type: string
                    description: Universally unique identifier of the event. To allow for reliable retransmission, only the earliest received event of a given UUID is considered valid by the server and subsequent are ignored.
                category:
                    type: string
                    description: The feature category to which the feedback applies. These should be broad product areas such as Announcements, Answers, Search, etc. rather than specific components or UI treatments within those areas.
                    enum:
                        - ANNOUNCEMENT
                        - AUTOCOMPLETE
                        - COLLECTIONS
                        - FEED
                        - SEARCH
                        - CHAT
                        - NTP
                        - WORKFLOWS
                        - SUMMARY
                        - GENERAL
                        - PROMPTS
                trackingTokens:
                    type: array
                    description: A list of server-generated trackingTokens to which this event applies.
                    items:
                        type: string
                event:
                    type: string
                    description: The action the user took within a Glean client with respect to the object referred to by the given `trackingToken`.
                    x-enumDescriptions:
                        CLICK: The object's primary link was clicked with the intent to view its full representation. Depending on the object type, this may imply an external navigation or navigating to a new page or view within the Glean app.
                        CONTAINER_CLICK: A link to the object's parent container (e.g. the folder in which it's located) was clicked.
                        COPY_LINK: The user copied a link to the primary link.
                        CREATE: The user creates a document.
                        DISMISS: The user dismissed the object such that it was hidden from view.
                        DOWNVOTE: The user gave feedback that the object was not useful.
                        EMAIL: The user attempted to send an email.
                        EXECUTE: The user executed the object (e.g. ran a workflow).
                        FILTER: The user applied a filter.
                        FIRST_TOKEN: The first token of a streaming response is received.
                        FOCUS_IN: The user clicked into an interactive element, e.g. the search box.
                        LAST_TOKEN: The final token of a streaming response is received.
                        MANUAL_FEEDBACK: The user submitted textual manual feedback regarding the object.
                        MARK_AS_READ: The user explicitly marked the content as read.
                        MESSAGE: The user attempted to send a message using their default messaing app.
                        MIDDLE_CLICK: The user middle clicked the object's primary link with the intent to open its full representation in a new tab.
                        PAGE_BLUR: The user puts a page out of focus but keeps it in the background.
                        PAGE_FOCUS: The user puts a page in focus, meaning it is the first to receive keyboard events.
                        PAGE_LEAVE: The user leaves a page and it is unloaded (by clicking a link, closing the tab/window, etc).
                        PREVIEW: The user clicked the object's inline preview affordance.
                        RIGHT_CLICK: The user right clicked the object's primary link. This may indicate an intent to open it in a new tab or copy it.
                        SECTION_CLICK: The user clicked a link to a subsection of the primary object.
                        SEEN: The user has likely seen the object (e.g. took action to make the object visible within the user's viewport).
                        SHARE: The user shared the object with another user.
                        SHOW_MORE: The user clicked the object's show more affordance.
                        UPVOTE: The user gave feedback that the object was useful.
                        VIEW: The object was visible within the user's viewport.
                        VISIBLE: The object was visible within the user's viewport.
                    enum:
                        - CLICK
                        - CONTAINER_CLICK
                        - COPY_LINK
                        - CREATE
                        - DISMISS
                        - DOWNVOTE
                        - EMAIL
                        - EXECUTE
                        - FILTER
                        - FIRST_TOKEN
                        - FOCUS_IN
                        - LAST_TOKEN
                        - MANUAL_FEEDBACK
                        - MARK_AS_READ
                        - MESSAGE
                        - MIDDLE_CLICK
                        - PAGE_BLUR
                        - PAGE_FOCUS
                        - PAGE_LEAVE
                        - PREVIEW
                        - RELATED_CLICK
                        - RIGHT_CLICK
                        - SECTION_CLICK
                        - SEEN
                        - SHARE
                        - SHOW_MORE
                        - UPVOTE
                        - VIEW
                        - VISIBLE
                position:
                    type: integer
                    description: Position of the element in the case that the client controls order (such as feed and autocomplete).
                payload:
                    type: string
                    description: For type MANUAL_FEEDBACK, contains string of user feedback. For autocomplete, partial query string. For feed, string of user feedback in addition to manual feedback signals extracted from all suggested content.
                sessionInfo:
                    $ref: "#/components/schemas/SessionInfo"
                timestamp:
                    type: string
                    description: The ISO 8601 timestamp when the event occured.
                    format: date-time
                user:
                    $ref: "#/components/schemas/User"
                pathname:
                    type: string
                    description: The path the client was at when the feedback event triggered.
                channels:
                    type: array
                    description: Where the feedback will be sent, e.g. to Glean, the user's company, or both. If no channels are specified, feedback will go only to Glean.
                    items:
                        type: string
                        enum:
                            - COMPANY
                            - GLEAN
                url:
                    type: string
                    description: The URL the client was at when the feedback event triggered.
                uiTree:
                    description: The UI element tree associated with the event, if any.
                    items:
                        type: string
                    type: array
                uiElement:
                    type: string
                    description: The UI element associated with the event, if any.
                manualFeedbackInfo:
                    $ref: "#/components/schemas/ManualFeedbackInfo"
                seenFeedbackInfo:
                    $ref: "#/components/schemas/SeenFeedbackInfo"
                userViewInfo:
                    $ref: "#/components/schemas/UserViewInfo"
                workflowFeedbackInfo:
                    $ref: "#/components/schemas/WorkflowFeedbackInfo"
                applicationId:
                    type: string
                    description: The application ID of the client that sent the feedback event.
                agentId:
                    type: string
                    description: The agent ID of the client that sent the feedback event.
            example:
                trackingTokens:
                    - trackingTokens
                event: VIEW
        StructuredTextMutableProperties:
            required:
                - text
            properties:
                text:
                    type: string
                    example: From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.
        ConnectorType:
            type: string
            description: The source from which document content was pulled, e.g. an API crawl or browser history
            enum:
                - API_CRAWL
                - BROWSER_CRAWL
                - BROWSER_HISTORY
                - BUILTIN
                - FEDERATED_SEARCH
                - PUSH_API
                - WEB_CRAWL
                - NATIVE_HISTORY
        DocumentContent:
            properties:
                fullTextList:
                    type: array
                    items:
                        type: string
                    description: The plaintext content of the document.
        Document:
            properties:
                id:
                    type: string
                    description: The Glean Document ID.
                datasource:
                    type: string
                    description: The app or other repository type from which the document was extracted
                connectorType:
                    $ref: "#/components/schemas/ConnectorType"
                docType:
                    type: string
                    description: The datasource-specific type of the document (e.g. for Jira issues, this is the issue type such as Bug or Feature Request).
                content:
                    $ref: "#/components/schemas/DocumentContent"
                containerDocument:
                    $ref: "#/components/schemas/Document"
                parentDocument:
                    $ref: "#/components/schemas/Document"
                title:
                    type: string
                    description: The title of the document.
                url:
                    type: string
                    description: A permalink for the document.
                metadata:
                    $ref: "#/components/schemas/DocumentMetadata"
                sections:
                    type: array
                    description: A list of content sub-sections in the document, e.g. text blocks with different headings in a Drive doc or Confluence page.
                    items:
                        $ref: "#/components/schemas/DocumentSection"
        SearchProviderInfo:
            properties:
                name:
                    type: string
                    description: Name of the search provider.
                logoUrl:
                    type: string
                    description: URL to the provider's logo.
                searchLinkUrlTemplate:
                    type: string
                    description: URL template that can be used to perform the suggested search by replacing the {query} placeholder with the query suggestion.
            example:
                name: Google
                logo: https://app.glean.com/images/feather/globe.svg
                searchLinkUrlTemplate: https://www.google.com/search?q={query}&hl=en
        FacetFilterValue:
            properties:
                value:
                    type: string
                    example: Spreadsheet
                relationType:
                    type: string
                    enum:
                        - EQUALS
                        - ID_EQUALS
                        - LT
                        - GT
                    example: EQUALS
                isNegated:
                    type: boolean
                    deprecated: true
                    description: DEPRECATED - please use relationType instead
        FacetFilter:
            properties:
                fieldName:
                    type: string
                    example: owner
                values:
                    type: array
                    items:
                        $ref: "#/components/schemas/FacetFilterValue"
                    description: Within a single FacetFilter, the values are to be treated like an OR. For example, fieldName type with values [EQUALS Presentation, EQUALS Spreadsheet] means we want to show a document if it's a Presentation OR a Spreadsheet.
                groupName:
                    type: string
                    example: Spreadsheet
                    description: Indicates the value of a facet, if any, that the given facet is grouped under. This is only used for nested facets, for example, fieldName could be owner and groupName would be Spreadsheet if showing all owners for spreadsheets as a nested facet.
            example:
                fieldName: type
                values:
                    - value: Spreadsheet
                      relationType: EQUALS
                    - value: Presentation
                      relationType: EQUALS
        FacetFilterSet:
            properties:
                filters:
                    type: array
                    items:
                        $ref: "#/components/schemas/FacetFilter"
            description: Within a single FacetFilterSet, the filters are treated as AND. For example, owner Sumeet and type Spreadsheet shows documents that are by Sumeet AND are Spreadsheets.
        FacetBucketFilter:
            properties:
                facet:
                    type: string
                    description: The facet whose buckets should be filtered.
                prefix:
                    type: string
                    description: The per-term prefix that facet buckets should be filtered on.
        AuthToken:
            required:
                - accessToken
                - datasource
            properties:
                accessToken:
                    type: string
                datasource:
                    type: string
                scope:
                    type: string
                tokenType:
                    type: string
                authUser:
                    description: Used by Google to indicate the index of the logged in user. Useful for generating hyperlinks that support multilogin.
                    type: string
                expiration:
                    description: Unix timestamp when this token expires (in seconds since epoch UTC).
                    type: integer
                    format: int64
            example:
                accessToken: 123abc
                datasource: gmail
                scope: email profile https://www.googleapis.com/auth/gmail.readonly
                tokenType: Bearer
                authUser: "1"
        DocumentSpec:
            oneOf:
                - type: object
                  properties:
                    url:
                        type: string
                        description: The URL of the document.
                - type: object
                  properties:
                    id:
                        type: string
                        description: The ID of the document.
                - type: object
                  properties:
                    ugcType:
                        type: string
                        enum:
                            - ANNOUNCEMENTS
                            - ANSWERS
                            - COLLECTIONS
                            - SHORTCUTS
                        description: The type of the user generated content (UGC datasource).
                    contentId:
                        type: integer
                        description: The id for user generated content.
                    docType:
                        type: string
                        description: The specific type of the user generated content type.
        RestrictionFilters:
            properties:
                containerSpecs:
                    description: "Specifications for containers that should be used as part of the restriction (include/exclude). Memberships are recursively defined for a subset of datasources (currently: SharePoint, OneDrive, Google Drive, and Confluence). Please contact the Glean team to enable this for more datasources. Recursive memberships do not apply for Collections."
                    type: array
                    items:
                        $ref: "#/components/schemas/DocumentSpec"
        SearchRequestOptions:
            required:
                - facetBucketSize
            properties:
                datasourceFilter:
                    type: string
                    description: Filter results to a single datasource name (e.g. gmail, slack). All results are returned if missing.
                datasourcesFilter:
                    type: array
                    items:
                        type: string
                    description: Filter results to one or more datasources (e.g. gmail, slack). All results are returned if missing.
                queryOverridesFacetFilters:
                    type: boolean
                    description: If true, the operators in the query are taken to override any operators in facetFilters in the case of conflict. This is used to correctly set rewrittenFacetFilters and rewrittenQuery.
                facetFilters:
                    type: array
                    items:
                        $ref: "#/components/schemas/FacetFilter"
                    description: A list of filters for the query. An AND is assumed between different facetFilters. For example, owner Sumeet and type Spreadsheet shows documents that are by Sumeet AND are Spreadsheets.
                facetFilterSets:
                    type: array
                    items:
                        $ref: "#/components/schemas/FacetFilterSet"
                    description: A list of facet filter sets that will be OR'ed together. SearchRequestOptions where both facetFilterSets and facetFilters set are considered as bad request. Callers should set only one of these fields.
                facetBucketFilter:
                    $ref: "#/components/schemas/FacetBucketFilter"
                facetBucketSize:
                    type: integer
                    description: The maximum number of FacetBuckets to return in each FacetResult.
                defaultFacets:
                    type: array
                    items:
                        type: string
                    description: Facets for which FacetResults should be fetched and that don't apply to a particular datasource. If specified, these values will replace the standard default facets (last_updated_at, from, etc.). The requested facets will be returned alongside datasource-specific facets if searching a single datasource.
                authTokens:
                    type: array
                    description: Auth tokens which may be used for non-indexed, federated results (e.g. Gmail).
                    items:
                        $ref: "#/components/schemas/AuthToken"
                fetchAllDatasourceCounts:
                    type: boolean
                    description: Hints that the QE should return result counts (via the datasource facet result) for all supported datasources, rather than just those specified in the datasource[s]Filter
                responseHints:
                    type: array
                    description: Array of hints containing which fields should be populated in the response.
                    items:
                        type: string
                        description: Hints for the response content.
                        x-enumDescriptions:
                            ALL_RESULT_COUNTS: Return result counts for each result set which has non-zero results, even when the request itself is limited to a subset.
                            FACET_RESULTS: Return only facet results.
                            QUERY_METADATA: Returns result counts for each result set which has non-zero results, as well as other information about the search such as suggested spelling corrections.
                            RESULTS: Return search result documents.
                            SPELLCHECK_METADATA: Return metadata pertaining to spellcheck results.
                        enum:
                            - ALL_RESULT_COUNTS
                            - FACET_RESULTS
                            - QUERY_METADATA
                            - RESULTS
                            - SPELLCHECK_METADATA
                timezoneOffset:
                    type: integer
                    description: The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
                disableSpellcheck:
                    type: boolean
                    description: Whether or not to disable spellcheck.
                disableQueryAutocorrect:
                    type: boolean
                    description: Disables automatic adjustment of the input query for spelling corrections or other reasons.
                returnLlmContentOverSnippets:
                    type: boolean
                    description: "[beta] Enables expanded content to be returned for LLM usage. The size of content per result returned should be modified using maxSnippetSize. Server may return less or more than what is specified in maxSnippetSize. For more details, https://docs.google.com/document/d/1CTOLSxWWT9WDEnHVLoCUaxbGYyXYP8kctPRF-RluSQY/edit. Requires sufficient permissions."
                inclusions:
                    $ref: "#/components/schemas/RestrictionFilters"
                    description: A list of filters which restrict the search results to only the specified content.
                exclusions:
                    $ref: "#/components/schemas/RestrictionFilters"
                    description: A list of filters specifying content to avoid getting search results from. Exclusions take precendence over inclusions and other query parameters, such as search operators and search facets.
            example:
                datasourceFilter: JIRA
                datasourcesFilter:
                    - JIRA
                queryOverridesFacetFilters: true
                facetFilters:
                    - fieldName: fieldName
                      values:
                        - fieldValues
                        - fieldValues
                    - fieldName: fieldName
                      values:
                        - fieldValues
                        - fieldValues
        TextRange:
            required:
                - startIndex
            description: A subsection of a given string to which some special formatting should be applied.
            properties:
                startIndex:
                    type: integer
                    description: The inclusive start index of the range.
                endIndex:
                    type: integer
                    description: The exclusive end index of the range.
                type:
                    type: string
                    enum:
                        - BOLD
                        - CITATION
                        - LINK
                url:
                    type: string
                    description: The URL associated with the range, if applicable. For example, the linked URL for a LINK range.
                document:
                    $ref: "#/components/schemas/Document"
                    description: A document corresponding to the range, if applicable. For example, the cited document for a CITATION range.
        SearchRequestInputDetails:
            properties:
                hasCopyPaste:
                    type: boolean
                    description: Whether the associated query was at least partially copy-pasted.  If subsequent requests are issued after a copy-pasted query is constructed (e.g. with facet modifications), this bit should continue to be set for those requests.
            example:
                hasCopyPaste: true
        QuerySuggestion:
            required:
                - query
            properties:
                missingTerm:
                    type: string
                    description: A query term missing from the original query on which this suggestion is based.
                query:
                    type: string
                    description: The query being suggested (e.g. enforcing the missing term from the original query).
                searchProviderInfo:
                    $ref: "#/components/schemas/SearchProviderInfo"
                    description: Information about the search provider that generated this suggestion.
                label:
                    type: string
                    description: A user-facing description to display for the suggestion.
                datasource:
                    type: string
                    description: The datasource associated with the suggestion.
                requestOptions:
                    $ref: "#/components/schemas/SearchRequestOptions"
                ranges:
                    type: array
                    items:
                        $ref: "#/components/schemas/TextRange"
                    description: The bolded ranges within the query of the QuerySuggestion.
                inputDetails:
                    $ref: "#/components/schemas/SearchRequestInputDetails"
            example:
                query: app:github type:pull author:mortimer
                label: Mortimer's PRs
                datasource: github
        Person:
            required:
                - name
                - obfuscatedId
            properties:
                name:
                    type: string
                    description: The display name.
                obfuscatedId:
                    type: string
                    description: An opaque identifier that can be used to request metadata for a Person.
                relatedDocuments:
                    type: array
                    items:
                        $ref: "#/components/schemas/RelatedDocuments"
                    description: A list of documents related to this person.
                metadata:
                    $ref: "#/components/schemas/PersonMetadata"
            example:
                name: George Clooney
                obfuscatedId: abc123
        Company:
            required:
                - name
            properties:
                name:
                    type: string
                    description: User-friendly display name.
                profileUrl:
                    type: string
                    description: Link to internal company company profile.
                websiteUrls:
                    type: array
                    description: Link to company's associated websites.
                    items:
                        type: string
                logoUrl:
                    type: string
                    description: The URL of the company's logo. Public, Glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
                location:
                    type: string
                    description: User facing string representing the company's location.
                    example: New York City
                phone:
                    type: string
                    description: Phone number as a number string.
                fax:
                    type: string
                    description: Fax number as a number string.
                industry:
                    type: string
                    description: User facing string representing the company's industry.
                    example: Finances
                annualRevenue:
                    type: number
                    format: double
                    description: Average company's annual revenue for reference.
                numberOfEmployees:
                    type: integer
                    format: int64
                    description: Average company's number of employees for reference.
                stockSymbol:
                    type: string
                    description: Company's stock symbol if company is public.
                foundedDate:
                    type: string
                    format: date
                    description: The date when the company was founded.
                about:
                    type: string
                    description: User facing description of company.
                    example: Financial, software, data, and media company headquartered in Midtown Manhattan, New York City
        DocumentCounts:
            type: object
            description: A map of {string, int} pairs representing counts of each document type associated with this customer.
            additionalProperties:
                type: integer
        CustomDataValue:
            properties:
                displayLabel:
                    type: string
                stringValue:
                    type: string
                stringListValue:
                    type: array
                    description: list of strings for multi-value properties
                    items:
                        type: string
                numberValue:
                    type: number
                booleanValue:
                    type: boolean
        CustomData:
            type: object
            description: Custom fields specific to individual datasources
            additionalProperties:
                $ref: "#/components/schemas/CustomDataValue"
        CustomerMetadata:
            properties:
                datasourceId:
                    type: string
                    description: The user visible id of the salesforce customer account.
                customData:
                    $ref: "#/components/schemas/CustomData"
        Customer:
            required:
                - id
                - company
            properties:
                id:
                    type: string
                    description: Unique identifier.
                domains:
                    type: array
                    description: Link to company's associated website domains.
                    items:
                        type: string
                company:
                    $ref: "#/components/schemas/Company"
                documentCounts:
                    $ref: "#/components/schemas/DocumentCounts"
                poc:
                    type: array
                    description: A list of POC for company.
                    items:
                        $ref: "#/components/schemas/Person"
                metadata:
                    $ref: "#/components/schemas/CustomerMetadata"
                mergedCustomers:
                    type: array
                    description: A list of Customers.
                    items:
                        $ref: "#/components/schemas/Customer"
                startDate:
                    type: string
                    format: date
                    description: The date when the interaction with customer started.
                contractAnnualRevenue:
                    type: number
                    format: double
                    description: Average contract annual revenue with that customer.
                notes:
                    type: string
                    description: User facing (potentially generated) notes about company.
                    example: CIO is interested in trying out the product.
        RelatedObject:
            required:
                - id
            properties:
                id:
                    type: string
                    description: The ID of the related object
                metadata:
                    type: object
                    description: Some metadata of the object which can be displayed, while not having the actual object.
                    properties:
                        name:
                            type: string
                            description: Placeholder name of the object, not the relationship.
        RelatedObjectEdge:
            properties:
                objects:
                    type: array
                    items:
                        $ref: "#/components/schemas/RelatedObject"
        RelatedObjects:
            properties:
                relatedObjects:
                    type: object
                    description: A list of objects related to a source object.
                    additionalProperties:
                        $ref: "#/components/schemas/RelatedObjectEdge"
        ScopeType:
            type: string
            description: Describes the scope for a ReadPermission, WritePermission, or GrantPermission object
            enum:
                - GLOBAL
                - OWN
        WritePermission:
            description: Describes the write permissions levels that a user has for a specific feature
            properties:
                scopeType:
                    $ref: "#/components/schemas/ScopeType"
                create:
                    type: boolean
                    description: True if user has create permission for this feature and scope
                update:
                    type: boolean
                    description: True if user has update permission for this feature and scope
                delete:
                    type: boolean
                    description: True if user has delete permission for this feature and scope
        ObjectPermissions:
            properties:
                write:
                    $ref: "#/components/schemas/WritePermission"
        PermissionedObject:
            properties:
                permissions:
                    $ref: "#/components/schemas/ObjectPermissions"
                    description: The permissions the current viewer has with respect to a particular object.
        PersonToTeamRelationship:
            required:
                - person
            type: object
            description: Metadata about the relationship of a person to a team.
            properties:
                person:
                    $ref: "#/components/schemas/Person"
                relationship:
                    type: string
                    description: The team member's relationship to the team. This defaults to MEMBER if not set.
                    default: MEMBER
                    enum:
                        - MEMBER
                        - MANAGER
                        - LEAD
                        - POINT_OF_CONTACT
                        - OTHER
                customRelationshipStr:
                    type: string
                    description: Displayed name for the relationship if relationship is set to `OTHER`.
                joinDate:
                    type: string
                    format: date-time
                    description: The team member's start date
        TeamEmail:
            type: object
            description: Information about a team's email
            properties:
                email:
                    type: string
                    format: email
                    description: An email address
                type:
                    type: string
                    description: An enum of `PRIMARY`, `SECONDARY`, `ONCALL`, `OTHER`
                    default: OTHER
            required:
                - email
                - type
        CustomFieldValueStr:
            properties:
                strText:
                    type: string
                    description: Text field for string value.
        CustomFieldValueHyperlink:
            properties:
                urlAnchor:
                    type: string
                    description: Anchor text for hyperlink.
                urlLink:
                    type: string
                    description: Link for this URL.
        CustomFieldValuePerson:
            properties:
                person:
                    $ref: "#/components/schemas/Person"
        CustomFieldValue:
            oneOf:
                - $ref: "#/components/schemas/CustomFieldValueStr"
                - $ref: "#/components/schemas/CustomFieldValueHyperlink"
                - $ref: "#/components/schemas/CustomFieldValuePerson"
        CustomFieldData:
            required:
                - label
                - values
                - displayable
            properties:
                label:
                    type: string
                    description: A user-facing label for this field.
                values:
                    type: array
                    items:
                        $ref: "#/components/schemas/CustomFieldValue"
                displayable:
                    type: boolean
                    description: Determines whether the client should display this custom field
                    default: true
        DatasourceProfile:
            required:
                - datasource
                - handle
            properties:
                datasource:
                    type: string
                    example: github
                    description: The datasource the profile is of.
                handle:
                    type: string
                    description: The display name of the entity in the given datasource.
                url:
                    type: string
                    description: URL to view the entity's profile.
                nativeAppUrl:
                    type: string
                    description: A deep link, if available, into the datasource's native application for the entity's platform (i.e. slack://...).
                isUserGenerated:
                    type: boolean
                    description: For internal use only. True iff the data source profile was manually added by a user from within Glean (aka not from the original data source)
        Team:
            allOf:
                - $ref: "#/components/schemas/RelatedObjects"
                - $ref: "#/components/schemas/PermissionedObject"
                - type: object
                  required:
                    - id
                    - name
                  properties:
                    id:
                        type: string
                        description: Unique identifier
                    name:
                        type: string
                        description: Team name
                    description:
                        type: string
                        description: A description of the team
                    businessUnit:
                        type: string
                        description: Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
                    department:
                        type: string
                        description: An organizational unit where everyone has a similar task, e.g. `Engineering`.
                    photoUrl:
                        type: string
                        format: url
                        description: A link to the team's photo.
                    bannerUrl:
                        type: string
                        format: url
                        description: A link to the team's banner photo.
                    externalLink:
                        type: string
                        format: uri
                        description: Link to a team page on the internet or your company's intranet
                    members:
                        type: array
                        description: The members on this team
                        items:
                            $ref: "#/components/schemas/PersonToTeamRelationship"
                    memberCount:
                        type: integer
                        description: Number of members on this team (recursive; includes all individuals that belong to this team, and all individuals that belong to a subteam within this team)
                    emails:
                        type: array
                        description: The emails for this team
                        items:
                            $ref: "#/components/schemas/TeamEmail"
                    customFields:
                        type: array
                        description: Customizable fields for additional team information.
                        items:
                            $ref: "#/components/schemas/CustomFieldData"
                    datasourceProfiles:
                        type: array
                        description: The datasource profiles of the team
                        items:
                            $ref: "#/components/schemas/DatasourceProfile"
                    datasource:
                        type: string
                        description: the data source of the team, e.g. GDRIVE
                    createdFrom:
                        type: string
                        description: For teams created from docs, the doc title. Otherwise empty.
                    lastUpdatedAt:
                        type: string
                        format: date-time
                        description: when this team was last updated.
                    status:
                        type: string
                        description: whether this team is fully processed or there are still unprocessed operations that'll affect it
                        default: PROCESSED
                        enum:
                            - PROCESSED
                            - QUEUED_FOR_CREATION
                            - QUEUED_FOR_DELETION
                    canBeDeleted:
                        type: boolean
                        description: can this team be deleted. Some manually ingested teams like GCS_CSV or PUSH_API cannot
                        default: true
                    loggingId:
                        type: string
                        description: The logging id of the team used in scrubbed logs, client analytics, and metrics.
        CustomEntityMetadata:
            properties:
                customData:
                    $ref: "#/components/schemas/CustomData"
        GroupType:
            type: string
            description: The type of user group
            enum:
                - DEPARTMENT
                - ALL
                - TEAM
                - JOB_TITLE
                - ROLE_TYPE
                - LOCATION
                - REGION
                - EXTERNAL_GROUP
        Group:
            required:
                - type
                - id
            properties:
                type:
                    $ref: "#/components/schemas/GroupType"
                id:
                    type: string
                    description: A unique identifier for the group. May be the same as name.
                name:
                    type: string
                    description: Name of the group.
        UserRole:
            type: string
            description: A user's role with respect to a specific document.
            enum:
                - OWNER
                - VIEWER
                - ANSWER_MODERATOR
                - EDITOR
                - VERIFIER
        UserRoleSpecification:
            required:
                - role
            properties:
                sourceDocumentSpec:
                    $ref: "#/components/schemas/DocumentSpec"
                    description: The document spec of the object this role originates from. The object this role is included with will usually have the same information as this document spec, but if the role is inherited, then the document spec refers to the parent document that the role came from.
                person:
                    $ref: "#/components/schemas/Person"
                group:
                    $ref: "#/components/schemas/Group"
                role:
                    $ref: "#/components/schemas/UserRole"
        CustomEntity:
            allOf:
                - $ref: "#/components/schemas/PermissionedObject"
                - type: object
                  properties:
                    id:
                        type: string
                        description: Unique identifier.
                    title:
                        type: string
                        description: Title or name of the custom entity.
                    datasource:
                        type: string
                        description: The datasource the custom entity is from.
                    objectType:
                        type: string
                        description: The type of the entity. Interpretation is specific to each datasource
                    metadata:
                        $ref: "#/components/schemas/CustomEntityMetadata"
                    roles:
                        type: array
                        description: A list of user roles for the custom entity explicitly granted by the owner.
                        items:
                            $ref: "#/components/schemas/UserRoleSpecification"
        AnswerId:
            properties:
                id:
                    type: integer
                    description: The opaque ID of the Answer.
                    example: 3
        AnswerDocId:
            properties:
                docId:
                    type: string
                    description: Glean Document ID of the Answer. The Glean Document ID is supported for cases where the Answer ID isn't available. If both are available, using the Answer ID is preferred.
                    example: ANSWERS_answer_3
        AnswerMutableProperties:
            properties:
                question:
                    type: string
                    example: Why is the sky blue?
                questionVariations:
                    type: array
                    description: Additional ways of phrasing this question.
                    items:
                        type: string
                bodyText:
                    type: string
                    description: The plain text answer to the question.
                    example: From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light.
                boardId:
                    type: integer
                    description: The parent board ID of this Answer, or 0 if it's a floating Answer.
                audienceFilters:
                    type: array
                    description: Filters which restrict who should see the answer. Values are taken from the corresponding filters in people search.
                    items:
                        $ref: "#/components/schemas/FacetFilter"
                addedRoles:
                    type: array
                    description: A list of user roles for the answer added by the owner.
                    items:
                        $ref: "#/components/schemas/UserRoleSpecification"
                removedRoles:
                    type: array
                    description: A list of user roles for the answer removed by the owner.
                    items:
                        $ref: "#/components/schemas/UserRoleSpecification"
                roles:
                    type: array
                    description: A list of roles for this answer explicitly granted by an owner, editor, or admin.
                    items:
                        $ref: "#/components/schemas/UserRoleSpecification"
                sourceDocumentSpec:
                    $ref: "#/components/schemas/DocumentSpec"
                sourceType:
                    type: string
                    enum:
                        - DOCUMENT
                        - ASSISTANT
        StructuredText:
            allOf:
                - $ref: "#/components/schemas/StructuredTextMutableProperties"
                - type: object
                  properties:
                    structuredList:
                        type: array
                        items:
                            $ref: "#/components/schemas/StructuredTextItem"
                        description: An array of objects each of which contains either a string or a link which optionally corresponds to a document.
        AnswerLike:
            properties:
                user:
                    $ref: "#/components/schemas/Person"
                createTime:
                    type: string
                    format: date-time
                    description: The time the user liked the answer in ISO format (ISO 8601).
        AnswerLikes:
            required:
                - likedBy
                - likedByUser
                - numLikes
            properties:
                likedBy:
                    type: array
                    items:
                        $ref: "#/components/schemas/AnswerLike"
                likedByUser:
                    type: boolean
                    description: Whether the user in context liked the answer.
                numLikes:
                    type: integer
                    description: The total number of likes for the answer.
        Reminder:
            required:
                - assignee
                - remindAt
            properties:
                assignee:
                    $ref: "#/components/schemas/Person"
                requestor:
                    $ref: "#/components/schemas/Person"
                remindAt:
                    type: integer
                    description: Unix timestamp for when the reminder should trigger (in seconds since epoch UTC).
                createdAt:
                    type: integer
                    description: Unix timestamp for when the reminder was first created (in seconds since epoch UTC).
                reason:
                    type: string
                    description: An optional free-text reason for the reminder. This is particularly useful when a reminder is used to ask for verification from another user (for example, "Duplicate", "Incomplete", "Incorrect").
        TimePoint:
            properties:
                epochSeconds:
                    type: integer
                    description: Epoch seconds. Has precedence over daysFromNow.
                daysFromNow:
                    type: integer
                    description: The number of days from now. Specification relative to current time. Can be negative.
        Period:
            properties:
                minDaysFromNow:
                    type: integer
                    description: DEPRECATED - The number of days from now in the past to define upper boundary of time period.
                    deprecated: true
                maxDaysFromNow:
                    type: integer
                    description: DEPRECATED - The number of days from now in the past to define lower boundary of time period.
                    deprecated: true
                start:
                    $ref: "#/components/schemas/TimePoint"
                end:
                    $ref: "#/components/schemas/TimePoint"
        CountInfo:
            required:
                - count
            properties:
                count:
                    type: integer
                    description: The counter value
                period:
                    $ref: "#/components/schemas/Period"
                org:
                    type: string
                    description: The unit of organization over which we did the count aggregation, e.g. org (department) or company
        VerificationMetadata:
            required:
                - documentId
            properties:
                lastVerifier:
                    $ref: "#/components/schemas/Person"
                lastVerificationTs:
                    type: integer
                    description: The unix timestamp of the verification (in seconds since epoch UTC).
                expirationTs:
                    type: integer
                    description: The unix timestamp of the verification expiration if applicable (in seconds since epoch UTC).
                document:
                    $ref: "#/components/schemas/Document"
                reminders:
                    type: array
                    items:
                        $ref: "#/components/schemas/Reminder"
                    description: Info about all outstanding verification reminders for the document if exists.
                lastReminder:
                    $ref: "#/components/schemas/Reminder"
                visitorCount:
                    type: array
                    items:
                        $ref: "#/components/schemas/CountInfo"
                    description: Number of visitors to the document during included time periods.
                candidateVerifiers:
                    type: array
                    items:
                        $ref: "#/components/schemas/Person"
                    description: List of potential verifiers for the document e.g. old verifiers and/or users with view/edit permissions.
        Verification:
            required:
                - state
            properties:
                state:
                    type: string
                    enum:
                        - UNVERIFIED
                        - VERIFIED
                        - DEPRECATED
                    description: The verification state for the document.
                metadata:
                    $ref: "#/components/schemas/VerificationMetadata"
        CollectionBaseMutableProperties:
            required:
                - name
            properties:
                name:
                    type: string
                    description: The unique name of the Collection.
                description:
                    type: string
                    description: A brief summary of the Collection's contents.
                addedRoles:
                    type: array
                    description: A list of added user roles for the Collection.
                    items:
                        $ref: "#/components/schemas/UserRoleSpecification"
                removedRoles:
                    type: array
                    description: A list of removed user roles for the Collection.
                    items:
                        $ref: "#/components/schemas/UserRoleSpecification"
                audienceFilters:
                    type: array
                    items:
                        $ref: "#/components/schemas/FacetFilter"
                    description: Filters which restrict who should see this Collection. Values are taken from the corresponding filters in people search.
        AnswerBoardMutableProperties:
            allOf:
                - $ref: "#/components/schemas/CollectionBaseMutableProperties"
        AnswerBoard:
            allOf:
                - $ref: "#/components/schemas/AnswerBoardMutableProperties"
                - $ref: "#/components/schemas/PermissionedObject"
                - type: object
                  required:
                    - id
                    - description
                  properties:
                    id:
                        type: integer
                        description: The unique ID of the Answer Board.
                    createTime:
                        type: string
                        format: date-time
                    updateTime:
                        type: string
                        format: date-time
                    creator:
                        $ref: "#/components/schemas/Person"
                    updatedBy:
                        $ref: "#/components/schemas/Person"
                    itemCount:
                        type: integer
                        description: The number of items currently in the Answer Board. Separated from the actual items so we can grab the count without items.
                    roles:
                        type: array
                        description: A list of user roles for the Answer Board.
                        items:
                            $ref: "#/components/schemas/UserRoleSpecification"
        Thumbnail:
            properties:
                photoId:
                    type: string
                    description: Photo id if the thumbnail is from splash.
                url:
                    type: string
                    description: Thumbnail URL. This can be user provided image and/or from downloaded images hosted by Glean.
        CollectionMutableProperties:
            allOf:
                - $ref: "#/components/schemas/CollectionBaseMutableProperties"
                - type: object
                  required:
                    - name
                  properties:
                    icon:
                        type: string
                        description: The emoji icon of this Collection.
                    adminLocked:
                        type: boolean
                        description: Indicates whether edits are allowed for everyone or only admins.
                    parentId:
                        type: integer
                        description: The parent of this Collection, or 0 if it's a top-level Collection.
                    thumbnail:
                        $ref: "#/components/schemas/Thumbnail"
                    allowedDatasource:
                        type: string
                        description: The datasource type this Collection can hold.
        CollectionItemMutableProperties:
            properties:
                name:
                    type: string
                    description: The optional name of the Collection item.
                description:
                    type: string
                    description: A helpful description of why this CollectionItem is in the Collection that it's in.
                icon:
                    type: string
                    description: The emoji icon for this CollectionItem. Only used for Text type items.
        UserGeneratedContentId:
            properties:
                id:
                    type: integer
                    description: The opaque id of the user generated content.
        ShortcutMutableProperties:
            properties:
                inputAlias:
                    type: string
                    description: Link text following go/ prefix as entered by the user.
                destinationUrl:
                    type: string
                    description: Destination URL for the shortcut.
                destinationDocumentId:
                    type: string
                    description: Glean Document ID for the URL, if known.
                description:
                    type: string
                    description: A short, plain text blurb to help people understand the intent of the shortcut.
                unlisted:
                    type: boolean
                    description: Whether this shortcut is unlisted or not. Unlisted shortcuts are visible to author + admins only.
                urlTemplate:
                    type: string
                    description: For variable shortcuts, contains the URL template; note, `destinationUrl` contains default URL.
                addedRoles:
                    type: array
                    description: A list of user roles added for the Shortcut.
                    items:
                        $ref: "#/components/schemas/UserRoleSpecification"
                removedRoles:
                    type: array
                    description: A list of user roles removed for the Shortcut.
                    items:
                        $ref: "#/components/schemas/UserRoleSpecification"
        ShortcutMetadata:
            properties:
                createdBy:
                    $ref: "#/components/schemas/Person"
                createTime:
                    type: string
                    format: date-time
                    description: The time the shortcut was created in ISO format (ISO 8601).
                updatedBy:
                    $ref: "#/components/schemas/Person"
                updateTime:
                    type: string
                    format: date-time
                    description: The time the shortcut was updated in ISO format (ISO 8601).
                destinationDocument:
                    $ref: "#/components/schemas/Document"
                    description: Document that corresponds to the destination URL, if applicable.
                intermediateUrl:
                    type: string
                    description: The URL from which the user is then redirected to the destination URL. Full replacement for https://go/<inputAlias>.
                viewPrefix:
                    type: string
                    description: The part of the shortcut preceding the input alias when used for showing shortcuts to users. Should end with "/". e.g. "go/" for native shortcuts.
                isExternal:
                    type: boolean
                    description: Indicates whether a shortcut is native or external.
                editUrl:
                    type: string
                    description: The URL using which the user can access the edit page of the shortcut.
        Shortcut:
            allOf:
                - $ref: "#/components/schemas/UserGeneratedContentId"
                - $ref: "#/components/schemas/ShortcutMutableProperties"
                - $ref: "#/components/schemas/PermissionedObject"
                - $ref: "#/components/schemas/ShortcutMetadata"
                - type: object
                  required:
                    - inputAlias
                  properties:
                    alias:
                        type: string
                        description: canonical link text following go/ prefix where hyphen/underscore is removed.
                    title:
                        type: string
                        description: Title for the Go Link
                    roles:
                        type: array
                        description: A list of user roles for the Go Link.
                        items:
                            $ref: "#/components/schemas/UserRoleSpecification"
        Collection:
            allOf:
                - $ref: "#/components/schemas/CollectionMutableProperties"
                - $ref: "#/components/schemas/PermissionedObject"
                - type: object
                  required:
                    - id
                    - description
                  properties:
                    id:
                        type: integer
                        description: The unique ID of the Collection.
                    createTime:
                        type: string
                        format: date-time
                    updateTime:
                        type: string
                        format: date-time
                    creator:
                        $ref: "#/components/schemas/Person"
                    updatedBy:
                        $ref: "#/components/schemas/Person"
                    itemCount:
                        type: integer
                        description: The number of items currently in the Collection. Separated from the actual items so we can grab the count without items.
                    childCount:
                        type: integer
                        description: The number of children Collections. Separated from the actual children so we can grab the count without children.
                    items:
                        type: array
                        items:
                            $ref: "#/components/schemas/CollectionItem"
                        description: The items in this Collection.
                    pinMetadata:
                        $ref: "#/components/schemas/CollectionPinnedMetadata"
                        description: Metadata having what categories this Collection is pinned to and the eligible categories to pin to
                    shortcuts:
                        type: array
                        items:
                            type: string
                        description: The names of the shortcuts (Go Links) that point to this Collection.
                    children:
                        type: array
                        items:
                            $ref: "#/components/schemas/Collection"
                        description: The children Collections of this Collection.
                    roles:
                        type: array
                        description: A list of user roles for the Collection.
                        items:
                            $ref: "#/components/schemas/UserRoleSpecification"
        CollectionItem:
            allOf:
                - $ref: "#/components/schemas/CollectionItemMutableProperties"
                - type: object
                  required:
                    - collectionId
                    - itemType
                  properties:
                    collectionId:
                        type: integer
                        description: The Collection ID of the Collection that this CollectionItem belongs in.
                    documentId:
                        type: string
                        description: If this CollectionItem is indexed, the Glean Document ID of that document.
                    url:
                        type: string
                        description: The URL of this CollectionItem.
                    itemId:
                        type: string
                        description: Unique identifier for the item within the Collection it belongs to.
                    createdBy:
                        $ref: "#/components/schemas/Person"
                        description: The person who added this Collection item.
                    createdAt:
                        type: string
                        format: date-time
                        description: Unix timestamp for when the item was first added (in seconds since epoch UTC).
                    document:
                        $ref: "#/components/schemas/Document"
                        description: The Document this CollectionItem corresponds to (omitted if item is a non-indexed URL).
                    shortcut:
                        $ref: "#/components/schemas/Shortcut"
                        description: The Shortcut this CollectionItem corresponds to (only included if item URL is for a Go Link).
                    collection:
                        $ref: "#/components/schemas/Collection"
                        description: The Collection this CollectionItem corresponds to (only included if item type is COLLECTION).
                    itemType:
                        type: string
                        enum:
                            - DOCUMENT
                            - TEXT
                            - URL
                            - COLLECTION
        CollectionPinnableCategories:
            type: string
            description: Categories a Collection can be pinned to.
            enum:
                - COMPANY_RESOURCE
                - DEPARTMENT_RESOURCE
                - TEAM_RESOURCE
        CollectionPinnableTargets:
            type: string
            description: What targets can a Collection be pinned to.
            enum:
                - RESOURCE_CARD
                - TEAM_PROFILE_PAGE
        CollectionPinTarget:
            required:
                - category
            properties:
                category:
                    $ref: "#/components/schemas/CollectionPinnableCategories"
                value:
                    type: string
                    description: Optional. If category supports values, then the additional value for the category e.g. department name for DEPARTMENT_RESOURCE, team name/id for TEAM_RESOURCE and so on.
                target:
                    $ref: "#/components/schemas/CollectionPinnableTargets"
        CollectionPinMetadata:
            required:
                - id
                - target
            properties:
                id:
                    type: integer
                    description: The ID of the Collection.
                target:
                    $ref: "#/components/schemas/CollectionPinTarget"
        CollectionPinnedMetadata:
            required:
                - pinnedCategories
                - eligibleCategoriesForPinning
            properties:
                existingPins:
                    type: array
                    items:
                        $ref: "#/components/schemas/CollectionPinTarget"
                    description: List of targets this Collection is pinned to.
                eligiblePins:
                    type: array
                    items:
                        $ref: "#/components/schemas/CollectionPinMetadata"
                    description: List of targets this Collection can be pinned to, excluding the targets this Collection is already pinned to. We also include Collection ID already is pinned to each eligible target, which will be 0 if the target has no pinned Collection.
        Answer:
            allOf:
                - $ref: "#/components/schemas/AnswerId"
                - $ref: "#/components/schemas/AnswerDocId"
                - $ref: "#/components/schemas/AnswerMutableProperties"
                - $ref: "#/components/schemas/PermissionedObject"
                - type: object
                  required:
                    - id
                  properties:
                    combinedAnswerText:
                        $ref: "#/components/schemas/StructuredText"
                    likes:
                        $ref: "#/components/schemas/AnswerLikes"
                    author:
                        $ref: "#/components/schemas/Person"
                    createTime:
                        type: string
                        format: date-time
                        description: The time the answer was created in ISO format (ISO 8601).
                    updateTime:
                        type: string
                        format: date-time
                        description: The time the answer was last updated in ISO format (ISO 8601).
                    updatedBy:
                        $ref: "#/components/schemas/Person"
                    verification:
                        $ref: "#/components/schemas/Verification"
                    board:
                        $ref: "#/components/schemas/AnswerBoard"
                        description: The parent board this answer is in.
                    collections:
                        type: array
                        description: The collections to which the answer belongs.
                        items:
                            $ref: "#/components/schemas/Collection"
                    documentCategory:
                        type: string
                        description: The document's document_category(.proto).
                    sourceDocument:
                        $ref: "#/components/schemas/Document"
        SearchResult:
            required:
                - url
            allOf:
                - $ref: "#/components/schemas/Result"
                - type: object
                  properties:
                    document:
                        $ref: "#/components/schemas/Document"
                    title:
                        type: string
                    url:
                        type: string
                    nativeAppUrl:
                        type: string
                        description: A deep link, if available, into the datasource's native application for the user's platform (e.g. slack://...).
                    snippets:
                        type: array
                        items:
                            $ref: "#/components/schemas/SearchResultSnippet"
                        description: Text content from the result document which contains search query terms, if available.
                    fullText:
                        type: string
                        description: The full body text of the result if not already contained in the snippets. Only populated for conversation results (e.g. results from a messaging app such as Slack).
                    fullTextList:
                        type: array
                        description: The full body text of the result if not already contained in the snippets; each item in the array represents a separate line in the original text. Only populated for conversation results (e.g. results from a messaging app such as Slack).
                        items:
                            type: string
                    relatedResults:
                        type: array
                        items:
                            $ref: "#/components/schemas/RelatedDocuments"
                        description: A list of results related to this search result. Eg. for conversation results it contains individual messages from the conversation document which will be shown on SERP.
                    clusteredResults:
                        type: array
                        description: A list of results that should be displayed as associated with this result.
                        items:
                            $ref: "#/components/schemas/SearchResult"
                    allClusteredResults:
                        type: array
                        description: A list of results that should be displayed as associated with this result.
                        items:
                            $ref: "#/components/schemas/ClusterGroup"
                    attachmentCount:
                        type: integer
                        description: The total number of attachments.
                    attachments:
                        type: array
                        description: A (potentially partial) list of results representing documents attached to the main result document.
                        items:
                            $ref: "#/components/schemas/SearchResult"
                    backlinkResults:
                        type: array
                        description: A list of results that should be displayed as backlinks of this result in reverse chronological order.
                        items:
                            $ref: "#/components/schemas/SearchResult"
                    clusterType:
                        $ref: "#/components/schemas/ClusterTypeEnum"
                    mustIncludeSuggestions:
                        $ref: "#/components/schemas/QuerySuggestionList"
                    querySuggestion:
                        $ref: "#/components/schemas/QuerySuggestion"
                    prominence:
                        $ref: "#/components/schemas/SearchResultProminenceEnum"
                    attachmentContext:
                        type: string
                        description: Additional context for the relationship between the result and the document it's attached to.
                    pins:
                        type: array
                        description: A list of pins associated with this search result.
                        items:
                            $ref: "#/components/schemas/PinDocument"
            example:
                snippets:
                    - snippet: snippet
                      mimeType: mimeType
                metadata:
                    container: container
                    createTime: "2000-01-23T04:56:07.000Z"
                    datasource: datasource
                    author:
                        name: name
                    documentId: documentId
                    updateTime: "2000-01-23T04:56:07.000Z"
                    mimeType: mimeType
                    objectType: objectType
                title: title
                url: https://example.com/foo/bar
                nativeAppUrl: slack://foo/bar
                mustIncludeSuggestions:
                    - missingTerm: container
                      query: container
        ExtractedQnA:
            properties:
                heading:
                    type: string
                    description: Heading text that was matched to produce this result.
                question:
                    type: string
                    description: Question text that was matched to produce this result.
                questionResult:
                    $ref: "#/components/schemas/SearchResult"
        CalendarAttendee:
            required:
                - person
            properties:
                isOrganizer:
                    type: boolean
                    description: Whether or not this attendee is an organizer.
                isInGroup:
                    type: boolean
                    description: Whether or not this attendee is in a group. Needed temporarily at least to support both flat attendees and tree for compatibility.
                person:
                    $ref: "#/components/schemas/Person"
                groupAttendees:
                    type: array
                    description: If this attendee is a group, represents the list of individual attendees in the group.
                    items:
                        $ref: "#/components/schemas/CalendarAttendee"
                responseStatus:
                    type: string
                    enum:
                        - ACCEPTED
                        - DECLINED
                        - NO_RESPONSE
                        - TENTATIVE
        CalendarAttendees:
            properties:
                people:
                    type: array
                    items:
                        $ref: "#/components/schemas/CalendarAttendee"
                    description: Full details of some of the attendees of this event
                isLimit:
                    type: boolean
                    description: Whether the total count of the people returned is at the retrieval limit.
                total:
                    type: integer
                    description: Total number of attendees in this event.
                numAccepted:
                    type: integer
                    description: Total number of attendees who have accepted this event.
                numDeclined:
                    type: integer
                    description: Total number of attendees who have declined this event.
                numNoResponse:
                    type: integer
                    description: Total number of attendees who have not responded to this event.
                numTentative:
                    type: integer
                    description: Total number of attendees who have responded tentatively (i.e. responded maybe) to this event.
        Meeting:
            properties:
                id:
                    type: string
                title:
                    type: string
                description:
                    type: string
                url:
                    type: string
                startTime:
                    type: string
                    format: date-time
                endTime:
                    type: string
                    format: date-time
                attendees:
                    $ref: "#/components/schemas/CalendarAttendees"
                    description: The attendee list, including their response status
        AppResult:
            required:
                - datasource
            properties:
                datasource:
                    type: string
                    description: The app or other repository type this represents
                docType:
                    type: string
                    description: The datasource-specific type of the document (e.g. for Jira issues, this is the issue type such as Bug or Feature Request).
                mimeType:
                    type: string
                    description: Mimetype is used to differentiate between sub applications from a datasource (e.g. Sheets, Docs from Gdrive)
                iconUrl:
                    type: string
                    description: If there is available icon URL.
        CodeLine:
            properties:
                lineNumber:
                    type: integer
                content:
                    type: string
                ranges:
                    type: array
                    items:
                        $ref: "#/components/schemas/TextRange"
                    description: Index ranges depicting matched sections of the line
        Code:
            properties:
                repoName:
                    type: string
                fileName:
                    type: string
                fileUrl:
                    type: string
                lines:
                    type: array
                    items:
                        $ref: "#/components/schemas/CodeLine"
                isLastMatch:
                    type: boolean
                    description: Last file match for a repo
            example:
                repoName: scio
                fileName: README.md
                matches:
                    - lineNumber: 1
                      content: Welcome to the beginning
                      ranges: []
                    - lineNumber: 2
                      content: Second line of the file
                      ranges: []
                    - lineNumber: 3
                      content: hello world hello world
                      ranges:
                        - startindex: 0
                          endIndex: 5
                        - startIndex: 12
                          endIndex: 17
        QuerySuggestionList:
            properties:
                suggestions:
                    type: array
                    items:
                        $ref: "#/components/schemas/QuerySuggestion"
                person:
                    $ref: "#/components/schemas/Person"
        RelatedDocuments:
            properties:
                relation:
                    type: string
                    description: How this document relates to the including entity.
                    enum:
                        - ATTACHMENT
                        - CANONICAL
                        - CASE
                        - CONTACT
                        - CONVERSATION_MESSAGES
                        - EXPERT
                        - FROM
                        - HIGHLIGHT
                        - OPPORTUNITY
                        - RECENT
                        - SOURCE
                        - TICKET
                        - TRANSCRIPT
                        - WITH
                    x-enumDescriptions:
                        CANONICAL: Canonical documents for the entity, such as overview docs, architecture docs elastic.
                associatedEntityId:
                    type: string
                    description: Which entity in the response that this entity relates to. Relevant when there are multiple entities associated with the response (such as merged customers)
                querySuggestion:
                    $ref: "#/components/schemas/QuerySuggestion"
                documents:
                    type: array
                    items:
                        $ref: "#/components/schemas/Document"
                    description: A truncated list of documents with this relation. TO BE DEPRECATED.
                    deprecated: true
                results:
                    type: array
                    items:
                        $ref: "#/components/schemas/SearchResult"
                    description: A truncated list of documents associated with this relation. To be used in favor of `documents` because it contains a trackingToken.
        RelatedQuestion:
            properties:
                question:
                    type: string
                    description: The text of the related question
                answer:
                    type: string
                    description: The answer for the related question
                ranges:
                    type: array
                    items:
                        $ref: "#/components/schemas/TextRange"
                    description: Subsections of the answer string to which some special formatting should be applied (eg. bold)
        EntityType:
            type: string
            description: The type of entity.
            x-include-enum-class-prefix: true
            enum:
                - PERSON
                - PROJECT
                - CUSTOMER
        Disambiguation:
            type: object
            description: A disambiguation between multiple entities with the same name
            properties:
                name:
                    type: string
                    description: Name of the ambiguous entity
                id:
                    type: string
                    description: The unique id of the entity in the knowledge graph
                type:
                    $ref: "#/components/schemas/EntityType"
        SearchResultSnippet:
            required:
                - snippet
            properties:
                snippet:
                    type: string
                    description: A matching snippet from the document. Query term matches are marked by the unicode characters uE006 and uE007.
                mimeType:
                    type: string
                    description: The mime type of the snippets, currently either text/plain or text/html.
                text:
                    type: string
                    description: A matching snippet from the document with no highlights.
                snippetTextOrdering:
                    type: integer
                    description: Used for sorting based off the snippet's location within all_snippetable_text
                ranges:
                    type: array
                    items:
                        $ref: "#/components/schemas/TextRange"
                    description: The bolded ranges within text.
                url:
                    type: string
                    description: A URL, generated based on availability, that links to the position of the snippet text or to the nearest header above the snippet text.
            example:
                snippet: snippet
                mimeType: mimeType
        StructuredResult:
            description: A single object that can support any object in the work graph. Only a single object will be populated.
            properties:
                document:
                    $ref: "#/components/schemas/Document"
                person:
                    $ref: "#/components/schemas/Person"
                customer:
                    $ref: "#/components/schemas/Customer"
                team:
                    $ref: "#/components/schemas/Team"
                customEntity:
                    $ref: "#/components/schemas/CustomEntity"
                answer:
                    $ref: "#/components/schemas/Answer"
                extractedQnA:
                    $ref: "#/components/schemas/ExtractedQnA"
                meeting:
                    $ref: "#/components/schemas/Meeting"
                app:
                    $ref: "#/components/schemas/AppResult"
                collection:
                    $ref: "#/components/schemas/Collection"
                answerBoard:
                    $ref: "#/components/schemas/AnswerBoard"
                code:
                    $ref: "#/components/schemas/Code"
                shortcut:
                    $ref: "#/components/schemas/Shortcut"
                querySuggestions:
                    $ref: "#/components/schemas/QuerySuggestionList"
                relatedDocuments:
                    type: array
                    items:
                        $ref: "#/components/schemas/RelatedDocuments"
                    description: A list of documents related to this structured result.
                relatedQuestion:
                    $ref: "#/components/schemas/RelatedQuestion"
                disambiguation:
                    $ref: "#/components/schemas/Disambiguation"
                snippets:
                    description: Any snippets associated to the populated object.
                    type: array
                    items:
                        $ref: "#/components/schemas/SearchResultSnippet"
                trackingToken:
                    type: string
                    description: An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
                prominence:
                    type: string
                    description: The level of visual distinction that should be given to a result.
                    x-enumDescriptions:
                        HERO: A high-confidence result that should feature prominently on the page.
                        PROMOTED: May not be the best result but should be given additional visual distinction.
                        STANDARD: Should not be distinct from any other results.
                    enum:
                        - HERO
                        - PROMOTED
                        - STANDARD
                source:
                    type: string
                    description: Source context for this result. Possible values depend on the result type.
                    enum:
                        - EXPERT_DETECTION
                        - ENTITY_NLQ
        Result:
            properties:
                structuredResults:
                    type: array
                    description: An array of entities in the work graph retrieved via a data request.
                    items:
                        $ref: "#/components/schemas/StructuredResult"
                trackingToken:
                    type: string
                    description: An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
        ClusterTypeEnum:
            type: string
            description: The reason for inclusion of clusteredResults.
            enum:
                - SIMILAR
                - FRESHNESS
                - TITLE
                - CONTENT
                - NONE
                - THREAD_REPLY
                - THREAD_ROOT
                - PREFIX
                - SUFFIX
        ClusterGroup:
            required:
                - visibleCountHint
            properties:
                clusteredResults:
                    type: array
                    description: A list of results that should be displayed as associated with this result.
                    items:
                        $ref: "#/components/schemas/SearchResult"
                clusterType:
                    $ref: "#/components/schemas/ClusterTypeEnum"
                visibleCountHint:
                    type: integer
                    description: The default number of results to display before truncating and showing a "see more" link
        SearchResultProminenceEnum:
            type: string
            description: |
                The level of visual distinction that should be given to a result.
            x-enumDescriptions:
                HERO: A high-confidence result that should feature prominently on the page.
                PROMOTED: May not be the best result but should be given additional visual distinction.
                STANDARD: Should not be distinct from any other results.
            enum:
                - HERO
                - PROMOTED
                - STANDARD
        PinDocumentMutableProperties:
            properties:
                queries:
                    type: array
                    description: The query strings for which the pinned result will show.
                    items:
                        type: string
                audienceFilters:
                    type: array
                    description: Filters which restrict who should see the pinned document. Values are taken from the corresponding filters in people search.
                    items:
                        $ref: "#/components/schemas/FacetFilter"
        PinDocument:
            allOf:
                - $ref: "#/components/schemas/PinDocumentMutableProperties"
                - type: object
                  required:
                    - documentId
                  properties:
                    id:
                        type: string
                        description: The opaque id of the pin.
                    documentId:
                        type: string
                        description: The document which should be a pinned result.
                    audienceFilters:
                        type: array
                        description: Filters which restrict who should see the pinned document. Values are taken from the corresponding filters in people search.
                        items:
                            $ref: "#/components/schemas/FacetFilter"
                    attribution:
                        $ref: "#/components/schemas/Person"
                    updatedBy:
                        $ref: "#/components/schemas/Person"
                    createTime:
                        type: string
                        format: date-time
                    updateTime:
                        type: string
                        format: date-time
        PersonTeam:
            description: Use `id` if you index teams via Glean, and use `name` and `externalLink` if you want to use your own team pages
            properties:
                id:
                    type: string
                    description: Unique identifier
                name:
                    type: string
                    description: Team name
                externalLink:
                    type: string
                    format: uri
                    description: Link to a team page on the internet or your company's intranet
                relationship:
                    type: string
                    description: The team member's relationship to the team. This defaults to MEMBER if not set.
                    default: MEMBER
                    enum:
                        - MEMBER
                        - MANAGER
                        - LEAD
                        - POINT_OF_CONTACT
                        - OTHER
                joinDate:
                    type: string
                    format: date-time
                    description: The team member's start date
        StructuredLocation:
            type: object
            description: Detailed location with information about country, state, city etc.
            properties:
                deskLocation:
                    type: string
                    description: Desk number.
                timezone:
                    type: string
                    description: Location's timezone, e.g. UTC, PST.
                address:
                    type: string
                    description: Office address or name.
                city:
                    type: string
                    description: Name of the city.
                state:
                    type: string
                    description: State code.
                region:
                    type: string
                    description: Region information, e.g. NORAM, APAC.
                zipCode:
                    type: string
                    description: ZIP Code for the address.
                country:
                    type: string
                    description: Country name.
                countryCode:
                    type: string
                    description: Alpha-2 or Alpha-3 ISO 3166 country code, e.g. US or USA.
        SocialNetwork:
            required:
                - name
                - profileUrl
            properties:
                name:
                    type: string
                    description: Possible values are "twitter", "linkedin".
                profileName:
                    type: string
                    description: Human-readable profile name.
                profileUrl:
                    type: string
                    format: url
                    description: Link to profile.
        PersonDistance:
            required:
                - name
                - obfuscatedId
                - distance
            properties:
                name:
                    type: string
                    description: The display name.
                obfuscatedId:
                    type: string
                    description: An opaque identifier that can be used to request metadata for a Person.
                distance:
                    type: number
                    format: float
                    description: Distance to person, refer to PeopleDistance pipeline on interpretation of the value.
        CommunicationChannel:
            type: string
            enum:
                - COMMUNICATION_CHANNEL_EMAIL
                - COMMUNICATION_CHANNEL_SLACK
        ChannelInviteInfo:
            description: Information regarding the invite status of a person for a particular channel.
            properties:
                channel:
                    description: Channel through which the invite was sent
                    $ref: "#/components/schemas/CommunicationChannel"
                isAutoInvite:
                    description: Bit that tracks if this invite was automatically sent or user-sent
                    type: boolean
                inviter:
                    description: The person that invited this person.
                    $ref: "#/components/schemas/Person"
                inviteTime:
                    type: string
                    format: date-time
                    description: The time this person was invited in ISO format (ISO 8601).
                reminderTime:
                    type: string
                    format: date-time
                    description: The time this person was reminded in ISO format (ISO 8601) if a reminder was sent.
        InviteInfo:
            description: Information regarding the invite status of a person.
            properties:
                signUpTime:
                    type: string
                    format: date-time
                    description: The time this person signed up in ISO format (ISO 8601).
                invites:
                    type: array
                    items:
                        $ref: "#/components/schemas/ChannelInviteInfo"
                    description: Latest invites received by the user for each channel
                inviter:
                    deprecated: true
                    description: The person that invited this person.
                    $ref: "#/components/schemas/Person"
                inviteTime:
                    deprecated: true
                    type: string
                    format: date-time
                    description: The time this person was invited in ISO format (ISO 8601).
                reminderTime:
                    deprecated: true
                    type: string
                    format: date-time
                    description: The time this person was reminded in ISO format (ISO 8601) if a reminder was sent.
        ReadPermission:
            description: Describes the read permission level that a user has for a specific feature
            properties:
                scopeType:
                    $ref: "#/components/schemas/ScopeType"
        ReadPermissions:
            description: Describes the read permission levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject
            additionalProperties:
                type: array
                description: List of read permissions (for different scopes but same feature)
                items:
                    $ref: "#/components/schemas/ReadPermission"
        WritePermissions:
            description: Describes the write permissions levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject
            additionalProperties:
                type: array
                description: List of write permissions (for different scopes but same feature)
                items:
                    $ref: "#/components/schemas/WritePermission"
        GrantPermission:
            description: Describes the grant permission level that a user has for a specific feature
            properties:
                scopeType:
                    $ref: "#/components/schemas/ScopeType"
        GrantPermissions:
            description: Describes the grant permission levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject
            additionalProperties:
                type: array
                description: List of grant permissions (for different scopes but same feature)
                items:
                    $ref: "#/components/schemas/GrantPermission"
        Permissions:
            description: |-
                Describes the permissions levels that a user has for permissioned features. When the client sends this, Permissions.read and Permissions.write are the additional permissions granted to a user on top of what they have via their roles.
                When the server sends this, Permissions.read and Permissions.write are the complete (merged) set of permissions the user has, and Permissions.roles is just for display purposes.
            properties:
                canAdminSearch:
                    type: boolean
                    description: TODO--deprecate in favor of the read and write properties. True if the user has access to /adminsearch
                canAdminClientApiGlobalTokens:
                    type: boolean
                    description: TODO--deprecate in favor of the read and write properties. True if the user can administrate client API tokens with global scope
                canDlp:
                    type: boolean
                    description: TODO--deprecate in favor of the read and write properties. True if the user has access to data loss prevention (DLP) features
                read:
                    $ref: "#/components/schemas/ReadPermissions"
                write:
                    $ref: "#/components/schemas/WritePermissions"
                grant:
                    $ref: "#/components/schemas/GrantPermissions"
                role:
                    type: string
                    description: The roleId of the canonical role a user has. The displayName is equal to the roleId.
                roles:
                    type: array
                    description: The roleIds of the roles a user has.
                    items:
                        type: string
        TimeInterval:
            required:
                - start
                - end
            properties:
                start:
                    type: string
                    description: The RFC3339 timestamp formatted start time of this event.
                end:
                    type: string
                    description: The RFC3339 timestamp formatted end time of this event.
        AnonymousEvent:
            description: A generic, light-weight calendar event.
            type: object
            properties:
                time:
                    $ref: "#/components/schemas/TimeInterval"
                eventType:
                    description: The nature of the event, for example "out of office".
                    type: string
                    enum:
                        - DEFAULT
                        - OUT_OF_OFFICE
        IconConfig:
            description: Defines how to render an icon
            properties:
                generatedBackgroundColorKey:
                    type: string
                backgroundColor:
                    type: string
                color:
                    type: string
                key:
                    type: string
                iconType:
                    enum:
                        - COLLECTION
                        - CUSTOM
                        - DATASOURCE
                        - DATASOURCE_INSTANCE
                        - FAVICON
                        - FILE_TYPE
                        - GENERATED_BACKGROUND
                        - GLYPH
                        - MIME_TYPE
                        - NO_ICON
                        - PERSON
                        - REACTIONS
                        - URL
                masked:
                    type: boolean
                    description: Whether the icon should be masked based on current theme.
                name:
                    type: string
                    description: The name of the icon if applicable, e.g. the glyph name for `IconType.GLYPH` icons.
                url:
                    type: string
                    description: The URL to an image to be displayed if applicable, e.g. the URL for `iconType.URL` icons.
            example:
                color: "#343CED"
                key: person_icon
                iconType: GLYPH
                name: user
        Badge:
            type: object
            description: Displays a user's accomplishment or milestone
            properties:
                key:
                    type: string
                    description: An auto generated unique identifier.
                displayName:
                    type: string
                    description: The badge name displayed to users
                iconConfig:
                    $ref: "#/components/schemas/IconConfig"
                pinned:
                    type: boolean
                    description: The badge should be shown on the PersonAttribution
            example:
                key: deployment_name_new_hire
                displayName: New hire
                iconConfig:
                    color: "#343CED"
                    key: person_icon
                    iconType: GLYPH
                    name: user
        PersonMetadata:
            properties:
                type:
                    type: string
                    x-enumDescriptions:
                        FULL_TIME: The person is a current full-time employee of the company.
                        CONTRACTOR: The person is a current contractor of the company.
                        NON_EMPLOYEE: The person object represents a non-human actor such as a service or admin account.
                        FORMER_EMPLOYEE: The person is a previous employee of the company.
                    enum:
                        - FULL_TIME
                        - CONTRACTOR
                        - NON_EMPLOYEE
                        - FORMER_EMPLOYEE
                    example: FULL_TIME
                firstName:
                    type: string
                    description: The first name of the person
                lastName:
                    type: string
                    description: The last name of the person
                title:
                    type: string
                    description: Job title.
                businessUnit:
                    type: string
                    description: Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
                department:
                    type: string
                    description: An organizational unit where everyone has a similar task, e.g. `Engineering`.
                teams:
                    description: Info about the employee's team(s).
                    type: array
                    items:
                        $ref: "#/components/schemas/PersonTeam"
                departmentCount:
                    type: integer
                    description: The number of people in this person's department.
                email:
                    type: string
                    description: The user's primary email address
                aliasEmails:
                    type: array
                    description: Additional email addresses of this user beyond the primary, if any.
                    items:
                        type: string
                location:
                    type: string
                    description: User facing string representing the person's location.
                structuredLocation:
                    $ref: "#/components/schemas/StructuredLocation"
                externalProfileLink:
                    type: string
                    description: Link to a customer's internal profile page. This is set to '#' when no link is desired.
                manager:
                    $ref: "#/components/schemas/Person"
                managementChain:
                    description: The chain of reporting in the company as far up as it goes. The last entry is this person's direct manager.
                    type: array
                    items:
                        $ref: "#/components/schemas/Person"
                phone:
                    type: string
                    description: Phone number as a number string.
                timezone:
                    type: string
                    description: The timezone of the person. E.g. "Pacific Daylight Time".
                timezoneOffset:
                    type: integer
                    format: int64
                    description: The offset of the person's timezone in seconds from UTC.
                photoUrl:
                    type: string
                    format: url
                    description: The URL of the person's avatar. Public, glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
                uneditedPhotoUrl:
                    type: string
                    format: url
                    description: The original photo URL of the person's avatar before any edits they made are applied
                bannerUrl:
                    type: string
                    format: url
                    description: The URL of the person's banner photo.
                reports:
                    type: array
                    items:
                        $ref: "#/components/schemas/Person"
                startDate:
                    type: string
                    description: The date when the employee started.
                    format: date
                endDate:
                    type: string
                    format: date
                    description: If a former employee, the last date of employment.
                bio:
                    type: string
                    description: Short biography or mission statement of the employee.
                pronoun:
                    type: string
                    description: She/her, He/his or other pronoun.
                orgSizeCount:
                    type: integer
                    description: The total recursive size of the people reporting to this person, or 1
                directReportsCount:
                    type: integer
                    description: The total number of people who directly report to this person, or 0
                preferredName:
                    type: string
                    description: The preferred name of the person, or a nickname.
                socialNetwork:
                    description: List of social network profiles.
                    type: array
                    items:
                        $ref: "#/components/schemas/SocialNetwork"
                datasourceProfile:
                    type: array
                    description: List of profiles this user has in different datasources / tools that they use.
                    items:
                        $ref: "#/components/schemas/DatasourceProfile"
                querySuggestions:
                    $ref: "#/components/schemas/QuerySuggestionList"
                peopleDistance:
                    type: array
                    items:
                        $ref: "#/components/schemas/PersonDistance"
                    description: List of people and distances to those people from this person. Optionally with metadata.
                inviteInfo:
                    $ref: "#/components/schemas/InviteInfo"
                isSignedUp:
                    type: boolean
                    description: Whether the user has signed into Glean at least once.
                lastExtensionUse:
                    type: string
                    format: date-time
                    description: The last time the user has used the Glean extension in ISO 8601 format.
                permissions:
                    $ref: "#/components/schemas/Permissions"
                customFields:
                    type: array
                    description: User customizable fields for additional people information.
                    items:
                        $ref: "#/components/schemas/CustomFieldData"
                loggingId:
                    type: string
                    description: The logging id of the person used in scrubbed logs, tracking GA metrics.
                startDatePercentile:
                    type: number
                    format: float
                    description: Percentage of the company that started strictly after this person. Between [0,100).
                busyEvents:
                    type: array
                    items:
                        $ref: "#/components/schemas/AnonymousEvent"
                    description: Intervals of busy time for this person, along with the type of event they're busy with.
                profileBoolSettings:
                    type: object
                    additionalProperties:
                        type: boolean
                    description: flag settings to indicate user profile settings for certain items
                badges:
                    type: array
                    items:
                        $ref: "#/components/schemas/Badge"
                    description: The badges that a user has earned over their lifetime.
                isOrgRoot:
                    type: boolean
                    description: Whether this person is a "root" node in their organization's hierarchy.
            example:
                department: Movies
                email: george@example.com
                location: Hollywood, CA
                phone: 6505551234
                photoUrl: https://example.com/george.jpg
                startDate: "2000-01-23"
                title: Actor
        DocumentVisibility:
            type: string
            description: The level of visibility of the document as understood by our system.
            x-enumDescriptions:
                PRIVATE: Only one person is able to see the document.
                SPECIFIC_PEOPLE_AND_GROUPS: Only specific people and/or groups can see the document.
                DOMAIN_LINK: Anyone in the domain with the link can see the document.
                DOMAIN_VISIBLE: Anyone in the domain can search for the document.
                PUBLIC_LINK: Anyone with the link can see the document.
                PUBLIC_VISIBLE: Anyone on the internet can search for the document.
            enum:
                - PRIVATE
                - SPECIFIC_PEOPLE_AND_GROUPS
                - DOMAIN_LINK
                - DOMAIN_VISIBLE
                - PUBLIC_LINK
                - PUBLIC_VISIBLE
        Reaction:
            properties:
                type:
                    type: string
                count:
                    type: integer
                    description: The count of the reaction type on the document.
                reactors:
                    type: array
                    items:
                        $ref: "#/components/schemas/Person"
                reactedByViewer:
                    type: boolean
                    description: Whether the user in context reacted with this type to the document.
        Share:
            description: Search endpoint will only fill out numDays ago since that's all we need to display shared badge; docmetadata endpoint will fill out all the fields so that we can display shared badge tooltip
            required:
                - numDaysAgo
            properties:
                numDaysAgo:
                    type: integer
                    description: The number of days that has passed since the share happened
                sharer:
                    $ref: "#/components/schemas/Person"
                sharingDocument:
                    $ref: "#/components/schemas/Document"
        DocumentInteractions:
            properties:
                numComments:
                    type: integer
                    description: The count of comments (thread replies in the case of slack).
                numReactions:
                    type: integer
                    description: The count of reactions on the document.
                reactions:
                    type: array
                    description: To be deprecated in favor of reacts. A (potentially non-exhaustive) list of reactions for the document.
                    deprecated: true
                    items:
                        type: string
                reacts:
                    type: array
                    items:
                        $ref: "#/components/schemas/Reaction"
                shares:
                    type: array
                    items:
                        $ref: "#/components/schemas/Share"
                    description: Describes instances of someone posting a link to this document in one of our indexed datasources.
                visitorCount:
                    $ref: "#/components/schemas/CountInfo"
        ViewerInfo:
            properties:
                role:
                    type: string
                    enum:
                        - ANSWER_MODERATOR
                        - OWNER
                        - VIEWER
                    description: DEPRECATED - use permissions instead. Viewer's role on the specific document.
                    deprecated: true
                lastViewedTime:
                    type: string
                    format: date-time
        IndexStatus:
            properties:
                lastCrawledTime:
                    description: When the document was last crawled
                    type: string
                    format: date-time
                lastIndexedTime:
                    description: When the document was last indexed
                    type: string
                    format: date-time
        DocumentMetadata:
            properties:
                datasource:
                    type: string
                datasourceInstance:
                    type: string
                    description: The datasource instance from which the document was extracted.
                objectType:
                    type: string
                    description: The type of the result. Interpretation is specific to each datasource. (e.g. for Jira issues, this is the issue type such as Bug or Feature Request).
                container:
                    type: string
                    description: The name of the container (higher level parent, not direct parent) of the result. Interpretation is specific to each datasource (e.g. Channels for Slack, Project for Jira). cf. parentId
                containerId:
                    type: string
                    description: The Glean Document ID of the container. Uniquely identifies the container.
                superContainerId:
                    type: string
                    description: The Glean Document ID of the super container. Super container represents a broader abstraction that contains many containers. For example, whereas container might refer to a folder, super container would refer to a drive.
                parentId:
                    type: string
                    description: The id of the direct parent of the result. Interpretation is specific to each datasource (e.g. parent issue for Jira). cf. container
                mimeType:
                    type: string
                documentId:
                    type: string
                    description: The index-wide unique identifier.
                loggingId:
                    type: string
                    description: A unique identifier used to represent the document in any logging or feedback requests in place of documentId.
                documentIdHash:
                    type: string
                    description: Hash of the Glean Document ID.
                createTime:
                    type: string
                    format: date-time
                updateTime:
                    type: string
                    format: date-time
                author:
                    $ref: "#/components/schemas/Person"
                owner:
                    $ref: "#/components/schemas/Person"
                mentionedPeople:
                    type: array
                    items:
                        $ref: "#/components/schemas/Person"
                    description: A list of people mentioned in the document.
                visibility:
                    $ref: "#/components/schemas/DocumentVisibility"
                components:
                    type: array
                    description: A list of components this result is associated with. Interpretation is specific to each datasource. (e.g. for Jira issues, these are [components](https://confluence.atlassian.com/jirasoftwarecloud/organizing-work-with-components-764478279.html).)
                    items:
                        type: string
                status:
                    type: string
                    description: The status or disposition of the result. Interpretation is specific to each datasource. (e.g. for Jira issues, this is the issue status such as Done, In Progress or Will Not Fix).
                statusCategory:
                    type: string
                    description: The status category of the result. Meant to be more general than status. Interpretation is specific to each datasource.
                pins:
                    type: array
                    description: A list of stars associated with this result.  "Pin" is an older name.
                    items:
                        $ref: "#/components/schemas/PinDocument"
                priority:
                    type: string
                    description: The document priority. Interpretation is datasource specific.
                assignedTo:
                    $ref: "#/components/schemas/Person"
                updatedBy:
                    $ref: "#/components/schemas/Person"
                labels:
                    type: array
                    description: A list of tags for the document. Interpretation is datasource specific.
                    items:
                        type: string
                collections:
                    type: array
                    description: A list of collections that the document belongs to.
                    items:
                        $ref: "#/components/schemas/Collection"
                datasourceId:
                    type: string
                    description: The user-visible datasource specific id (e.g. Salesforce case number for example, GitHub PR number).
                interactions:
                    $ref: "#/components/schemas/DocumentInteractions"
                verification:
                    $ref: "#/components/schemas/Verification"
                viewerInfo:
                    $ref: "#/components/schemas/ViewerInfo"
                permissions:
                    $ref: "#/components/schemas/ObjectPermissions"
                visitCount:
                    $ref: "#/components/schemas/CountInfo"
                shortcuts:
                    type: array
                    description: A list of shortcuts of which destination URL is for the document.
                    items:
                        $ref: "#/components/schemas/Shortcut"
                path:
                    type: string
                    description: For file datasources like onedrive/github etc this has the path to the file
                customData:
                    $ref: "#/components/schemas/CustomData"
                documentCategory:
                    type: string
                    description: The document's document_category(.proto).
                contactPerson:
                    $ref: "#/components/schemas/Person"
                thumbnail:
                    $ref: "#/components/schemas/Thumbnail"
                    description: A thumbnail image representing this document.
                indexStatus:
                    $ref: "#/components/schemas/IndexStatus"
                ancestors:
                    type: array
                    description: A list of documents that are ancestors of this document in the hierarchy of the document's datasource, for example parent folders or containers. Ancestors can be of different types and some may not be indexed. Higher level ancestors appear earlier in the list.
                    items:
                        $ref: "#/components/schemas/Document"
            example:
                container: container
                parentId: JIRA_EN-1337
                createTime: "2000-01-23T04:56:07.000Z"
                datasource: datasource
                author:
                    name: name
                documentId: documentId
                updateTime: "2000-01-23T04:56:07.000Z"
                mimeType: mimeType
                objectType: Feature Request
                components:
                    - Backend
                    - Networking
                status:
                    - Done
                customData:
                    someCustomField: someCustomValue
        DocumentSection:
            type: object
            properties:
                title:
                    type: string
                    description: The title of the document section (e.g. the section header).
                url:
                    type: string
                    description: The permalink of the document section.
        StructuredTextItem:
            properties:
                link:
                    type: string
                    example: https://en.wikipedia.org/wiki/Diffuse_sky_radiation
                document:
                    $ref: "#/components/schemas/Document"
                text:
                    type: string
                    example: Because its wavelengths are shorter, blue light is more strongly scattered than the longer-wavelength lights, red or green. Hence the result that when looking at the sky away from the direct incident sunlight, the human eye perceives the sky to be blue.
        AnnouncementMutableProperties:
            properties:
                startTime:
                    type: string
                    format: date-time
                    description: The date and time at which the announcement becomes active.
                endTime:
                    type: string
                    format: date-time
                    description: The date and time at which the announcement expires.
                title:
                    type: string
                    description: The headline of the announcement.
                body:
                    $ref: "#/components/schemas/StructuredText"
                emoji:
                    type: string
                    description: An emoji used to indicate the nature of the announcement.
                thumbnail:
                    $ref: "#/components/schemas/Thumbnail"
                banner:
                    $ref: "#/components/schemas/Thumbnail"
                    description: Optional variant of thumbnail cropped for header background.
                audienceFilters:
                    type: array
                    description: Filters which restrict who should see the announcement. Values are taken from the corresponding filters in people search.
                    items:
                        $ref: "#/components/schemas/FacetFilter"
                sourceDocumentId:
                    type: string
                    description: The Glean Document ID of the source document this Announcement was created from (e.g. Slack thread).
                hideAttribution:
                    type: boolean
                    description: Whether or not to hide an author attribution.
                channel:
                    type: string
                    enum:
                        - MAIN
                        - SOCIAL_FEED
                    description: This determines whether this is a Social Feed post or a regular announcement.
                postType:
                    type: string
                    enum:
                        - TEXT
                        - LINK
                    description: This determines whether this is an external-link post or a regular announcement post. TEXT - Regular announcement that can contain rich text. LINK - Announcement that is linked to an external site.
                isPrioritized:
                    type: boolean
                    description: Used by the Social Feed to pin posts to the front of the feed.
                viewUrl:
                    type: string
                    description: URL for viewing the announcement. It will be set to document URL for announcements from other datasources e.g. simpplr. Can only be written when channel="SOCIAL_FEED".
        CreateAnnouncementRequest:
            allOf:
                - $ref: "#/components/schemas/AnnouncementMutableProperties"
                - type: object
                  required:
                    - title
                    - startTime
                    - endTime
        DraftProperties:
            properties:
                draftId:
                    type: integer
                    description: The opaque id of the associated draft.
            example:
                draftId: 342
        Announcement:
            allOf:
                - $ref: "#/components/schemas/AnnouncementMutableProperties"
                - $ref: "#/components/schemas/DraftProperties"
                - $ref: "#/components/schemas/PermissionedObject"
                - type: object
                  properties:
                    id:
                        type: integer
                        description: The opaque id of the announcement.
                    author:
                        $ref: "#/components/schemas/Person"
                    createTimestamp:
                        type: integer
                        description: Server Unix timestamp of the creation time (in seconds since epoch UTC).
                    lastUpdateTimestamp:
                        type: integer
                        description: Server Unix timestamp of the last update time (in seconds since epoch UTC).
                    updatedBy:
                        $ref: "#/components/schemas/Person"
                    viewerInfo:
                        type: object
                        properties:
                            isDismissed:
                                type: boolean
                                description: Whether the viewer has dismissed the announcement.
                            isRead:
                                type: boolean
                                description: Whether the viewer has read the announcement.
                    sourceDocument:
                        $ref: "#/components/schemas/Document"
                        description: The source document if the announcement is created from one.
                    isPublished:
                        type: boolean
                        description: Whether or not the announcement is published.
        DeleteAnnouncementRequest:
            required:
                - id
            properties:
                id:
                    type: integer
                    description: The opaque id of the announcement to be deleted.
        UpdateAnnouncementRequest:
            allOf:
                - $ref: "#/components/schemas/AnnouncementMutableProperties"
                - type: object
                  required:
                    - id
                    - title
                    - startTime
                    - endTime
                  properties:
                    id:
                        type: integer
                        description: The opaque id of the announcement.
        AddedCollections:
            properties:
                addedCollections:
                    type: array
                    items:
                        type: integer
                    description: IDs of Collections to which a document is added.
        AnswerCreationData:
            allOf:
                - $ref: "#/components/schemas/AnswerMutableProperties"
                - $ref: "#/components/schemas/AddedCollections"
                - type: object
                  properties:
                    combinedAnswerText:
                        $ref: "#/components/schemas/StructuredTextMutableProperties"
        CreateAnswerRequest:
            required:
                - data
            properties:
                data:
                    $ref: "#/components/schemas/AnswerCreationData"
        DeleteAnswerRequest:
            allOf:
                - $ref: "#/components/schemas/AnswerId"
                - $ref: "#/components/schemas/AnswerDocId"
                - type: object
                  required:
                    - id
        RemovedCollections:
            properties:
                removedCollections:
                    type: array
                    items:
                        type: integer
                    description: IDs of Collections from which a document is removed.
        EditAnswerRequest:
            allOf:
                - $ref: "#/components/schemas/AnswerId"
                - $ref: "#/components/schemas/AnswerDocId"
                - $ref: "#/components/schemas/AnswerMutableProperties"
                - $ref: "#/components/schemas/AddedCollections"
                - $ref: "#/components/schemas/RemovedCollections"
                - type: object
                  required:
                    - id
                  properties:
                    combinedAnswerText:
                        $ref: "#/components/schemas/StructuredTextMutableProperties"
        GetAnswerRequest:
            allOf:
                - $ref: "#/components/schemas/AnswerId"
                - $ref: "#/components/schemas/AnswerDocId"
        AnswerResult:
            required:
                - answer
            properties:
                answer:
                    $ref: "#/components/schemas/Answer"
                trackingToken:
                    type: string
                    description: An opaque token that represents this particular Answer. To be used for `/feedback` reporting.
        GetAnswerError:
            properties:
                errorType:
                    type: string
                    enum:
                        - NO_PERMISSION
                        - INVALID_ID
                answerAuthor:
                    $ref: "#/components/schemas/Person"
        GetAnswerResponse:
            properties:
                answerResult:
                    $ref: "#/components/schemas/AnswerResult"
                error:
                    $ref: "#/components/schemas/GetAnswerError"
        ListAnswersRequest:
            properties:
                boardId:
                    type: integer
                    description: The Answer Board Id to list answers on.
        ListAnswersResponse:
            required:
                - answers
                - answerResults
            properties:
                answerResults:
                    type: array
                    items:
                        $ref: "#/components/schemas/AnswerResult"
                    description: List of answers with tracking tokens.
        CreateAuthTokenResponse:
            required:
                - token
                - expirationTime
            properties:
                token:
                    type: string
                    description: An authentication token that can be passed to any endpoint via Bearer Authentication
                expirationTime:
                    description: Unix timestamp for when this token expires (in seconds since epoch UTC).
                    type: integer
                    format: int64
        AgentConfig:
            description: Describes the agent that executes the request.
            properties:
                agent:
                    type: string
                    description: Name of the agent.
                    x-enumDescriptions:
                        DEFAULT: Integrates with your company's knowledge.
                        GPT: Communicates directly with the LLM.
                    enum:
                        - DEFAULT
                        - GPT
                mode:
                    type: string
                    description: Top level modes to run GleanChat in.
                    x-enumDescriptions:
                        DEFAULT: Used if no mode supplied.
                        QUICK: Deprecated.
                    enum:
                        - DEFAULT
                        - QUICK
        ChatFileStatus:
            type: string
            description: Current status of the file.
            x-include-enum-class-prefix: true
            enum:
                - PROCESSING
                - PROCESSED
                - FAILED
                - DELETED
        ChatFileFailureReason:
            type: string
            description: Reason for failed status.
            x-include-enum-class-prefix: true
            enum:
                - PARSE_FAILED
                - AV_SCAN_FAILED
                - FILE_TOO_SMALL
                - FILE_TOO_LARGE
                - FILE_EXTENSION_UNSUPPORTED
                - FILE_METADATA_VALIDATION_FAIL
                - FILE_PROCESSING_TIMED_OUT
        ChatFileMetadata:
            type: object
            description: Metadata of a file uploaded by a user for Chat.
            properties:
                status:
                    $ref: "#/components/schemas/ChatFileStatus"
                uploadTime:
                    type: integer
                    format: int64
                    description: Upload time, in epoch seconds.
                processedSize:
                    type: integer
                    format: int64
                    description: Size of the processed file in bytes.
                failureReason:
                    $ref: "#/components/schemas/ChatFileFailureReason"
                mimeType:
                    description: MIME type of the file.
                    type: string
        ChatFile:
            type: object
            description: Structure for file uploaded by a user for Chat.
            properties:
                id:
                    type: string
                    description: Unique identifier of the file.
                    example: FILE_1234
                url:
                    type: string
                    description: Url of the file.
                    example: www.google.com
                name:
                    type: string
                    description: Name of the uploaded file.
                    example: sample.pdf
                metadata:
                    $ref: "#/components/schemas/ChatFileMetadata"
        ReferenceRange:
            description: Each text range from the response can correspond to an array of snippets from the citation source.
            properties:
                textRange:
                    $ref: "#/components/schemas/TextRange"
                snippets:
                    type: array
                    items:
                        $ref: "#/components/schemas/SearchResultSnippet"
        ChatMessageCitation:
            description: Information about the source for a ChatMessage.
            properties:
                trackingToken:
                    type: string
                    description: An opaque token that represents this particular result in this particular ChatMessage. To be used for /feedback reporting.
                sourceDocument:
                    $ref: "#/components/schemas/Document"
                sourceFile:
                    $ref: "#/components/schemas/ChatFile"
                sourcePerson:
                    $ref: "#/components/schemas/Person"
                referenceRanges:
                    description: Each reference range and its corresponding snippets
                    type: array
                    items:
                        $ref: "#/components/schemas/ReferenceRange"
        displayName:
            description: Human understandable name of the tool. Max 50 characters.
            type: string
        logoUrl:
            type: string
            description: URL used to fetch the logo.
        objectName:
            type: string
            description: Name of the generated object. This will be used to indicate to the end user what the generated object contains.
            example:
                - HR ticket
                - Email
                - Chat message
        PersonObject:
            required:
                - name
                - obfuscatedId
            properties:
                name:
                    type: string
                    description: The display name.
                obfuscatedId:
                    type: string
                    description: An opaque identifier that can be used to request metadata for a Person.
        AuthConfig:
            description: Config for tool's authentication method.
            type: object
            properties:
                isOnPrem:
                    type: boolean
                    description: Whether or not this tool is hosted on-premise.
                usesCentralAuth:
                    type: boolean
                    description: Whether or not this uses central auth.
                type:
                    type: string
                    enum:
                        - NONE
                        - OAUTH_USER
                        - OAUTH_ADMIN
                        - API_KEY
                        - BASIC_AUTH
                        - DWD
                    description: |
                        The type of authentication being used.
                        Use 'OAUTH_*' when Glean calls an external API (e.g., Jira) on behalf of a user to obtain an OAuth token.
                        'OAUTH_ADMIN' utilizes an admin token for external API calls on behalf all users.
                        'OAUTH_USER' uses individual user tokens for external API calls.
                        'DWD' refers to domain wide delegation.
                grantType:
                    type: string
                    enum:
                        - AUTH_CODE
                        - CLIENT_CREDENTIALS
                    description: The type of grant type being used.
                status:
                    type: string
                    description: Auth status of the tool.
                    enum:
                        - AWAITING_AUTH
                        - AUTHORIZED
                client_url:
                    type: string
                    format: url
                    description: The URL where users will be directed to start the OAuth flow.
                scopes:
                    type: array
                    items:
                        type: string
                    description: A list of strings denoting the different scopes or access levels required by the tool.
                audiences:
                    type: array
                    items:
                        type: string
                    description: A list of strings denoting the different audience which can access the tool.
                authorization_url:
                    type: string
                    format: url
                    description: The OAuth provider's endpoint, where access tokens are requested.
                lastAuthorizedAt:
                    type: string
                    format: date-time
                    description: The time the tool was last authorized in ISO format (ISO 8601).
        ToolMetadata:
            description: The manifest for a tool that can be used to augment Glean Assistant.
            required:
                - type
                - name
                - displayName
                - displayDescription
            properties:
                type:
                    description: The type of tool.
                    type: string
                    enum:
                        - RETRIEVAL
                        - ACTION
                name:
                    description: Unique identifier for the tool. Name should be understandable by the LLM, and will be used to invoke a tool.
                    type: string
                displayName:
                    $ref: "#/components/schemas/displayName"
                toolId:
                    type: string
                    description: An opaque id which is unique identifier for the tool.
                displayDescription:
                    description: Description of the tool meant for a human.
                    type: string
                logoUrl:
                    $ref: "#/components/schemas/logoUrl"
                objectName:
                    $ref: "#/components/schemas/objectName"
                knowledgeType:
                    type: string
                    description: Indicates the kind of knowledge a tool would access or modify.
                    enum:
                        - NEUTRAL_KNOWLEDGE
                        - COMPANY_KNOWLEDGE
                        - WORLD_KNOWLEDGE
                createdBy:
                    $ref: "#/components/schemas/PersonObject"
                lastUpdatedBy:
                    $ref: "#/components/schemas/PersonObject"
                createdAt:
                    type: string
                    format: date-time
                    description: The time the tool was created in ISO format (ISO 8601)
                lastUpdatedAt:
                    type: string
                    format: date-time
                    description: The time the tool was last updated in ISO format (ISO 8601)
                writeActionType:
                    type: string
                    description: Valid only for write actions. Represents the type of write action. REDIRECT - The client renders the URL which contains information for carrying out the action. EXECUTION - Send a request to an external server and execute the action.
                    enum:
                        - REDIRECT
                        - EXECUTION
                authType:
                    type: string
                    enum:
                        - NONE
                        - OAUTH_USER
                        - OAUTH_ADMIN
                        - API_KEY
                        - BASIC_AUTH
                        - DWD
                    description: |
                        The type of authentication being used.
                        Use 'OAUTH_*' when Glean calls an external API (e.g., Jira) on behalf of a user to obtain an OAuth token.
                        'OAUTH_ADMIN' utilizes an admin token for external API calls on behalf all users.
                        'OAUTH_USER' uses individual user tokens for external API calls.
                        'DWD' refers to domain wide delegation.
                auth:
                    deprecated: true
                    $ref: "#/components/schemas/AuthConfig"
                permissions:
                    deprecated: true
                    $ref: "#/components/schemas/ObjectPermissions"
                usageInstructions:
                    description: Usage instructions for the LLM to use this action.
                    type: string
                isSetupFinished:
                    type: boolean
                    description: Whether this action has been fully configured and validated.
        PossibleValue:
            type: object
            description: Possible value of a specific parameter
            properties:
                value:
                    type: string
                    description: Possible value
                label:
                    type: string
                    description: User-friendly label associated with the value
        WriteActionParameter:
            type: object
            properties:
                type:
                    type: string
                    description: The type of the value (e.g., integer, string, boolean, etc.)
                    enum:
                        - UNKNOWN
                        - INTEGER
                        - STRING
                        - BOOLEAN
                displayName:
                    type: string
                    description: Human readable display name for the key.
                value:
                    type: string
                    description: The value of the field.
                isRequired:
                    type: boolean
                    description: Is the parameter a required field.
                description:
                    type: string
                    description: Description of the parameter.
                possibleValues:
                    type: array
                    items:
                        $ref: "#/components/schemas/PossibleValue"
                    description: Possible values that the parameter can take.
        ToolInfo:
            type: object
            properties:
                metadata:
                    $ref: "#/components/schemas/ToolMetadata"
                parameters:
                    type: object
                    description: Parameters supported by the tool.
                    additionalProperties:
                        $ref: "#/components/schemas/WriteActionParameter"
        ChatMessageFragment:
            description: Represents a part of a ChatMessage that originates from a single action/tool. It is designed to support rich data formats beyond simple text, allowing for a more dynamic and interactive chat experience. Each fragment can include various types of content, such as text, search queries, action information, and more. Also, each ChatMessageFragment should only have one of structuredResults, querySuggestion, writeAction, followupAction, or file.
            allOf:
                - $ref: "#/components/schemas/Result"
                - type: object
                  properties:
                    text:
                        type: string
                    querySuggestion:
                        description: The search queries issued while responding.
                        $ref: "#/components/schemas/QuerySuggestion"
                    file:
                        description: Files referenced in the message fragment. This is used to construct rich-text messages with file references.
                        $ref: "#/components/schemas/ChatFile"
                    action:
                        description: Basic information about an action. This can be used to construct rich-text messages with action references.
                        $ref: "#/components/schemas/ToolInfo"
        ChatMessage:
            description: A message that is rendered as one coherent unit with one given sender.
            properties:
                agentConfig:
                    $ref: "#/components/schemas/AgentConfig"
                    description: Describes the agent config that generated this message. Populated on responses and not required on requests.
                author:
                    default: USER
                    enum:
                        - USER
                        - GLEAN_AI
                citations:
                    type: array
                    items:
                        $ref: "#/components/schemas/ChatMessageCitation"
                    description: A list of Citations that were used to generate the response.
                uploadedFileIds:
                    type: array
                    items:
                        type: string
                    description: IDs of files uploaded in the message that are referenced to generate the answer.
                fragments:
                    type: array
                    description: A list of rich data used to represent the response or formulate a request. These are linearly stitched together to support richer data formats beyond simple text.
                    items:
                        $ref: "#/components/schemas/ChatMessageFragment"
                ts:
                    type: string
                    description: Response timestamp of the message.
                messageId:
                    type: string
                    description: A unique server-side generated ID used to identify a message, automatically populated for any USER authored messages.
                messageTrackingToken:
                    type: string
                    description: Opaque tracking token generated server-side.
                messageType:
                    type: string
                    default: CONTENT
                    description: Semantically groups content of a certain type. It can be used for purposes such as differential UI treatment. USER authored messages should be of type CONTENT and do not need `messageType` specified.
                    x-enumDescriptions:
                        UPDATE: An intermediate state message for progress updates.
                        CONTENT: A user query or response message.
                        CONTEXT: A message providing context in addition to the user query.
                        DEBUG: A debug message. Strictly used internally.
                        DEBUG_EXTERNAL: A debug message to be used while debugging Action creation.
                        ERROR: A message that describes an error while processing the request.
                        HEADING: A heading message used to distinguish different sections of the holistic response.
                        WARNING: A warning message to be shown to the user.
                    enum:
                        - UPDATE
                        - CONTENT
                        - CONTEXT
                        - DEBUG
                        - DEBUG_EXTERNAL
                        - ERROR
                        - HEADING
                        - WARNING
                hasMoreFragments:
                    deprecated: true
                    type: boolean
                    description: Signals there are additional response fragments incoming.
        ChatRestrictionFilters:
            allOf:
                - $ref: "#/components/schemas/RestrictionFilters"
                - type: object
                  properties:
                    documentSpecs:
                        type: array
                        items:
                            $ref: "#/components/schemas/DocumentSpec"
                    datasourceInstances:
                        type: array
                        items:
                            type: string
        ChatRequest:
            required:
                - messages
            properties:
                saveChat:
                    type: boolean
                    description: Save the current interaction as a Chat for the user to access and potentially continue later.
                chatId:
                    type: string
                    description: The id of the Chat that context should be retrieved from and messages added to. An empty id starts a new Chat, and the Chat is saved if saveChat is true.
                messages:
                    type: array
                    description: A list of chat messages, from most recent to least recent. It can be assumed that the first chat message in the list is the user's most recent query.
                    items:
                        $ref: "#/components/schemas/ChatMessage"
                agentConfig:
                    $ref: "#/components/schemas/AgentConfig"
                    description: Describes the agent that will execute the request.
                inclusions:
                    $ref: "#/components/schemas/ChatRestrictionFilters"
                    description: A list of filters which only allows chat to access certain content.
                exclusions:
                    $ref: "#/components/schemas/ChatRestrictionFilters"
                    description: A list of filters which disallows chat from accessing certain content. If content is in both inclusions and exclusions, it'll be excluded.
                timeoutMillis:
                    type: integer
                    description: Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.
                    example: 30000
                applicationId:
                    type: string
                    description: The ID of the application this request originates from, used to determine the configuration of underlying chat processes. This should correspond to the ID set during admin setup. If not specified, the default chat experience will be used.
                stream:
                    type: boolean
                    description: If set, response lines will be streamed one-by-one as they become available. Each will be a ChatResponse, formatted as JSON, and separated by a new line. If false, the entire response will be returned at once. Note that if this is set and the model being used does not support streaming, the model's response will not be streamed, but other messages from the endpoint still will be.
        ChatResponse:
            description: A single response from the /chat backend.
            properties:
                messages:
                    type: array
                    items:
                        $ref: "#/components/schemas/ChatMessage"
                chatId:
                    type: string
                    description: The id of the associated Chat the messages belong to, if one exists.
                followUpPrompts:
                    type: array
                    items:
                        type: string
                    description: Follow-up prompts for the user to potentially use
                backendTimeMillis:
                    type: integer
                    format: int64
                    description: Time in milliseconds the backend took to respond to the request.
                    example: 1100
                chatSessionTrackingToken:
                    type: string
                    description: A token that is used to track the session.
        DeleteChatsRequest:
            required:
                - ids
            properties:
                ids:
                    type: array
                    items:
                        type: string
                    description: A non-empty list of ids of the Chats to be deleted.
        GetChatRequest:
            required:
                - id
            properties:
                id:
                    type: string
                    description: The id of the Chat to be retrieved.
        ChatMetadata:
            description: Metadata of a Chat a user had with Glean Assistant. This contains no actual conversational content.
            properties:
                id:
                    type: string
                    description: The opaque id of the Chat.
                createTime:
                    type: integer
                    description: Server Unix timestamp of the creation time (in seconds since epoch UTC).
                createdBy:
                    $ref: "#/components/schemas/Person"
                    description: The user who created this Chat.
                updateTime:
                    type: integer
                    description: Server Unix timestamp of the update time (in seconds since epoch UTC).
                name:
                    type: string
                    description: The name of the Chat.
                applicationId:
                    type: string
                    description: The ID of the AI App that this Chat is associated to.
                applicationName:
                    type: string
                    description: The display name of the AI App that this Chat is associated to.
                icon:
                    $ref: "#/components/schemas/IconConfig"
        Chat:
            description: A historical representation of a series of chat messages a user had with Glean Assistant.
            allOf:
                - $ref: "#/components/schemas/ChatMetadata"
            properties:
                messages:
                    type: array
                    items:
                        $ref: "#/components/schemas/ChatMessage"
                    description: The chat messages within a Chat.
        ChatResult:
            properties:
                chat:
                    $ref: "#/components/schemas/Chat"
                trackingToken:
                    type: string
                    description: An opaque token that represents this particular Chat. To be used for `/feedback` reporting.
        GetChatResponse:
            properties:
                chatResult:
                    $ref: "#/components/schemas/ChatResult"
        ChatMetadataResult:
            properties:
                chat:
                    $ref: "#/components/schemas/ChatMetadata"
                trackingToken:
                    type: string
                    description: An opaque token that represents this particular Chat. To be used for `/feedback` reporting.
        ListChatsResponse:
            properties:
                chatResults:
                    type: array
                    items:
                        $ref: "#/components/schemas/ChatMetadataResult"
                    x-includeEmpty: true
        GetChatApplicationRequest:
            required:
                - id
            properties:
                id:
                    type: string
                    description: The id of the Chat application to be retrieved.
        ChatApplicationDetails: {}
        GetChatApplicationResponse:
            properties:
                application:
                    $ref: "#/components/schemas/ChatApplicationDetails"
        UploadChatFilesRequest:
            required:
                - files
            properties:
                files:
                    type: array
                    items:
                        type: string
                        format: binary
                    description: Raw files to be uploaded for chat in binary format.
        UploadChatFilesResponse:
            properties:
                files:
                    type: array
                    items:
                        $ref: "#/components/schemas/ChatFile"
                    description: Files uploaded for chat.
        GetChatFilesRequest:
            required:
                - fileIds
            properties:
                fileIds:
                    type: array
                    items:
                        type: string
                    description: IDs of files to fetch.
        GetChatFilesResponse:
            properties:
                files:
                    description: A map of file IDs to ChatFile structs.
                    type: object
                    additionalProperties:
                        $ref: "#/components/schemas/ChatFile"
        DeleteChatFilesRequest:
            required:
                - fileIds
            properties:
                fileIds:
                    type: array
                    items:
                        type: string
                    description: IDs of files to delete.
        WorkflowInputFieldValues:
            type: object
            description: Key-value mapping of string -> string where the key is the name of the field in the prompt.
            additionalProperties:
                type: string
        RunAgentRequest:
            properties:
                agentId:
                    type: string
                    description: The ID of the agent to be run.
                fields:
                    $ref: "#/components/schemas/WorkflowInputFieldValues"
                stream:
                    type: boolean
                    description: Whether to stream responses as they become available. If false, the entire response will be returned at once.
        ListWorkflowsRequest: {}
        AgentMutableProperties:
            properties:
                name:
                    type: string
                    description: The name of the agent.
        WorkflowMetadata:
            allOf:
                - type: object
                  properties:
                    author:
                        $ref: "#/components/schemas/Person"
                    createTimestamp:
                        type: integer
                        description: Server Unix timestamp of the creation time.
                    lastUpdateTimestamp:
                        type: integer
                        description: Server Unix timestamp of the last update time.
                    lastUpdatedBy:
                        $ref: "#/components/schemas/Person"
        Agent:
            allOf:
                - type: object
                  properties:
                    id:
                        type: string
                        description: The ID of the agent.
                - $ref: "#/components/schemas/AgentMutableProperties"
                - $ref: "#/components/schemas/WorkflowMetadata"
                - $ref: "#/components/schemas/PermissionedObject"
        AgentResult:
            type: object
            required:
                - agent
            properties:
                agent:
                    $ref: "#/components/schemas/Agent"
        ListAgentsResponse:
            description: List of all agents and their metadata.
            properties:
                agents:
                    type: array
                    items:
                        $ref: "#/components/schemas/AgentResult"
        GetAgentInputsRequest:
            properties:
                agentId:
                    type: string
                    description: The id of the agent.
        WorkflowInputField:
            type: object
            properties:
                name:
                    type: string
                    description: The name of the input.
        GetAgentInputsResponse:
            properties:
                inputs:
                    description: The inputs to the agent.
                    type: array
                    items:
                        $ref: "#/components/schemas/WorkflowInputField"
        CollectionItemDescriptor:
            allOf:
                - $ref: "#/components/schemas/CollectionItemMutableProperties"
            properties:
                url:
                    type: string
                    description: The URL of the item being added.
                documentId:
                    type: string
                    description: The Glean Document ID of the item being added if it's an indexed document.
                newNextItemId:
                    type: string
                    description: The (optional) ItemId of the next CollectionItem in sequence. If omitted, will be added to the end of the Collection
                itemType:
                    type: string
                    enum:
                        - DOCUMENT
                        - TEXT
                        - URL
        AddCollectionItemsRequest:
            required:
                - collectionId
            properties:
                collectionId:
                    type: number
                    description: The ID of the Collection to add items to.
                addedCollectionItemDescriptors:
                    type: array
                    items:
                        $ref: "#/components/schemas/CollectionItemDescriptor"
                    description: The CollectionItemDescriptors of the items being added.
        AddCollectionItemsError:
            properties:
                errorType:
                    type: string
                    enum:
                        - EXISTING_ITEM
        AddCollectionItemsResponse:
            properties:
                collection:
                    $ref: "#/components/schemas/Collection"
                    description: The modified Collection. Only CollectionItemMutableProperties are set for each item.
                error:
                    $ref: "#/components/schemas/AddCollectionItemsError"
        CreateCollectionRequest:
            allOf:
                - $ref: "#/components/schemas/CollectionMutableProperties"
                - type: object
                  properties:
                    newNextItemId:
                        type: string
                        description: The (optional) ItemId of the next CollectionItem in sequence. If omitted, will be added to the end of the Collection. Only used if parentId is specified.
        CollectionError:
            required:
                - errorCode
            properties:
                errorCode:
                    type: string
                    enum:
                        - NAME_EXISTS
                        - NOT_FOUND
                        - COLLECTION_PINNED
                        - CONCURRENT_HIERARCHY_EDIT
                        - HEIGHT_VIOLATION
                        - WIDTH_VIOLATION
                        - NO_PERMISSIONS
        CreateCollectionResponse:
            allOf:
                - $ref: "#/components/schemas/Collection"
                - $ref: "#/components/schemas/CollectionError"
                - type: object
                  properties:
                    collection:
                        $ref: "#/components/schemas/Collection"
                    error:
                        $ref: "#/components/schemas/CollectionError"
        DeleteCollectionRequest:
            required:
                - ids
            properties:
                ids:
                    type: array
                    items:
                        type: integer
                    description: The IDs of the Collections to delete.
                allowedDatasource:
                    type: string
                    description: The datasource allowed in the Collection to be deleted.
        DeleteCollectionItemRequest:
            required:
                - collectionId
                - itemId
            properties:
                collectionId:
                    type: number
                    description: The ID of the Collection to remove an item in.
                itemId:
                    type: string
                    description: The item ID of the CollectionItem to remove from this Collection.
                documentId:
                    type: string
                    description: The (optional) Glean Document ID of the CollectionItem to remove from this Collection if this is an indexed document.
        DeleteCollectionItemResponse:
            properties:
                collection:
                    $ref: "#/components/schemas/Collection"
                    description: The modified Collection. Only CollectionItemMutableProperties are set for each item.
        EditCollectionRequest:
            allOf:
                - $ref: "#/components/schemas/CollectionMutableProperties"
                - type: object
                  required:
                    - id
                  properties:
                    id:
                        type: integer
                        description: The ID of the Collection to modify.
        EditCollectionResponse:
            allOf:
                - $ref: "#/components/schemas/Collection"
                - $ref: "#/components/schemas/CollectionError"
                - type: object
                  properties:
                    collection:
                        $ref: "#/components/schemas/Collection"
                    error:
                        $ref: "#/components/schemas/CollectionError"
        EditCollectionItemRequest:
            required:
                - collectionId
                - itemId
            allOf:
                - $ref: "#/components/schemas/CollectionItemMutableProperties"
                - type: object
            properties:
                collectionId:
                    type: integer
                    description: The ID of the Collection to edit CollectionItems in.
                itemId:
                    type: string
                    description: The ID of the CollectionItem to edit.
        EditCollectionItemResponse:
            properties:
                collection:
                    $ref: "#/components/schemas/Collection"
                    description: The modified Collection. Only CollectionItemMutableProperties are set for each item.
        GetCollectionRequest:
            required:
                - id
            properties:
                id:
                    type: integer
                    description: The ID of the Collection to be retrieved.
                withItems:
                    type: boolean
                    description: Whether or not to include the Collection Items in this Collection. Only request if absolutely required, as this is expensive.
                withHierarchy:
                    type: boolean
                    description: Whether or not to include the top level Collection in this Collection's hierarchy.
                allowedDatasource:
                    type: string
                    description: The datasource allowed in the Collection returned.
        GetCollectionResponse:
            properties:
                collection:
                    $ref: "#/components/schemas/Collection"
                rootCollection:
                    $ref: "#/components/schemas/Collection"
                trackingToken:
                    type: string
                    description: An opaque token that represents this particular Collection. To be used for `/feedback` reporting.
                error:
                    $ref: "#/components/schemas/CollectionError"
        ListCollectionsRequest:
            properties:
                includeAudience:
                    type: boolean
                    description: Whether to include the audience filters with the listed Collections.
                includeRoles:
                    type: boolean
                    description: Whether to include the editor roles with the listed Collections.
                allowedDatasource:
                    type: string
                    description: |-
                        The datasource type this Collection can hold.
                        ANSWERS - for Collections representing answer boards
        ListCollectionsResponse:
            required:
                - collections
            properties:
                collections:
                    type: array
                    items:
                        $ref: "#/components/schemas/Collection"
                    description: List of all Collections, no Collection items are fetched.
        GetDocPermissionsRequest:
            type: object
            properties:
                documentId:
                    type: string
                    description: The Glean Document ID to retrieve permissions for.
        GetDocPermissionsResponse:
            type: object
            properties:
                allowedUserEmails:
                    type: array
                    items:
                        type: string
                    description: A list of emails of users who have access to the document. If the document is visible to all Glean users, a list with only a single value of 'VISIBLE_TO_ALL'.
        GetDocumentsRequest:
            required:
                - documentSpecs
            properties:
                documentSpecs:
                    type: array
                    items:
                        $ref: "#/components/schemas/DocumentSpec"
                    description: The specification for the documents to be retrieved.
                includeFields:
                    description: List of Document fields to return (that aren't returned by default)
                    type: array
                    items:
                        type: string
                        enum:
                            - LAST_VIEWED_AT
                            - VISITORS_COUNT
                            - RECENT_SHARES
                            - DOCUMENT_CONTENT
        DocumentOrError:
            oneOf:
                - $ref: "#/components/schemas/Document"
                - type: object
                  properties:
                    error:
                        type: string
                        description: The text for error, reason.
        GetDocumentsResponse:
            properties:
                documents:
                    type: object
                    additionalProperties:
                        $ref: "#/components/schemas/DocumentOrError"
                    description: The document details or the error if document is not found.
        GetDocumentsByFacetsRequest:
            required:
                - filterSets
            properties:
                datasourcesFilter:
                    type: array
                    items:
                        type: string
                    description: Filter results to one or more datasources (e.g. gmail, slack). All results are returned if missing.
                filterSets:
                    type: array
                    items:
                        $ref: "#/components/schemas/FacetFilterSet"
                    description: A list of facet filter sets that will be OR'ed together. An AND is assumed between different filters in each set.
                cursor:
                    type: string
                    description: Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
        GetDocumentsByFacetsResponse:
            properties:
                documents:
                    type: array
                    items:
                        $ref: "#/components/schemas/Document"
                    description: The document details, ordered by score.
                hasMoreResults:
                    type: boolean
                    description: Whether more results are available. Use cursor to retrieve them.
                cursor:
                    type: string
                    description: Cursor that indicates the start of the next page of results. To be passed in "more" requests for this query.
        InsightsAiAppRequestOptions:
            type: object
            properties:
                aiAppIds:
                    type: array
                    items:
                        type: string
                    description: IDs of the AI Apps for which Insights should be returned. An empty array signifies all.
        InsightsAgentsRequestOptions:
            type: object
            properties:
                agentIds:
                    type: array
                    items:
                        type: string
                    description: IDs of the Agents for which Insights should be returned. An empty array signifies all.
        DownloadInsightsRequest:
            required:
                - categories
            properties:
                categories:
                    type: array
                    items:
                        type: string
                        enum:
                            - AGENTS
                            - AI
                            - AI_APPS
                            - ANNOUNCEMENTS
                            - ANSWERS
                            - COLLECTIONS
                            - CONTENT
                            - GLEAN_ASSIST
                            - QUERIES
                            - SHORTCUTS
                            - USERS
                    description: Categories of data requested. Request can include single or multiple types.
                departments:
                    type: array
                    items:
                        type: string
                    description: Departments that the data is requested for. If this is empty, corresponds to whole company.
                dayRange:
                    $ref: "#/components/schemas/Period"
                aiAppRequestOptions:
                    $ref: "#/components/schemas/InsightsAiAppRequestOptions"
                agentsRequestOptions:
                    $ref: "#/components/schemas/InsightsAgentsRequestOptions"
        InsightsRequest:
            allOf:
                - $ref: "#/components/schemas/DownloadInsightsRequest"
                - type: object
                  properties:
                    assistantActivityTypes:
                        type: array
                        items:
                            type: string
                            enum:
                                - GLEAN_CHAT
                                - AI_SUMMARY
                                - AI_ANSWER
                                - GLEANBOT_RESPONSE
                        description: Types of activity that should count in the definition of an Assistant Active User. Affects only insights for AI category.
                    disablePerUserInsights:
                        type: boolean
                        description: If true, suppresses the generation of per-user Insights in the response. Default is false.
        LabeledCountInfo:
            required:
                - label
            properties:
                label:
                    type: string
                    description: Label for the included count information.
                countInfo:
                    type: array
                    items:
                        $ref: "#/components/schemas/CountInfo"
                    description: List of data points for counts for a given date period.
        UserActivityInsight:
            required:
                - user
                - activity
            properties:
                user:
                    $ref: "#/components/schemas/Person"
                activity:
                    type: string
                    enum:
                        - ALL
                        - SEARCH
                    description: Activity e.g. search, home page visit or all.
                lastActivityTimestamp:
                    type: integer
                    description: Unix timestamp of the last activity (in seconds since epoch UTC).
                activityCount:
                    $ref: "#/components/schemas/CountInfo"
                activeDayCount:
                    $ref: "#/components/schemas/CountInfo"
        UserInsightsResponse:
            properties:
                lastLogTimestamp:
                    type: integer
                    description: Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
                activityInsights:
                    type: array
                    items:
                        $ref: "#/components/schemas/UserActivityInsight"
                    description: Insights for all active users with respect to set of actions.
                inactiveInsights:
                    type: array
                    items:
                        $ref: "#/components/schemas/UserActivityInsight"
                    description: Insights for all in inactive users with respect to set of actions and time period. Activity count will be set to 0.
                totalTeammates:
                    type: integer
                    description: Total number of teammates that have logged in to the product, that are still valid teammates.
                totalActiveUsers:
                    type: integer
                    description: Total number of active users in the requested period.
                departments:
                    type: array
                    items:
                        type: string
                    description: list of departments applicable for users tab.
        DocumentInsight:
            required:
                - document
            properties:
                document:
                    $ref: "#/components/schemas/Document"
                viewCount:
                    $ref: "#/components/schemas/CountInfo"
                visitorCount:
                    $ref: "#/components/schemas/CountInfo"
        ContentInsightsResponse:
            properties:
                lastLogTimestamp:
                    type: integer
                    description: Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
                documentInsights:
                    type: array
                    items:
                        $ref: "#/components/schemas/DocumentInsight"
                    description: Insights for documents.
                departments:
                    type: array
                    items:
                        type: string
                    description: list of departments applicable for contents tab.
                minDepartmentSizeThreshold:
                    type: integer
                    description: Min threshold in size of departments while populating results, otherwise 0.
                minVisitorThreshold:
                    type: integer
                    description: Minimum number of visitors to a document required to be included in insights.
        QueryInsight:
            required:
                - query
            properties:
                query:
                    type: string
                    description: The query string the information is about.
                searchCount:
                    $ref: "#/components/schemas/CountInfo"
                searchorCount:
                    $ref: "#/components/schemas/CountInfo"
                searchWithClickCount:
                    $ref: "#/components/schemas/CountInfo"
                clickCount:
                    $ref: "#/components/schemas/CountInfo"
                similarQueries:
                    type: array
                    items:
                        $ref: "#/components/schemas/QueryInsight"
                    description: list of similar queries to current one.
        QueryInsightsResponse:
            properties:
                lastLogTimestamp:
                    type: integer
                    description: Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
                queryInsights:
                    type: array
                    items:
                        $ref: "#/components/schemas/QueryInsight"
                    description: Insights for queries.
                lowPerformingQueryInsights:
                    type: array
                    items:
                        $ref: "#/components/schemas/QueryInsight"
                    description: Insights for low performing queries without good results.
                departments:
                    type: array
                    items:
                        type: string
                    description: list of departments applicable for queries tab.
                minVisitorThreshold:
                    type: integer
                    description: Min threshold in number of visitors while populating results, otherwise 0.
        ShortcutInsight:
            required:
                - shortcut
            properties:
                shortcut:
                    $ref: "#/components/schemas/Shortcut"
                visitCount:
                    $ref: "#/components/schemas/CountInfo"
                visitorCount:
                    $ref: "#/components/schemas/CountInfo"
        ShortcutInsightsResponse:
            properties:
                lastLogTimestamp:
                    type: integer
                    description: Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
                shortcutInsights:
                    type: array
                    items:
                        $ref: "#/components/schemas/ShortcutInsight"
                    description: Insights for shortcuts.
                departments:
                    type: array
                    items:
                        type: string
                    description: list of departments applicable for shortcuts tab.
                minVisitorThreshold:
                    type: integer
                    description: Min threshold in number of visitors while populating results, otherwise 0.
        AiInsightsResponse:
            properties:
                lastLogTimestamp:
                    type: integer
                    description: Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
                assistantInsights:
                    type: array
                    items:
                        $ref: "#/components/schemas/UserActivityInsight"
                totalActiveAssistantUsers:
                    type: integer
                    description: Total number of Active Assistant users (chat, summary, AIA) in requested period.
                totalChatMessages:
                    type: integer
                    description: Total number of Chat messages sent in requested period.
                totalAiSummarizations:
                    type: integer
                    description: Total number of AI Document Summarizations invoked in the requested period.
                totalAiAnswers:
                    type: integer
                    description: Total number of AI Answers generated in the requested period.
                totalUpvotes:
                    type: integer
                    description: Total number of Chat messages which received upvotes by the user.
                totalDownvotes:
                    type: integer
                    description: Total number of Chat messages which received downvotes by the user.
                totalGleanbotResponses:
                    type: integer
                    description: Total number of Gleanbot responses, both proactive and reactive.
                totalGleanbotResponsesShared:
                    type: integer
                    description: Total number of Gleanbot responses shared publicly (upvoted).
                totalGleanbotResponsesNotHelpful:
                    type: integer
                    description: Total number of Glean responses rejected as not helpful (downvoted).
                departments:
                    type: array
                    items:
                        type: string
                    description: list of departments applicable for users tab.
        AiAppActionCounts:
            type: object
            additionalProperties:
                type: integer
            description: Map from action to frequency.
            properties:
                totalSlackbotResponses:
                    type: integer
                    description: Total number of Slackbot responses, both proactive and reactive.
                totalSlackbotResponsesShared:
                    type: integer
                    description: Total number of Slackbot responses shared publicly (upvoted).
                totalSlackbotResponsesNotHelpful:
                    type: integer
                    description: Total number of Slackbot responses rejected as not helpful (downvoted).
                totalChatMessages:
                    type: integer
                    description: Total number of Chat messages sent in requested period.
                totalUpvotes:
                    type: integer
                    description: Total number of Chat messages which received upvotes by the user.
                totalDownvotes:
                    type: integer
                    description: Total number of Chat messages which received downvotes by the user.
        AiAppsInsightsResponse:
            properties:
                lastLogTimestamp:
                    type: integer
                    description: Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
                aiAppInsights:
                    type: array
                    items:
                        $ref: "#/components/schemas/UserActivityInsight"
                totalActiveUsers:
                    type: integer
                    description: Total number of active users on the Ai App in the requested period.
                actionCounts:
                    $ref: "#/components/schemas/AiAppActionCounts"
                departments:
                    type: array
                    items:
                        type: string
                    description: list of departments applicable for users tab.
        GleanAssistInsightsResponse:
            properties:
                lastLogTimestamp:
                    type: integer
                    description: Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC).
                activityInsights:
                    type: array
                    items:
                        $ref: "#/components/schemas/UserActivityInsight"
                    description: Insights for all active users with respect to set of actions.
                totalActiveUsers:
                    type: integer
                    description: Total number of active users in the requested period.
                datasourceInstances:
                    type: array
                    items:
                        type: string
                    description: List of datasource instances for which glean assist is enabled.
                departments:
                    type: array
                    items:
                        type: string
                    description: List of departments applicable for users tab.
        InsightsResponse:
            properties:
                timeseries:
                    type: array
                    items:
                        $ref: "#/components/schemas/LabeledCountInfo"
                    description: List of timeseries to make charts (if applicable).
                users:
                    $ref: "#/components/schemas/UserInsightsResponse"
                content:
                    $ref: "#/components/schemas/ContentInsightsResponse"
                queries:
                    $ref: "#/components/schemas/QueryInsightsResponse"
                collections:
                    $ref: "#/components/schemas/ContentInsightsResponse"
                collectionsV2:
                    $ref: "#/components/schemas/ContentInsightsResponse"
                shortcuts:
                    $ref: "#/components/schemas/ShortcutInsightsResponse"
                announcements:
                    $ref: "#/components/schemas/ContentInsightsResponse"
                answers:
                    $ref: "#/components/schemas/ContentInsightsResponse"
                ai:
                    $ref: "#/components/schemas/AiInsightsResponse"
                aiApps:
                    $ref: "#/components/schemas/AiAppsInsightsResponse"
                gleanAssist:
                    $ref: "#/components/schemas/GleanAssistInsightsResponse"
                departments:
                    type: array
                    items:
                        type: string
                    description: list of all departments.
        MessagesRequest:
            required:
                - id
                - idType
            properties:
                idType:
                    type: string
                    enum:
                        - CHANNEL_NAME
                        - THREAD_ID
                        - CONVERSATION_ID
                    description: Type of the id in the incoming request.
                id:
                    type: string
                    description: ID corresponding to the requested idType. Note that channel and threads are represented by the underlying datasource's ID and conversations are represented by their document's ID.
                workspaceId:
                    type: string
                    description: Id for the for the workspace in case of multiple workspaces.
                direction:
                    type: string
                    enum:
                        - OLDER
                        - NEWER
                    description: The direction of the results asked with respect to the reference timestamp. Missing field defaults to OLDER. Only applicable when using a message_id.
                timestampMillis:
                    type: integer
                    format: int64
                    description: Timestamp in millis of the reference message. Only applicable when using a message_id.
                includeRootMessage:
                    type: boolean
                    description: Whether to include root message in response.
                datasource:
                    type: string
                    enum:
                        - SLACK
                        - MICROSOFTTEAMS
                        - FACEBOOKWORKPLACE
                    description: The type of the data source. Missing field defaults to SLACK.
                datasourceInstanceDisplayName:
                    type: string
                    description: The datasource instance display name from which the document was extracted. This is used for appinstance facet filter for datasources that support multiple instances.
        FollowupAction:
            description: A follow-up action that can be invoked by the user after a response. The action parameters are not included and need to be predicted/filled separately.
            properties:
                actionRunId:
                    type: string
                    description: Unique identifier for this actionRun recommendation event.
                actionInstanceId:
                    type: string
                    description: The ID of the action instance that will be invoked.
                actionId:
                    type: string
                    description: The ID of the associated action.
                recommendationText:
                    type: string
                    description: Text to be displayed to the user when recommending the action instance.
                actionLabel:
                    type: string
                    description: The label to be used when displaying a button to execute this action instance.
                userConfirmationRequired:
                    type: boolean
                    description: Whether user confirmation is needed before executing this action instance.
        GeneratedQna:
            properties:
                question:
                    type: string
                    description: Search query rephrased into a question.
                answer:
                    type: string
                    description: Answer generated for the given query or the generated question.
                followUpPrompts:
                    type: array
                    items:
                        type: string
                    description: List of all follow-up prompts generated for the given query or the generated question.
                followupActions:
                    description: List of follow-up actions generated for the given query or the generated question.
                    type: array
                    items:
                        $ref: "#/components/schemas/FollowupAction"
                ranges:
                    type: array
                    items:
                        $ref: "#/components/schemas/TextRange"
                    description: Answer subsections to mark with special formatting (citations, bolding etc)
                status:
                    type: string
                    enum:
                        - COMPUTING
                        - DISABLED
                        - FAILED
                        - NO_ANSWER
                        - SKIPPED
                        - STREAMING
                        - SUCCEEDED
                        - TIMEOUT
                    description: Status of backend generating the answer
                cursor:
                    type: string
                    description: An opaque cursor representing the search request
                trackingToken:
                    type: string
                    description: An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
        InvalidOperatorValueError:
            properties:
                key:
                    description: The operator key that has an invalid value.
                    type: string
                value:
                    description: The invalid operator value.
                    type: string
        ErrorMessage:
            properties:
                source:
                    description: The datasource this message relates to.
                    type: string
                errorMessage:
                    type: string
        ErrorInfo:
            properties:
                badGmailToken:
                    type: boolean
                    description: Indicates the gmail results could not be fetched due to bad token.
                badOutlookToken:
                    type: boolean
                    description: Indicates the outlook results could not be fetched due to bad token.
                invalidOperators:
                    type: array
                    description: Indicates results could not be fetched due to invalid operators in the query.
                    items:
                        $ref: "#/components/schemas/InvalidOperatorValueError"
                errorMessages:
                    type: array
                    items:
                        $ref: "#/components/schemas/ErrorMessage"
            x-speakeasy-name-override: GleanDataError
        ResultsResponse:
            properties:
                trackingToken:
                    type: string
                    description: A token that should be passed for additional requests related to this request (such as more results requests).
                sessionInfo:
                    $ref: "#/components/schemas/SessionInfo"
                results:
                    type: array
                    items:
                        $ref: "#/components/schemas/SearchResult"
                structuredResults:
                    type: array
                    items:
                        $ref: "#/components/schemas/StructuredResult"
                generatedQnaResult:
                    $ref: "#/components/schemas/GeneratedQna"
                errorInfo:
                    $ref: "#/components/schemas/ErrorInfo"
                requestID:
                    type: string
                    description: A platform-generated request ID to correlate backend logs.
                backendTimeMillis:
                    type: integer
                    format: int64
                    description: Time in milliseconds the backend took to respond to the request.
                    example: 1100
        BackendExperimentsContext:
            properties:
                experimentIds:
                    type: array
                    items:
                        type: integer
                        format: int64
                    description: List of experiment ids for the corresponding request.
        SearchWarning:
            required:
                - warningType
            properties:
                warningType:
                    type: string
                    enum:
                        - LONG_QUERY
                        - QUOTED_PUNCTUATION
                        - PUNCTUATION_ONLY
                        - COPYPASTED_QUOTES
                        - INVALID_OPERATOR
                        - MAYBE_INVALID_FACET_QUERY
                    description: The type of the warning.
                lastUsedTerm:
                    type: string
                    description: The last term we considered in the user's long query.
                quotesIgnoredQuery:
                    type: string
                    description: The query after ignoring/removing quotes.
                ignoredTerms:
                    type: array
                    items:
                        type: string
                    description: A list of query terms that were ignored when generating search results, if any. For example, terms containing invalid filters such as "updated:invalid_date" will be ignored.
        SearchResponseMetadata:
            properties:
                rewrittenQuery:
                    type: string
                    description: A cleaned up or updated version of the query to be displayed in the query box. Useful for mapping visual facets to search operators.
                searchedQuery:
                    type: string
                    description: The actual query used to perform search and return results.
                searchedQueryRanges:
                    type: array
                    items:
                        $ref: "#/components/schemas/TextRange"
                    description: The bolded ranges within the searched query.
                originalQuery:
                    type: string
                    description: The query text sent by the client in the request.
                querySuggestion:
                    $ref: "#/components/schemas/QuerySuggestion"
                    description: An alternative query to the one provided that may give better results, e.g. a spelling suggestion.
                additionalQuerySuggestions:
                    $ref: "#/components/schemas/QuerySuggestionList"
                    description: Other alternative queries that may provide better or more specific results than the original query.
                negatedTerms:
                    type: array
                    items:
                        type: string
                    description: A list of terms that were negated when processing the query.
                modifiedQueryWasUsed:
                    type: boolean
                    description: A different query was performed than the one requested.
                originalQueryHadNoResults:
                    type: boolean
                    description: No results were found for the original query. The usage of this bit in conjunction with modifiedQueryWasUsed will dictate whether the full page replacement is 0-result or few-result based.
                searchWarning:
                    $ref: "#/components/schemas/SearchWarning"
                triggeredExpertDetection:
                    type: boolean
                    description: Whether the query triggered expert detection results in the People tab.
                isNoQuotesSuggestion:
                    type: boolean
                    description: Whether the query was modified to remove quotes
        FacetValue:
            properties:
                stringValue:
                    type: string
                    example: engineering
                    description: The value that should be set in the FacetFilter when applying this filter to a search request.
                integerValue:
                    type: integer
                    example: 5
                displayLabel:
                    type: string
                    example: engineering
                    description: An optional user-friendly label to display in place of the facet value.
                iconConfig:
                    $ref: "#/components/schemas/IconConfig"
        FacetBucket:
            properties:
                count:
                    type: integer
                    description: Estimated number of results in this facet.
                    example: 1
                datasource:
                    type: string
                    example: jira
                    description: The datasource the value belongs to. This will be used by the all tab to show types across all datasources.
                percentage:
                    type: integer
                    description: Estimated percentage of results in this facet.
                    example: 5
                value:
                    $ref: "#/components/schemas/FacetValue"
        FacetResult:
            properties:
                sourceName:
                    type: string
                    description: The source of this facet (e.g. container_name, type, last_updated_at).
                    example: container_name
                operatorName:
                    type: string
                    description: How to display this facet. Currently supportes 'SelectSingle' and 'SelectMultiple'.
                    example: SelectMultiple
                buckets:
                    type: array
                    description: A list of unique buckets that exist within this result set.
                    items:
                        $ref: "#/components/schemas/FacetBucket"
                hasMoreBuckets:
                    type: boolean
                    description: Returns true if more buckets exist than those returned. Additional buckets can be retrieve by requesting again with a higher facetBucketSize.
                    example: false
                groupName:
                    type: string
                    description: For most facets this will be the empty string, meaning the facet is high-level and applies to all documents for the datasource. When non-empty, this is used to group facets together (i.e. group facets for each doctype for a certain datasource)
                    example: Service Cloud
        ResultTab:
            properties:
                id:
                    type: string
                    description: The unique ID of the tab. Can be passed in a search request to get results for that tab.
                count:
                    type: integer
                    description: The number of results in this tab for the current query.
                datasource:
                    type: string
                    description: The datasource associated with the tab, if any.
                datasourceInstance:
                    type: string
                    description: The datasource instance associated with the tab, if any.
        ResultsDescription:
            properties:
                text:
                    type: string
                    description: Textual description of the results. Can be shown at the top of SERP, e.g. 'People who write about this topic' for experts in people tab.
                iconConfig:
                    $ref: "#/components/schemas/IconConfig"
                    description: The config for the icon that's displayed with this description
        SearchResponse:
            allOf:
                - $ref: "#/components/schemas/ResultsResponse"
                - $ref: "#/components/schemas/BackendExperimentsContext"
                - type: object
                  properties:
                    metadata:
                        $ref: "#/components/schemas/SearchResponseMetadata"
                    facetResults:
                        type: array
                        items:
                            $ref: "#/components/schemas/FacetResult"
                    resultTabs:
                        type: array
                        items:
                            $ref: "#/components/schemas/ResultTab"
                        description: All result tabs available for the current query. Populated if QUERY_METADATA is specified in the request.
                    resultTabIds:
                        type: array
                        items:
                            type: string
                        description: The unique IDs of the result tabs to which this response belongs.
                    resultsDescription:
                        $ref: "#/components/schemas/ResultsDescription"
                    rewrittenFacetFilters:
                        type: array
                        items:
                            $ref: "#/components/schemas/FacetFilter"
                        description: The actual applied facet filters based on the operators and facetFilters in the query. Useful for mapping typed operators to visual facets.
                    cursor:
                        type: string
                        description: Cursor that indicates the start of the next page of results. To be passed in "more" requests for this query.
                    hasMoreResults:
                        type: boolean
                        description: Whether more results are available. Use cursor to retrieve them.
            example:
                trackingToken: trackingToken
                suggestedSpellCorrectedQuery: suggestedSpellCorrectedQuery
                hasMoreResults: true
                errorInfo:
                    errorMessages:
                        - source: gmail
                          errorMessage: invalid token
                        - source: slack
                          errorMessage: expired token
                requestID: 5e345ae500ff0befa2b9d1a3ba0001737e7363696f312d323535323137000171756572792d656e64706f696e743a323032303031333074313830343032000100
                results:
                    - snippets:
                        - snippet: snippet
                          mimeType: mimeType
                      metadata:
                        container: container
                        createTime: "2000-01-23T04:56:07.000Z"
                        datasource: datasource
                        author:
                            name: name
                        documentId: documentId
                        updateTime: "2000-01-23T04:56:07.000Z"
                        mimeType: mimeType
                        objectType: objectType
                      title: title
                      url: https://www.example.com/
                    - snippets:
                        - snippet: snippet
                          mimeType: mimeType
                      metadata:
                        container: container
                        createTime: "2000-01-23T04:56:07.000Z"
                        datasource: datasource
                        author:
                            name: name
                        documentId: documentId
                        updateTime: "2000-01-23T04:56:07.000Z"
                        mimeType: mimeType
                        objectType: objectType
                      title: title
                      url: https://www.example.com/
                facetResults:
                    - buckets:
                        - percentage: 5
                          count: 1
                          value:
                            stringValue: stringValue
                            integerValue: 5
                        - percentage: 5
                          count: 1
                          value:
                            stringValue: stringValue
                            integerValue: 5
                      sourceName: sourceName
                      operatorName: operatorName
                      objectType: objectType
                    - buckets:
                        - percentage: 5
                          count: 1
                          value:
                            stringValue: stringValue
                            integerValue: 5
                        - percentage: 5
                          count: 1
                          value:
                            stringValue: stringValue
                            integerValue: 5
                      sourceName: sourceName
                      operatorName: operatorName
                      objectType: objectType
                rewrittenQuery: rewrittenQuery
                rewrittenFacetFilters:
                    - fieldName: fieldName
                      values:
                        - fieldValues
                        - fieldValues
                    - fieldName: fieldName
                      values:
                        - fieldValues
                        - fieldValues
        MessagesResponse:
            required:
                - hasMore
            properties:
                hasMore:
                    type: boolean
                    description: Whether there are more results for client to continue requesting.
                searchResponse:
                    $ref: "#/components/schemas/SearchResponse"
                rootMessage:
                    $ref: "#/components/schemas/SearchResult"
        EditPinRequest:
            allOf:
                - $ref: "#/components/schemas/PinDocumentMutableProperties"
                - type: object
                  properties:
                    id:
                        type: string
                        description: The opaque id of the pin to be edited.
        GetPinRequest:
            properties:
                id:
                    type: string
                    description: The opaque id of the pin to be fetched.
        GetPinResponse:
            properties:
                pin:
                    $ref: "#/components/schemas/PinDocument"
        ListPinsResponse:
            required:
                - pins
            properties:
                pins:
                    type: array
                    items:
                        $ref: "#/components/schemas/PinDocument"
                    description: List of pinned documents.
        PinRequest:
            allOf:
                - $ref: "#/components/schemas/PinDocumentMutableProperties"
                - type: object
                  properties:
                    documentId:
                        type: string
                        description: The document to be pinned.
        Unpin:
            properties:
                id:
                    type: string
                    description: The opaque id of the pin to be unpinned.
        ResultsRequest:
            properties:
                timestamp:
                    type: string
                    description: The ISO 8601 timestamp associated with the client request.
                    format: date-time
                trackingToken:
                    type: string
                    description: A previously received trackingToken for a search associated with the same query. Useful for more requests and requests for other tabs.
                sessionInfo:
                    $ref: "#/components/schemas/SessionInfo"
                sourceDocument:
                    $ref: "#/components/schemas/Document"
                    description: The document from which the ResultsRequest is issued, if any.
                pageSize:
                    type: integer
                    example: 100
                    description: Hint to the server about how many results to send back. Server may return less or more. Structured results and clustered results don't count towards pageSize.
                maxSnippetSize:
                    type: integer
                    description: Hint to the server about how many characters long a snippet may be. Server may return less or more.
                    example: 400
        SearchRequest:
            required:
                - query
            allOf:
                - $ref: "#/components/schemas/ResultsRequest"
                - type: object
                  properties:
                    query:
                        type: string
                        description: The search terms.
                        example: vacation policy
                    cursor:
                        type: string
                        description: Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
                    resultTabIds:
                        type: array
                        items:
                            type: string
                        description: The unique IDs of the result tabs for which to fetch results. This will have precedence over datasource filters if both are specified and in conflict.
                    inputDetails:
                        $ref: "#/components/schemas/SearchRequestInputDetails"
                    requestOptions:
                        $ref: "#/components/schemas/SearchRequestOptions"
                    timeoutMillis:
                        type: integer
                        description: Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.
                        example: 5000
                    people:
                        type: array
                        description: People associated with the search request. Hints to the server to fetch additional information for these people. Note that in this request, an email may be used as a person's obfuscatedId value.
                        items:
                            $ref: "#/components/schemas/Person"
                    disableSpellcheck:
                        type: boolean
                        description: Whether or not to disable spellcheck.
            example:
                trackingToken: trackingToken
                query: vacation policy
                pageSize: 10
                requestOptions:
                    facetFilters:
                        - fieldName: type
                          values:
                            - value: article
                              relationType: EQUALS
                            - value: document
                              relationType: EQUALS
                        - fieldName: department
                          values:
                            - value: engineering
                              relationType: EQUALS
        AutocompleteRequest:
            type: object
            properties:
                trackingToken:
                    type: string
                sessionInfo:
                    $ref: "#/components/schemas/SessionInfo"
                query:
                    type: string
                    description: Partially typed query.
                    example: San Fra
                datasourcesFilter:
                    type: array
                    items:
                        type: string
                    description: Filter results to only those relevant to one or more datasources (e.g. jira, gdrive). Results are unfiltered if missing.
                datasource:
                    type: string
                    description: Filter to only return results relevant to the given datasource.
                resultTypes:
                    type: array
                    description: Filter to only return results of the given type(s). All types may be returned if omitted.
                    items:
                        type: string
                        enum:
                            - ADDITIONAL_DOCUMENT
                            - APP
                            - BROWSER_HISTORY
                            - DATASOURCE
                            - DOCUMENT
                            - ENTITY
                            - GOLINK
                            - HISTORY
                            - NEW_CHAT
                            - OPERATOR
                            - OPERATOR_VALUE
                            - QUICKLINK
                            - SUGGESTION
                resultSize:
                    type: integer
                    description: |
                        Maximum number of results to be returned. If no value is provided, the backend will cap at 200.
                    example: 10
                authTokens:
                    type: array
                    description: Auth tokens which may be used for federated results.
                    items:
                        $ref: "#/components/schemas/AuthToken"
            example:
                trackingToken: trackingToken
                query: what is a que
                datasource: GDRIVE
                resultSize: 10
        OperatorScope:
            properties:
                datasource:
                    type: string
                docType:
                    type: string
        OperatorMetadata:
            required:
                - name
            properties:
                name:
                    type: string
                isCustom:
                    type: boolean
                    description: Whether this operator is supported by default or something that was created within a workplace app (e.g. custom jira field).
                operatorType:
                    type: string
                    enum:
                        - TEXT
                        - DOUBLE
                        - DATE
                        - USER
                helpText:
                    type: string
                scopes:
                    type: array
                    items:
                        $ref: "#/components/schemas/OperatorScope"
                value:
                    type: string
                    description: Raw/canonical value of the operator. Only applies when result is an operator value.
                displayValue:
                    type: string
                    description: Human readable value of the operator that can be shown to the user. Only applies when result is an operator value.
            example:
                name: Last Updated
                operatorType: DATE
                scopes:
                    - datasource: GDRIVE
                      docType: Document
                    - datasource: ZENDESK
        Quicklink:
            description: An action for a specific datasource that will show up in autocomplete and app card, e.g. "Create new issue" for jira.
            properties:
                name:
                    type: string
                    description: Full action name. Used in autocomplete.
                shortName:
                    type: string
                    description: Shortened name. Used in app cards.
                url:
                    type: string
                    description: The URL of the action.
                iconConfig:
                    $ref: "#/components/schemas/IconConfig"
                    description: The config for the icon for this quicklink
                id:
                    type: string
                    description: Unique identifier of this quicklink
                scopes:
                    type: array
                    description: The scopes for which this quicklink is applicable
                    items:
                        type: string
                        enum:
                            - APP_CARD
                            - AUTOCOMPLETE_EXACT_MATCH
                            - AUTOCOMPLETE_FUZZY_MATCH
                            - AUTOCOMPLETE_ZERO_QUERY
                            - NEW_TAB_PAGE
        AutocompleteResult:
            required:
                - result
                - result_type
            properties:
                result:
                    type: string
                keywords:
                    type: array
                    items:
                        type: string
                    description: A list of all possible keywords for given result.
                resultType:
                    type: string
                    enum:
                        - ADDITIONAL_DOCUMENT
                        - APP
                        - BROWSER_HISTORY
                        - DATASOURCE
                        - DOCUMENT
                        - ENTITY
                        - GOLINK
                        - HISTORY
                        - NEW_CHAT
                        - OPERATOR
                        - OPERATOR_VALUE
                        - QUICKLINK
                        - SUGGESTION
                score:
                    type: number
                    description: Higher indicates a more confident match.
                operatorMetadata:
                    $ref: "#/components/schemas/OperatorMetadata"
                quicklink:
                    $ref: "#/components/schemas/Quicklink"
                document:
                    $ref: "#/components/schemas/Document"
                url:
                    type: string
                structuredResult:
                    $ref: "#/components/schemas/StructuredResult"
                trackingToken:
                    type: string
                    description: A token to be passed in /feedback events associated with this autocomplete result.
                ranges:
                    type: array
                    items:
                        $ref: "#/components/schemas/TextRange"
                    description: Subsections of the result string to which some special formatting should be applied (eg. bold)
            example:
                result: sample result
                resultType: DOCUMENT
                score: 4.56
                url: https://www.example.com/
                trackingToken: abcd
                metadata:
                    - datasource: confluence
                    - objectType: page
        AutocompleteResultGroup:
            description: A subsection of the results list from which distinct sections should be created.
            properties:
                startIndex:
                    type: integer
                    description: The inclusive start index of the range.
                endIndex:
                    type: integer
                    description: The exclusive end index of the range.
                title:
                    type: string
                    description: The title of the result group to be displayed. Empty means no title.
        AutocompleteResponse:
            allOf:
                - $ref: "#/components/schemas/BackendExperimentsContext"
                - type: object
                  properties:
                    trackingToken:
                        type: string
                        description: An opaque token that represents this particular set of autocomplete results. To be used for /feedback reporting.
                    sessionInfo:
                        $ref: "#/components/schemas/SessionInfo"
                    results:
                        type: array
                        items:
                            $ref: "#/components/schemas/AutocompleteResult"
                    groups:
                        type: array
                        items:
                            $ref: "#/components/schemas/AutocompleteResultGroup"
                        description: Subsections of the results list from which distinct sections should be created.
                    errorInfo:
                        $ref: "#/components/schemas/ErrorInfo"
                    backendTimeMillis:
                        type: integer
                        format: int64
                        description: Time in milliseconds the backend took to respond to the request.
                        example: 1100
                  example:
                    trackingToken: trackingToken
        ChatZeroStateSuggestionOptions:
            properties:
                applicationId:
                    type: string
                    description: The Chat Application ID this feed request should be scoped to. Empty means there is no Chat Application ID..
        FeedRequestOptions:
            required:
                - resultSize
            properties:
                resultSize:
                    type: integer
                    description: Number of results asked in response. If a result is a collection, counts as one.
                timezoneOffset:
                    type: integer
                    description: The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
                categoryToResultSize:
                    type: object
                    additionalProperties:
                        type: object
                        properties:
                            resultSize:
                                type: integer
                    description: Mapping from category to number of results asked for the category.
                datasourceFilter:
                    type: array
                    items:
                        type: string
                    description: Datasources for which content should be included. Empty is for all.
                chatZeroStateSuggestionOptions:
                    $ref: "#/components/schemas/ChatZeroStateSuggestionOptions"
        FeedRequest:
            required:
                - refreshType
            properties:
                categories:
                    type: array
                    items:
                        type: string
                        enum:
                            - DOCUMENT_SUGGESTION
                            - DOCUMENT_SUGGESTION_SCENARIO
                            - TRENDING_DOCUMENT
                            - VERIFICATION_REMINDER
                            - EVENT
                            - ANNOUNCEMENT
                            - MENTION
                            - DATASOURCE_AFFINITY
                            - RECENT
                            - COMPANY_RESOURCE
                            - EXPERIMENTAL
                            - PEOPLE_CELEBRATIONS
                            - DISPLAYABLE_LIST
                            - SOCIAL_LINK
                            - EXTERNAL_TASKS
                            - ZERO_STATE_CHAT_SUGGESTION
                            - ZERO_STATE_CHAT_TOOL_SUGGESTION
                            - ZERO_STATE_WORKFLOW_CREATED_BY_ME
                            - ZERO_STATE_WORKFLOW_FAVORITES
                            - ZERO_STATE_WORKFLOW_POPULAR
                            - ZERO_STATE_WORKFLOW_SUGGESTION
                    description: Categories of content requested. An allowlist gives flexibility to request content separately or together.
                requestOptions:
                    $ref: "#/components/schemas/FeedRequestOptions"
                timeoutMillis:
                    type: integer
                    description: Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.
                    example: 5000
                sessionInfo:
                    $ref: "#/components/schemas/SessionInfo"
        DisplayableListFormat:
            properties:
                format:
                    type: string
                    enum:
                        - LIST
                    description: defines how to render this particular displayable list card
        DisplayableListItemUIConfig:
            type: object
            description: UI configurations for each item of the list
            properties:
                showNewIndicator:
                    type: boolean
                    description: show a "New" pill next to the item
        ConferenceData:
            required:
                - provider
                - uri
            properties:
                provider:
                    type: string
                    enum:
                        - ZOOM
                        - HANGOUTS
                uri:
                    type: string
                    description: A permalink for the conference.
                source:
                    type: string
                    enum:
                        - NATIVE_CONFERENCE
                        - LOCATION
                        - DESCRIPTION
        EventClassificationName:
            description: The name for a generated classification of an event.
            type: string
            enum:
                - External Event
        EventStrategyName:
            type: string
            description: The name of method used to surface relevant data for a given calendar event.
            enum:
                - customerCard
                - news
                - call
                - email
                - meetingNotes
                - linkedIn
                - relevantDocuments
                - chatFollowUps
                - conversations
        EventClassification:
            description: A generated classification of a given event.
            properties:
                name:
                    $ref: "#/components/schemas/EventClassificationName"
                strategies:
                    type: array
                    items:
                        $ref: "#/components/schemas/EventStrategyName"
        StructuredLink:
            description: The display configuration for a link.
            properties:
                name:
                    type: string
                    description: The display name for the link
                url:
                    type: string
                    description: The URL for the link.
                iconConfig:
                    $ref: "#/components/schemas/IconConfig"
        GeneratedAttachmentContent:
            description: Content that has been generated or extrapolated from the documents present in the document field.
            properties:
                displayHeader:
                    description: The header describing the generated content.
                    type: string
                text:
                    description: The content that has been generated.
                    type: string
            example:
                displayHeader: Action Items
                content: You said you'd send over the design document after the meeting.
        GeneratedAttachment:
            description: These are attachments that aren't natively present on the event, and have been smartly suggested.
            properties:
                strategyName:
                    $ref: "#/components/schemas/EventStrategyName"
                documents:
                    type: array
                    items:
                        $ref: "#/components/schemas/Document"
                person:
                    $ref: "#/components/schemas/Person"
                customer:
                    $ref: "#/components/schemas/Customer"
                externalLinks:
                    description: A list of links to external sources outside of Glean.
                    type: array
                    items:
                        $ref: "#/components/schemas/StructuredLink"
                content:
                    type: array
                    items:
                        $ref: "#/components/schemas/GeneratedAttachmentContent"
        CalendarEvent:
            required:
                - id
                - url
            allOf:
                - $ref: "#/components/schemas/AnonymousEvent"
                - type: object
                  properties:
                    id:
                        type: string
                        description: The calendar event id
                    url:
                        type: string
                        description: A permalink for this calendar event
                    attendees:
                        $ref: "#/components/schemas/CalendarAttendees"
                    location:
                        type: string
                        description: The location that this event is taking place at.
                    conferenceData:
                        $ref: "#/components/schemas/ConferenceData"
                    description:
                        type: string
                        description: The HTML description of the event.
                    datasource:
                        type: string
                        description: The app or other repository type from which the event was extracted
                    hasTranscript:
                        type: boolean
                        description: The event has a transcript associated with it enabling features like summarization
                    classifications:
                        type: array
                        items:
                            $ref: "#/components/schemas/EventClassification"
                    generatedAttachments:
                        type: array
                        items:
                            $ref: "#/components/schemas/GeneratedAttachment"
        PromptTemplateMutableProperties:
            required:
                - template
            properties:
                name:
                    type: string
                    description: The user-given identifier for this prompt template.
                template:
                    type: string
                    description: The actual template string.
                applicationId:
                    type: string
                    description: The Application Id the prompt template should be created under. Empty for default assistant.
                inclusions:
                    $ref: "#/components/schemas/ChatRestrictionFilters"
                    description: A list of filters which only allows the prompt template to access certain content.
                addedRoles:
                    type: array
                    description: A list of added user roles for the Workflow.
                    items:
                        $ref: "#/components/schemas/UserRoleSpecification"
                removedRoles:
                    type: array
                    description: A list of removed user roles for the Workflow.
                    items:
                        $ref: "#/components/schemas/UserRoleSpecification"
        AttributionProperties: {}
        PromptTemplate:
            allOf:
                - $ref: "#/components/schemas/PromptTemplateMutableProperties"
                - $ref: "#/components/schemas/PermissionedObject"
                - $ref: "#/components/schemas/AttributionProperties"
                - type: object
                  properties:
                    id:
                        type: string
                        description: Opaque id for this prompt template
                    author:
                        $ref: "#/components/schemas/Person"
                    createTimestamp:
                        type: integer
                        description: Server Unix timestamp of the creation time.
                    lastUpdateTimestamp:
                        type: integer
                        description: Server Unix timestamp of the last update time.
                    lastUpdatedBy:
                        $ref: "#/components/schemas/Person"
                    roles:
                        type: array
                        description: A list of roles for this prompt template explicitly granted.
                        items:
                            $ref: "#/components/schemas/UserRoleSpecification"
        UgcType:
            enum:
                - ANNOUNCEMENTS_TYPE
                - ANSWERS_TYPE
                - COLLECTIONS_TYPE
                - SHORTCUTS_TYPE
                - WORKFLOWS_TYPE
                - PROMPT_TEMPLATES_TYPE
        FavoriteInfo:
            type: object
            properties:
                ugcType:
                    $ref: "#/components/schemas/UgcType"
                id:
                    type: string
                    description: Opaque id of the UGC.
                count:
                    type: integer
                    x-includeEmpty: true
                    description: Number of users this object has been favorited by.
                favoritedByUser:
                    type: boolean
                    x-includeEmpty: true
                    description: If the requesting user has favorited this object.
        PromptTemplateResult:
            properties:
                promptTemplate:
                    $ref: "#/components/schemas/PromptTemplate"
                trackingToken:
                    type: string
                    description: An opaque token that represents this prompt template
                favoriteInfo:
                    $ref: "#/components/schemas/FavoriteInfo"
                runCount:
                    $ref: "#/components/schemas/CountInfo"
                    description: This tracks how many times this prompt template was run. If user runs a prompt template after modifying the original one, it still counts as a run for the original template.
        WorkflowMutableProperties:
            properties:
                name:
                    type: string
                    description: The name of the workflow.
        Workflow:
            allOf:
                - $ref: "#/components/schemas/PermissionedObject"
                - $ref: "#/components/schemas/WorkflowMutableProperties"
                - $ref: "#/components/schemas/WorkflowMetadata"
                - $ref: "#/components/schemas/AttributionProperties"
                - type: object
                  properties:
                    id:
                        type: string
                        description: The ID of the workflow.
        WorkflowResult:
            type: object
            required:
                - workflow
            properties:
                workflow:
                    $ref: "#/components/schemas/Workflow"
        UserActivity:
            properties:
                actor:
                    $ref: "#/components/schemas/Person"
                timestamp:
                    type: integer
                    description: Unix timestamp of the activity (in seconds since epoch UTC).
                action:
                    type: string
                    enum:
                        - ADD
                        - ADD_REMINDER
                        - CLICK
                        - COMMENT
                        - DELETE
                        - DISMISS
                        - EDIT
                        - MENTION
                        - MOVE
                        - OTHER
                        - RESTORE
                        - UNKNOWN
                        - VERIFY
                        - VIEW
                    description: The action for the activity
                aggregateVisitCount:
                    $ref: "#/components/schemas/CountInfo"
        FeedEntry:
            required:
                - title
            properties:
                entryId:
                    type: string
                    description: optional ID associated with a single feed entry (displayable_list_id)
                title:
                    type: string
                    description: Title for the result. Can be document title, event title and so on.
                thumbnail:
                    $ref: "#/components/schemas/Thumbnail"
                createdBy:
                    $ref: "#/components/schemas/Person"
                uiConfig:
                    allOf:
                        - $ref: "#/components/schemas/DisplayableListFormat"
                        - type: object
                          properties:
                            additionalFlags:
                                $ref: "#/components/schemas/DisplayableListItemUIConfig"
                justificationType:
                    type: string
                    enum:
                        - FREQUENTLY_ACCESSED
                        - RECENTLY_ACCESSED
                        - TRENDING_DOCUMENT
                        - VERIFICATION_REMINDER
                        - SUGGESTED_DOCUMENT
                        - EMPTY_STATE_SUGGESTION
                        - FRECENCY_SCORED
                        - SERVER_GENERATED
                        - USE_CASE
                        - UPDATE_SINCE_LAST_VIEW
                        - RECENTLY_STARTED
                        - EVENT
                        - USER_MENTION
                        - ANNOUNCEMENT
                        - EXTERNAL_ANNOUNCEMENT
                        - POPULARITY_BASED_TRENDING
                        - COMPANY_RESOURCE
                        - EVENT_DOCUMENT_FROM_CONTENT
                        - EVENT_DOCUMENT_FROM_SEARCH
                        - VISIT_AFFINITY_SCORED
                        - SUGGESTED_APP
                        - SUGGESTED_PERSON
                        - ACTIVITY_HIGHLIGHT
                        - SAVED_SEARCH
                        - SUGGESTED_CHANNEL
                        - PEOPLE_CELEBRATIONS
                        - SOCIAL_LINK
                        - ZERO_STATE_CHAT_SUGGESTION
                        - ZERO_STATE_CHAT_TOOL_SUGGESTION
                        - ZERO_STATE_PROMPT_TEMPLATE_SUGGESTION
                        - ZERO_STATE_STATIC_WORKFLOW_SUGGESTION
                        - ZERO_STATE_AGENT_SUGGESTION
                    description: Type of the justification.
                justification:
                    type: string
                    description: Server side generated justification string if server provides one.
                trackingToken:
                    type: string
                    description: An opaque token that represents this particular feed entry in this particular response. To be used for /feedback reporting.
                viewUrl:
                    type: string
                    description: View URL for the entry if based on links that are not documents in Glean.
                document:
                    $ref: "#/components/schemas/Document"
                event:
                    $ref: "#/components/schemas/CalendarEvent"
                announcement:
                    $ref: "#/components/schemas/Announcement"
                collection:
                    $ref: "#/components/schemas/Collection"
                collectionItem:
                    $ref: "#/components/schemas/CollectionItem"
                person:
                    $ref: "#/components/schemas/Person"
                app:
                    $ref: "#/components/schemas/AppResult"
                promptTemplate:
                    $ref: "#/components/schemas/PromptTemplateResult"
                workflow:
                    $ref: "#/components/schemas/WorkflowResult"
                activities:
                    type: array
                    items:
                        $ref: "#/components/schemas/UserActivity"
                    description: List of activity where each activity has user, action, timestamp.
                documentVisitorCount:
                    $ref: "#/components/schemas/CountInfo"
        FeedResult:
            required:
                - category
                - primaryEntry
            properties:
                category:
                    type: string
                    enum:
                        - DOCUMENT_SUGGESTION
                        - DOCUMENT_SUGGESTION_SCENARIO
                        - TRENDING_DOCUMENT
                        - USE_CASE
                        - VERIFICATION_REMINDER
                        - EVENT
                        - ANNOUNCEMENT
                        - MENTION
                        - DATASOURCE_AFFINITY
                        - RECENT
                        - COMPANY_RESOURCE
                        - EXPERIMENTAL
                        - PEOPLE_CELEBRATIONS
                        - SOCIAL_LINK
                        - EXTERNAL_TASKS
                        - DISPLAYABLE_LIST
                        - ZERO_STATE_CHAT_SUGGESTION
                        - ZERO_STATE_CHAT_TOOL_SUGGESTION
                        - ZERO_STATE_WORKFLOW_CREATED_BY_ME
                        - ZERO_STATE_WORKFLOW_FAVORITES
                        - ZERO_STATE_WORKFLOW_POPULAR
                        - ZERO_STATE_WORKFLOW_SUGGESTION
                    description: Category of the result, one of the requested categories in incoming request.
                primaryEntry:
                    $ref: "#/components/schemas/FeedEntry"
                secondaryEntries:
                    type: array
                    items:
                        $ref: "#/components/schemas/FeedEntry"
                    description: Secondary entries for the result e.g. suggested docs for the calendar, carousel.
                rank:
                    type: integer
                    description: Rank of the result. Rank is suggested by server. Client side rank may differ.
        FeedResponse:
            required:
                - serverTimestamp
            allOf:
                - $ref: "#/components/schemas/BackendExperimentsContext"
                - type: object
                  properties:
                    trackingToken:
                        type: string
                        description: An opaque token that represents this particular feed response.
                    serverTimestamp:
                        type: integer
                        description: Server unix timestamp (in seconds since epoch UTC).
                    results:
                        type: array
                        items:
                            $ref: "#/components/schemas/FeedResult"
                    facetResults:
                        type: object
                        additionalProperties:
                            type: array
                            items:
                                $ref: "#/components/schemas/FacetResult"
                        description: Map from category to the list of facets that can be used to filter the entry's content.
                    mentionsTimeWindowInHours:
                        type: integer
                        description: The time window (in hours) used for generating user mentions.
        RecommendationsRequestOptions:
            properties:
                datasourceFilter:
                    type: string
                    description: Filter results to a single datasource name (e.g. gmail, slack). All results are returned if missing.
                datasourcesFilter:
                    type: array
                    items:
                        type: string
                    description: Filter results to only those relevant to one or more datasources (e.g. jira, gdrive). All results are returned if missing.
                facetFilterSets:
                    type: array
                    items:
                        $ref: "#/components/schemas/FacetFilterSet"
                    description: A list of facet filter sets that will be OR'ed together.
                context:
                    $ref: "#/components/schemas/Document"
                    description: Content for either a new or unindexed document, or additional content for an indexed document, which may be used to generate recommendations.
                resultProminence:
                    description: The types of prominence wanted in results returned. Default is any type.
                    type: array
                    items:
                        $ref: "#/components/schemas/SearchResultProminenceEnum"
        RecommendationsRequest:
            allOf:
                - $ref: "#/components/schemas/ResultsRequest"
                - type: object
                  properties:
                    recommendationDocumentSpec:
                        $ref: "#/components/schemas/DocumentSpec"
                        description: Retrieve recommendations for this document. Glean Document ID is preferred over URL.
                    requestOptions:
                        $ref: "#/components/schemas/RecommendationsRequestOptions"
                        description: Options for adjusting the request for recommendations.
        RecommendationsResponse:
            allOf:
                - $ref: "#/components/schemas/ResultsResponse"
        SortOptions:
            type: object
            properties:
                orderBy:
                    type: string
                    enum:
                        - ASC
                        - DESC
                sortBy:
                    type: string
        ListEntitiesRequest:
            type: object
            properties:
                filter:
                    type: array
                    items:
                        $ref: "#/components/schemas/FacetFilter"
                sort:
                    description: Use EntitiesSortOrder enum for SortOptions.sortBy
                    type: array
                    items:
                        $ref: "#/components/schemas/SortOptions"
                entityType:
                    type: string
                    default: PEOPLE
                    enum:
                        - PEOPLE
                        - TEAMS
                        - CUSTOM_ENTITIES
                datasource:
                    type: string
                    description: The datasource associated with the entity type, most commonly used with CUSTOM_ENTITIES
                query:
                    type: string
                    description: A query string to search for entities that each entity in the response must conform to. An empty query does not filter any entities.
                includeFields:
                    description: List of entity fields to return (that aren't returned by default)
                    type: array
                    items:
                        type: string
                        enum:
                            - PEOPLE
                            - TEAMS
                            - PEOPLE_DISTANCE
                            - PERMISSIONS
                            - FACETS
                            - INVITE_INFO
                            - LAST_EXTENSION_USE
                            - MANAGEMENT_DETAILS
                            - UNPROCESSED_TEAMS
                pageSize:
                    type: integer
                    example: 100
                    description: Hint to the server about how many results to send back. Server may return less.
                cursor:
                    type: string
                    description: Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
                source:
                    type: string
                    description: A string denoting the search surface from which the endpoint is called.
        EntitiesSortOrder:
            type: string
            description: Different ways of sorting entities
            enum:
                - ENTITY_NAME
                - FIRST_NAME
                - LAST_NAME
                - ORG_SIZE_COUNT
                - START_DATE
                - TEAM_SIZE
                - RELEVANCE
        ListEntitiesResponse:
            type: object
            properties:
                results:
                    type: array
                    items:
                        $ref: "#/components/schemas/Person"
                teamResults:
                    type: array
                    items:
                        $ref: "#/components/schemas/Team"
                customEntityResults:
                    type: array
                    items:
                        $ref: "#/components/schemas/CustomEntity"
                facetResults:
                    type: array
                    items:
                        $ref: "#/components/schemas/FacetResult"
                cursor:
                    type: string
                    description: Pagination cursor. A previously received opaque token representing the position in the overall results at which to start.
                totalCount:
                    type: integer
                    description: The total number of entities available
                hasMoreResults:
                    type: boolean
                    description: Whether or not more entities can be fetched.
                sortOptions:
                    type: array
                    description: Sort options from EntitiesSortOrder supported for this response. Default is empty list.
                    items:
                        $ref: "#/components/schemas/EntitiesSortOrder"
                customFacetNames:
                    type: array
                    description: list of Person attributes that are custom setup by deployment
                    items:
                        type: string
        PeopleRequest:
            type: object
            properties:
                timezoneOffset:
                    type: integer
                    description: The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
                obfuscatedIds:
                    type: array
                    items:
                        type: string
                    description: The Person IDs to retrieve. If no IDs are requested, the current user's details are returned.
                emailIds:
                    type: array
                    items:
                        type: string
                    description: The email IDs to retrieve. The result is the deduplicated union of emailIds and obfuscatedIds.
                includeFields:
                    description: List of PersonMetadata fields to return (that aren't returned by default)
                    type: array
                    items:
                        type: string
                        enum:
                            - BADGES
                            - BUSY_EVENTS
                            - DOCUMENT_ACTIVITY
                            - INVITE_INFO
                            - PEOPLE_DISTANCE
                            - PERMISSIONS
                            - PEOPLE_DETAILS
                            - MANAGEMENT_DETAILS
                            - PEOPLE_PROFILE_SETTINGS
                            - PEOPLE_WITHOUT_MANAGER
                includeTypes:
                    description: The types of people entities to include in the response in addition to those returned by default.
                    x-enumDescriptions:
                        PEOPLE_WITHOUT_MANAGER: Returns all people without a manager apart from the requested IDs.
                        INVALID_ENTITIES: Includes invalid entities in the response if any of the requested IDs are invalid.
                    type: array
                    items:
                        type: string
                        enum:
                            - PEOPLE_WITHOUT_MANAGER
                            - INVALID_ENTITIES
                source:
                    type: string
                    description: A string denoting the search surface from which the endpoint is called.
            example:
                obfuscatedIds:
                    - abc123
                    - abc456
        PeopleResponse:
            properties:
                results:
                    type: array
                    items:
                        $ref: "#/components/schemas/Person"
                    description: A Person for each ID in the request, each with PersonMetadata populated.
                relatedDocuments:
                    type: array
                    items:
                        $ref: "#/components/schemas/RelatedDocuments"
                    description: A list of documents related to this people response. This is only included if DOCUMENT_ACTIVITY is requested and only 1 person is included in the request.
                errors:
                    type: array
                    items:
                        type: string
                    description: A list of IDs that could not be found.
        CreateShortcutRequest:
            required:
                - data
            properties:
                data:
                    $ref: "#/components/schemas/ShortcutMutableProperties"
        ShortcutError:
            properties:
                errorType:
                    type: string
                    enum:
                        - NO_PERMISSION
                        - INVALID_ID
                        - EXISTING_SHORTCUT
                        - INVALID_CHARS
        CreateShortcutResponse:
            properties:
                shortcut:
                    $ref: "#/components/schemas/Shortcut"
                error:
                    $ref: "#/components/schemas/ShortcutError"
        DeleteShortcutRequest:
            allOf:
                - $ref: "#/components/schemas/UserGeneratedContentId"
                - type: object
                  required:
                    - id
        GetShortcutRequest:
            oneOf:
                - $ref: "#/components/schemas/UserGeneratedContentId"
                - type: object
                  required:
                    - alias
                  properties:
                    alias:
                        type: string
                        description: The alias for the shortcut, including any arguments for variable shortcuts.
        GetShortcutResponse:
            properties:
                shortcut:
                    $ref: "#/components/schemas/Shortcut"
                    description: Shortcut given the input alias with any provided arguments substituted into the destination URL.
                error:
                    $ref: "#/components/schemas/ShortcutError"
        ListShortcutsPaginatedRequest:
            required:
                - pageSize
            properties:
                includeFields:
                    description: Array of fields/data to be included in response that are not included by default
                    type: array
                    items:
                        type: string
                        enum:
                            - FACETS
                            - PEOPLE_DETAILS
                pageSize:
                    type: integer
                    example: 10
                cursor:
                    type: string
                    description: A token specifying the position in the overall results to start at. Received from the endpoint and iterated back. Currently being used as page no (as we implement offset pagination)
                filters:
                    type: array
                    items:
                        $ref: "#/components/schemas/FacetFilter"
                    description: A list of filters for the query. An AND is assumed between different filters. We support filters on Go Link name, author, department and type.
                sort:
                    $ref: "#/components/schemas/SortOptions"
                    description: Specifies fieldname to sort on and order (ASC|DESC) to sort in
                query:
                    type: string
                    description: Search query that should be a substring in atleast one of the fields (alias , inputAlias, destinationUrl, description). Empty query does not filter shortcuts.
        ShortcutsPaginationMetadata:
            properties:
                cursor:
                    type: string
                    description: Cursor indicates the start of the next page of results
                hasNextPage:
                    type: boolean
                totalItemCount:
                    type: integer
        ListShortcutsPaginatedResponse:
            required:
                - shortcuts
                - meta
            properties:
                shortcuts:
                    type: array
                    items:
                        $ref: "#/components/schemas/Shortcut"
                    description: List of all shortcuts accessible to the user
                facetResults:
                    type: array
                    items:
                        $ref: "#/components/schemas/FacetResult"
                meta:
                    $ref: "#/components/schemas/ShortcutsPaginationMetadata"
                    description: Contains metadata like total item count and whether next page exists
        UpdateShortcutRequest:
            allOf:
                - $ref: "#/components/schemas/UserGeneratedContentId"
                - $ref: "#/components/schemas/ShortcutMutableProperties"
                - type: object
                  required:
                    - id
        UpdateShortcutResponse:
            properties:
                shortcut:
                    $ref: "#/components/schemas/Shortcut"
                error:
                    $ref: "#/components/schemas/ShortcutError"
        SummarizeRequest:
            description: Summary of the document
            required:
                - documentSpecs
            properties:
                timestamp:
                    type: string
                    description: The ISO 8601 timestamp associated with the client request.
                    format: date-time
                query:
                    type: string
                    description: Optional query that the summary should be about
                preferredSummaryLength:
                    type: integer
                    description: Optional length of summary output. If not given, defaults to 500 chars.
                documentSpecs:
                    type: array
                    items:
                        $ref: "#/components/schemas/DocumentSpec"
                    description: Specifications of documents to summarize
                trackingToken:
                    type: string
                    description: An opaque token that represents this particular result. To be used for /feedback reporting.
        Summary:
            properties:
                text:
                    type: string
                followUpPrompts:
                    type: array
                    items:
                        type: string
                    description: Follow-up prompts based on the summarized doc
        SummarizeResponse:
            properties:
                error:
                    type: object
                    properties:
                        message:
                            type: string
                summary:
                    $ref: "#/components/schemas/Summary"
                trackingToken:
                    type: string
                    description: An opaque token that represents this summary in this particular query. To be used for /feedback reporting.
        ReminderRequest:
            required:
                - documentId
            properties:
                documentId:
                    type: string
                    description: The document which the verification is for new reminders and/or update.
                assignee:
                    type: string
                    description: The obfuscated id of the person this verification is assigned to.
                remindInDays:
                    type: integer
                    description: Reminder for the next verifications in terms of days. For deletion, this will be omitted.
                reason:
                    type: string
                    description: An optional free-text reason for the reminder. This is particularly useful when a reminder is used to ask for verification from another user (for example, "Duplicate", "Incomplete", "Incorrect").
        VerificationFeed:
            properties:
                documents:
                    type: array
                    items:
                        $ref: "#/components/schemas/Verification"
                    description: List of document infos that include verification related information for them.
        VerifyRequest:
            required:
                - documentId
            properties:
                documentId:
                    type: string
                    description: The document which is verified.
                action:
                    type: string
                    enum:
                        - VERIFY
                        - DEPRECATE
                        - UNVERIFY
                    description: The verification action requested.
        IndexDocumentRequest:
            type: object
            description: Describes the request body of the /indexdocument API call
            properties:
                version:
                    type: integer
                    format: int64
                    description: Version number for document for optimistic concurrency control. If absent or 0 then no version checks are done.
                document:
                    description: Document being added/updated
                    $ref: "#/components/schemas/DocumentDefinition"
            required:
                - document
        IndexDocumentsRequest:
            type: object
            description: Describes the request body of the /indexdocuments API call
            properties:
                uploadId:
                    type: string
                    description: Optional id parameter to identify and track a batch of documents.
                datasource:
                    type: string
                    description: Datasource of the documents
                documents:
                    description: Batch of documents being added/updated
                    type: array
                    items:
                        $ref: "#/components/schemas/DocumentDefinition"
            required:
                - documents
                - datasource
        UpdatePermissionsRequest:
            type: object
            description: Describes the request body of the /updatepermissions API call
            properties:
                datasource:
                    type: string
                objectType:
                    type: string
                    description: The type of the document (Case, KnowledgeArticle for Salesforce for example). It cannot have spaces or _
                id:
                    type: string
                    description: The datasource specific id for the document. This field is case insensitive and should not be more than 200 characters in length.
                viewURL:
                    type: string
                    description: |
                        The permalink for viewing the document. **Note: viewURL is a required field if id was not set when uploading the document.**'
                permissions:
                    $ref: "#/components/schemas/DocumentPermissionsDefinition"
                    description: The permissions that define who can view this document in the search results. Please refer to [this](https://developers.glean.com/docs/indexing_api_permissions/) for more details.
            required:
                - permissions
                - datasource
        GetDocumentCountRequest:
            type: object
            description: Describes the request body of the /getdocumentcount API call
            properties:
                datasource:
                    type: string
                    description: Datasource name for which document count is needed.
            required:
                - datasource
        GetDocumentCountResponse:
            type: object
            description: Describes the response body of the /getdocumentcount API call
            properties:
                documentCount:
                    type: integer
                    description: Number of documents corresponding to the specified custom datasource.
        GetDocumentStatusRequest:
            type: object
            description: Describes the request body for /getdocumentstatus API call
            properties:
                datasource:
                    type: string
                    description: Datasource to get fetch document status for
                objectType:
                    type: string
                    description: Object type of the document to get the status for
                docId:
                    type: string
                    description: Glean Document ID within the datasource to get the status for.
            required:
                - datasource
                - objectType
                - docId
        GetDocumentStatusResponse:
            type: object
            description: Describes the response body of the /getdocumentstatus API call
            properties:
                uploadStatus:
                    type: string
                    description: Upload status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN
                lastUploadedAt:
                    type: integer
                    format: int64
                    description: Time of last successful upload, in epoch seconds
                indexingStatus:
                    type: string
                    description: Indexing status, enum of NOT_INDEXED, INDEXED, STATUS_UNKNOWN
                lastIndexedAt:
                    type: integer
                    format: int64
                    description: Time of last successful indexing, in epoch seconds
        BulkIndexRequest:
            type: object
            description: Describes the request body of a bulk upload API call
            required:
                - uploadId
            properties:
                uploadId:
                    type: string
                    description: Unique id that must be used for this bulk upload instance
                isFirstPage:
                    type: boolean
                    description: true if this is the first page of the upload. Defaults to false
                isLastPage:
                    type: boolean
                    description: true if this is the last page of the upload. Defaults to false
                forceRestartUpload:
                    type: boolean
                    description: Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
        BulkIndexTeamsRequest:
            type: object
            description: Describes the request body of the /bulkindexteams API call
            allOf:
                - $ref: "#/components/schemas/BulkIndexRequest"
                - type: object
                  properties:
                    teams:
                        description: Batch of team information
                        type: array
                        items:
                            $ref: "#/components/schemas/TeamInfoDefinition"
                  required:
                    - teams
        BulkIndexEmployeesRequest:
            type: object
            description: Describes the request body of the /bulkindexemployees API call
            allOf:
                - $ref: "#/components/schemas/BulkIndexRequest"
                - type: object
                  properties:
                    employees:
                        description: Batch of employee information
                        type: array
                        items:
                            $ref: "#/components/schemas/EmployeeInfoDefinition"
                    disableStaleDataDeletionCheck:
                        type: boolean
                        description: True if older employee data needs to be force deleted after the upload completes. Defaults to older data being deleted only if the percentage of data being deleted is less than 20%. This must only be set when `isLastPage = true`
                  required:
                    - employees
        BulkIndexDocumentsRequest:
            type: object
            description: Describes the request body of the /bulkindexdocuments API call
            allOf:
                - $ref: "#/components/schemas/BulkIndexRequest"
                - type: object
                  properties:
                    datasource:
                        type: string
                        description: Datasource of the documents
                    documents:
                        description: Batch of documents for the datasource
                        type: array
                        items:
                            $ref: "#/components/schemas/DocumentDefinition"
                    disableStaleDocumentDeletionCheck:
                        type: boolean
                        description: True if older documents need to be force deleted after the upload completes. Defaults to older documents being deleted asynchronously. This must only be set when `isLastPage = true`
                  required:
                    - datasource
                    - documents
        ProcessAllDocumentsRequest:
            type: object
            description: Describes the request body of the /processalldocuments API call
            properties:
                datasource:
                    type: string
                    description: If provided, process documents only for this custom datasource. Otherwise all uploaded documents are processed.
        DeleteDocumentRequest:
            type: object
            description: Describes the request body of the /deletedocument API call
            properties:
                version:
                    type: integer
                    format: int64
                    description: Version number for document for optimistic concurrency control. If absent or 0 then no version checks are done.
                datasource:
                    type: string
                    description: datasource of the document
                objectType:
                    type: string
                    description: object type of the document
                id:
                    type: string
                    description: The id of the document
            required:
                - datasource
                - id
                - objectType
        IndexUserRequest:
            type: object
            description: Describes the request body of the /indexuser API call
            properties:
                version:
                    type: integer
                    format: int64
                    description: Version number for document for optimistic concurrency control. If absent or 0 then no version checks are done.
                datasource:
                    type: string
                    description: The datasource for which the user is added
                user:
                    description: The user to be added or updated
                    $ref: "#/components/schemas/DatasourceUserDefinition"
            required:
                - datasource
                - user
        GetUserCountRequest:
            type: object
            description: Describes the request body of the /getusercount API call
            properties:
                datasource:
                    type: string
                    description: Datasource name for which user count is needed.
            required:
                - datasource
        GetUserCountResponse:
            type: object
            description: Describes the response body of the /getusercount API call
            properties:
                userCount:
                    type: integer
                    description: Number of users corresponding to the specified custom datasource.
        BulkIndexUsersRequest:
            type: object
            description: Describes the request body for the /bulkindexusers API call
            properties:
                uploadId:
                    type: string
                    description: Unique id that must be used for this instance of datasource users upload
                isFirstPage:
                    type: boolean
                    description: true if this is the first page of the upload. Defaults to false
                isLastPage:
                    type: boolean
                    description: true if this is the last page of the upload. Defaults to false
                forceRestartUpload:
                    type: boolean
                    description: Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
                datasource:
                    type: string
                    description: datasource of the users
                users:
                    description: batch of users for the datasource
                    type: array
                    items:
                        $ref: "#/components/schemas/DatasourceUserDefinition"
                disableStaleDataDeletionCheck:
                    type: boolean
                    description: True if older user data needs to be force deleted after the upload completes. Defaults to older data being deleted only if the percentage of data being deleted is less than a reasonable threshold. This must only be set when `isLastPage = true`
            required:
                - uploadId
                - datasource
                - users
        GreenlistUsersRequest:
            type: object
            description: Describes the request body of the /betausers API call
            properties:
                datasource:
                    type: string
                    description: Datasource which needs to be made visible to users specified in the `emails` field.
                emails:
                    type: array
                    description: The emails of the beta users
                    items:
                        type: string
                        format: email
            required:
                - datasource
                - emails
        DatasourceUserDefinition:
            type: object
            description: describes a user in the datasource
            properties:
                email:
                    type: string
                userId:
                    description: To be supplied if the user id in the datasource is not the email
                    type: string
                name:
                    type: string
                isActive:
                    type: boolean
                    description: set to false if the user is a former employee or a bot
            required:
                - email
                - name
        IndexGroupRequest:
            type: object
            description: Describes the request body of the /indexgroup API call
            properties:
                version:
                    type: integer
                    format: int64
                    description: Version number for document for optimistic concurrency control. If absent or 0 then no version checks are done.
                datasource:
                    type: string
                    description: The datasource for which the group is added
                group:
                    description: The group to be added or updated
                    $ref: "#/components/schemas/DatasourceGroupDefinition"
            required:
                - datasource
                - group
        BulkIndexGroupsRequest:
            type: object
            description: Describes the request body for the /bulkindexgroups API call
            properties:
                uploadId:
                    type: string
                    description: Unique id that must be used for this instance of datasource groups upload
                isFirstPage:
                    type: boolean
                    description: true if this is the first page of the upload. Defaults to false
                isLastPage:
                    type: boolean
                    description: true if this is the last page of the upload. Defaults to false
                forceRestartUpload:
                    type: boolean
                    description: Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
                datasource:
                    type: string
                    description: datasource of the groups
                groups:
                    description: batch of groups for the datasource
                    type: array
                    items:
                        $ref: "#/components/schemas/DatasourceGroupDefinition"
                disableStaleDataDeletionCheck:
                    type: boolean
                    description: True if older group data needs to be force deleted after the upload completes. Defaults to older data being deleted only if the percentage of data being deleted is less than a reasonable threshold. This must only be set when `isLastPage = true`
            required:
                - uploadId
                - datasource
                - groups
        DatasourceGroupDefinition:
            type: object
            description: describes a group in the datasource
            properties:
                name:
                    type: string
                    description: name of the group. Should be unique among all groups for the datasource, and cannot have spaces.
            required:
                - name
        IndexMembershipRequest:
            type: object
            description: Describes the request body of the /indexmembership API call
            properties:
                version:
                    type: integer
                    format: int64
                    description: Version number for document for optimistic concurrency control. If absent or 0 then no version checks are done.
                datasource:
                    type: string
                    description: The datasource for which the membership is added
                membership:
                    description: The membership to be added or updated
                    $ref: "#/components/schemas/DatasourceMembershipDefinition"
            required:
                - datasource
                - membership
        BulkIndexMembershipsRequest:
            type: object
            description: Describes the request body for the /bulkindexmemberships API call
            properties:
                uploadId:
                    type: string
                    description: Unique id that must be used for this instance of datasource group memberships upload
                isFirstPage:
                    type: boolean
                    description: true if this is the first page of the upload. Defaults to false
                isLastPage:
                    type: boolean
                    description: true if this is the last page of the upload. Defaults to false
                forceRestartUpload:
                    type: boolean
                    description: Flag to discard previous upload attempts and start from scratch. Must be specified with isFirstPage=true
                datasource:
                    type: string
                    description: datasource of the memberships
                group:
                    type: string
                    description: group who's memberships are specified
                memberships:
                    description: batch of memberships for the group
                    type: array
                    items:
                        $ref: "#/components/schemas/DatasourceBulkMembershipDefinition"
            required:
                - uploadId
                - datasource
                - memberships
        ProcessAllMembershipsRequest:
            type: object
            description: Describes the request body of the /processallmemberships API call
            properties:
                datasource:
                    type: string
                    description: If provided, process group memberships only for this custom datasource. Otherwise all uploaded memberships are processed.
        DatasourceMembershipDefinition:
            type: object
            description: describes the membership row of a group. Only one of memberUserId and memberGroupName can be specified.
            properties:
                groupName:
                    description: The group for which the membership is specified
                    type: string
                memberUserId:
                    description: If the member is a user, then the email or datasource id for the user
                    type: string
                memberGroupName:
                    description: If the member is a group, then the name of the member group
                    type: string
            required:
                - groupName
        DatasourceBulkMembershipDefinition:
            type: object
            description: describes the membership row of a group in the bulk uploaded. Only one of memberUserId and memberGroupName can be specified.
            properties:
                memberUserId:
                    description: If the member is a user, then the email or datasource id for the user
                    type: string
                memberGroupName:
                    description: If the member is a group, then the name of the member group
                    type: string
        DeleteUserRequest:
            type: object
            description: Describes the request body of the /deleteuser API call
            properties:
                version:
                    type: integer
                    format: int64
                    description: Version number for document for optimistic concurrency control. If absent or 0 then no version checks are done.
                datasource:
                    type: string
                    description: The datasource for which the user is removed
                email:
                    description: The email of the user to be deleted
                    type: string
            required:
                - datasource
                - email
        DeleteGroupRequest:
            type: object
            description: Describes the request body of the /deletegroup API call
            properties:
                version:
                    type: integer
                    format: int64
                    description: Version number for document for optimistic concurrency control. If absent or 0 then no version checks are done.
                datasource:
                    type: string
                    description: The datasource for which the group is removed
                groupName:
                    description: the name of the group to be deleted
                    type: string
            required:
                - datasource
                - groupName
        DeleteMembershipRequest:
            type: object
            description: Describes the request body of the /deletemembership API call
            properties:
                version:
                    type: integer
                    format: int64
                    description: Version number for document for optimistic concurrency control. If absent or 0 then no version checks are done.
                datasource:
                    type: string
                    description: The datasource for which the membership is removed
                membership:
                    description: the name of the membership to be deleted
                    $ref: "#/components/schemas/DatasourceMembershipDefinition"
            required:
                - datasource
                - membership
        DeleteEmployeeRequest:
            type: object
            description: Describes the request body of the /deleteemployee API call
            properties:
                version:
                    type: integer
                    format: int64
                    description: Version number for document for optimistic concurrency control. If absent or 0 then no version checks are done.
                employeeEmail:
                    description: The deleted employee's email
                    type: string
            required:
                - employeeEmail
        DeleteTeamRequest:
            type: object
            description: Describes the request body of the /deleteteam API call
            properties:
                id:
                    description: The deleted team's id
                    type: string
            required:
                - id
        DocumentDefinition:
            type: object
            description: Indexable document structure
            properties:
                title:
                    type: string
                    description: Document title, in plain text, if present. If not present, the title would be attempted to be extracted from the content.
                filename:
                    type: string
                    description: Source filename, in plain text, for the document. May be used as a fallback title for the document, if the title is not provided and cannot be extracted from the content. Populate this if there is no explicit title for the document and the content is sourced from a file.
                container:
                    type: string
                    description: The container name for the content (Folder for example for file content).
                containerDatasourceId:
                    type: string
                    description: This represents the datasource sepcific id of the container.
                containerObjectType:
                    type: string
                    description: This represents the object type of the container. It cannot have spaces or _
                datasource:
                    type: string
                objectType:
                    type: string
                    description: The type of the document (Case, KnowledgeArticle for Salesforce for example). It cannot have spaces or _
                viewURL:
                    type: string
                    description: |
                        The permalink for viewing the document. **Note: viewURL is a required field for non-entity datasources, but not required if the datasource is used to push custom entities (ie. datasources where isEntityDatasource is false).**'
                id:
                    type: string
                    description: The datasource specific id for the document. This field is case insensitive and should not be more than 200 characters in length.
                summary:
                    $ref: "#/components/schemas/ContentDefinition"
                body:
                    $ref: "#/components/schemas/ContentDefinition"
                author:
                    $ref: "#/components/schemas/UserReferenceDefinition"
                owner:
                    $ref: "#/components/schemas/UserReferenceDefinition"
                    description: The current owner of the document, if not the author.
                permissions:
                    $ref: "#/components/schemas/DocumentPermissionsDefinition"
                    description: The permissions that define who can view this document in the search results. Please refer to [this](https://developers.glean.com/docs/indexing_api_permissions/) for more details.
                createdAt:
                    type: integer
                    format: int64
                    description: The creation time, in epoch seconds.
                updatedAt:
                    type: integer
                    format: int64
                    description: The last update time, in epoch seconds.
                updatedBy:
                    $ref: "#/components/schemas/UserReferenceDefinition"
                tags:
                    type: array
                    items:
                        type: string
                    description: Labels associated with the document.
                interactions:
                    $ref: "#/components/schemas/DocumentInteractionsDefinition"
                status:
                    type: string
                additionalUrls:
                    type: array
                    items:
                        type: string
                    description: Additional variations of the URL that this document points to.
                comments:
                    type: array
                    items:
                        $ref: "#/components/schemas/CommentDefinition"
                    description: Comments associated with the document.
                customProperties:
                    type: array
                    items:
                        $ref: "#/components/schemas/CustomProperty"
                    description: Additional metadata properties of the document. These can surface as [facets and operators](https://developers.glean.com/docs/facets_and_operators_for_custom_datasources/).
            required:
                - datasource
        CommentDefinition:
            type: object
            description: Describes a comment on a document
            properties:
                id:
                    type: string
                    description: The document specific id for the comment. This field is case insensitive and should not be more than 200 characters in length.
                author:
                    $ref: "#/components/schemas/UserReferenceDefinition"
                    description: The author of the comment.
                content:
                    $ref: "#/components/schemas/ContentDefinition"
                    description: The content of the comment.
                createdAt:
                    type: integer
                    format: int64
                    description: The creation time, in epoch seconds.
                updatedAt:
                    type: integer
                    format: int64
                    description: The last updated time, in epoch seconds.
                updatedBy:
                    $ref: "#/components/schemas/UserReferenceDefinition"
                    description: The user who last updated the comment.
            required:
                - id
        ContentDefinition:
            type: object
            description: Describes text content or base64 encoded binary content
            properties:
                mimeType:
                    type: string
                textContent:
                    type: string
                    description: text content. Only one of textContent or binary content can be specified
                binaryContent:
                    type: string
                    description: base64 encoded binary content. Only one of textContent or binary content can be specified
            required:
                - mimeType
        UserReferenceDefinition:
            type: object
            description: Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
            properties:
                email:
                    type: string
                datasourceUserId:
                    type: string
                    description: some datasources refer to the user by the datasource user id in the document
                name:
                    type: string
        PermissionsGroupIntersectionDefinition:
            type: object
            description: describes a list of groups that are all required in a permissions constraint
            properties:
                requiredGroups:
                    type: array
                    items:
                        type: string
        DocumentPermissionsDefinition:
            type: object
            description: describes the access control details of the document
            properties:
                allowedUsers:
                    description: List of users who can view the document
                    type: array
                    items:
                        $ref: "#/components/schemas/UserReferenceDefinition"
                allowedGroups:
                    description: List of groups that can view the document
                    type: array
                    items:
                        type: string
                allowedGroupIntersections:
                    description: List of allowed group intersections. This describes a permissions constraint of the form ((GroupA AND GroupB AND GroupC) OR (GroupX AND GroupY) OR ...
                    type: array
                    items:
                        $ref: "#/components/schemas/PermissionsGroupIntersectionDefinition"
                allowAnonymousAccess:
                    description: If true, then any Glean user can view the document
                    type: boolean
                allowAllDatasourceUsersAccess:
                    description: If true, then any user who has an account in the datasource can view the document.
                    type: boolean
        DocumentInteractionsDefinition:
            type: object
            description: describes the interactions on the document
            properties:
                numViews:
                    type: integer
                numLikes:
                    type: integer
                numComments:
                    type: integer
        CheckDocumentAccessRequest:
            type: object
            description: Describes the request body of the /checkdocumentaccess API call
            properties:
                datasource:
                    type: string
                    description: Datasource of document to check access for.
                objectType:
                    type: string
                    description: Object type of document to check access for.
                docId:
                    type: string
                    description: Glean Document ID to check access for.
                userEmail:
                    type: string
                    description: Email of user to check access for.
            required:
                - datasource
                - objectType
                - docId
                - userEmail
        CheckDocumentAccessResponse:
            type: object
            description: Describes the response body of the /checkdocumentaccess API call
            properties:
                hasAccess:
                    type: boolean
                    description: If true, user has access to document for search
        CustomProperty:
            type: object
            description: Describes the custom properties of the object.
            properties:
                name:
                    type: string
                value:
                    description: Must either be a string or an array of strings. An integer, boolean, etc. is not valid. When OpenAPI Generator supports `oneOf`, we can semantically enforce this.
        DatasourceConfig:
            $ref: "#/components/schemas/SharedDatasourceConfig"
        GetDatasourceConfigRequest:
            type: object
            description: Describes the request body of the /getdatasourceconfig API call
            properties:
                datasource:
                    type: string
                    description: Datasource name for which config is needed.
            required:
                - datasource
        DatasourceConfigList:
            description: List of datasource configurations.
            required:
                - datasourceConfig
            properties:
                datasourceConfig:
                    type: array
                    description: Datasource configuration.
                    items:
                        $ref: "#/components/schemas/SharedDatasourceConfig"
        RotateTokenResponse:
            description: Describes the response body of the /rotatetoken API call
            properties:
                rawSecret:
                    type: string
                    description: New raw secret
                createdAt:
                    type: integer
                    format: int64
                    description: Unix timestamp in seconds when the new secret value is assigned to the token. The token needs to be rotated before `rotationPeriodMinutes` past the createdAt timestamp otherwise it would be rendered unusable.
                rotationPeriodMinutes:
                    type: integer
                    format: int64
                    description: Refers to the time period in minutes before which this token needs to be rotated. It is required to rotate the token within the specified `rotationPeriodMinutes` after each `/rotatetoken` call, otherwise the tokens would expire. Note that the token would still expire at `expiresAt` timestamp provided during token creation even if the token is being regularly rotated. `rotationPeriodMinutes` property is inherited from the parent token being rotated
        IndexEmployeeRequest:
            type: object
            description: Info about an employee and optional version for that info
            properties:
                employee:
                    description: Info about the employee
                    $ref: "#/components/schemas/EmployeeInfoDefinition"
                version:
                    description: Version number for the employee object. If absent or 0 then no version checks are done
                    type: integer
                    format: int64
            required:
                - employee
        IndexEmployeeListRequest:
            type: object
            description: Describes the request body of the /indexemployeelist API call
            properties:
                employees:
                    description: List of employee info and version.
                    type: array
                    items:
                        $ref: "#/components/schemas/IndexEmployeeRequest"
        SocialNetworkDefinition:
            type: object
            description: Employee's social network profile
            properties:
                name:
                    type: string
                    description: Possible values are "twitter", "linkedin".
                profileName:
                    type: string
                    description: Human-readable profile name.
                profileUrl:
                    type: string
                    description: Link to profile.
        AdditionalFieldDefinition:
            type: object
            description: Additional information about the employee or team.
            properties:
                key:
                    type: string
                    description: Key to reference this field, e.g. "languages". Note that the key should be all lowercase alphabetic characters with no numbers, spaces, hyphens or underscores.
                value:
                    type: array
                    description: |
                        List of type string or HypertextField.

                        HypertextField is defined as
                        ```
                        {
                          anchor: string,    // Anchor text for the hypertext field.
                          hyperlink: string, // URL for the hypertext field.
                        }
                        ```
                        Example: ```{"anchor":"Glean","hyperlink":"https://glean.com"}```

                        When OpenAPI Generator supports oneOf, we will semantically enforce this in the docs.

                        **Note**: If using the Python SDK to pass in a list of strings, the value may need to be a list of dictionaries. In that case, the key in that dictionary will be ignored.
                        Example: ```"languages": [{"lang":"English","lang":"Spanish",...}]```. In this case, the key "lang" will be ignored and can even be passed in as an empty string.
                    items:
                        type: object
                        description: Either a string or HypertextField. When OpenAPI Generator supports oneOf, we can semantically enforce this in the docs.
        HypertextField:
            type: object
            properties:
                anchor:
                    type: string
                    description: Anchor text for the hypertext field.
                hyperlink:
                    type: string
                    description: URL for the hypertext field.
        EmployeeInfoDefinition:
            type: object
            description: Describes employee info
            properties:
                email:
                    type: string
                    description: The employee's email
                firstName:
                    type: string
                    description: |
                        The first name of the employee. **Note**: The value cannot be empty
                lastName:
                    type: string
                    description: |
                        The last name of the employee. **Note**: The value cannot be empty
                preferredName:
                    type: string
                    description: The preferred name or nickname of the employee
                id:
                    type: string
                    description: |
                        **[Advanced]** A unique universal internal identifier for the employee. This is solely used for understanding manager relationships along with `managerId`.
                phoneNumber:
                    type: string
                    description: The employee's phone number.
                location:
                    type: string
                    description: The employee's location (city/office name etc).
                    deprecated: true
                structuredLocation:
                    description: Detailed location with information about country, state, city etc.
                    $ref: "#/components/schemas/StructuredLocation"
                title:
                    type: string
                    description: The employee's role title.
                photoUrl:
                    type: string
                    format: uri
                    description: The employee's profile pic
                businessUnit:
                    type: string
                    description: Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
                department:
                    type: string
                    description: An organizational unit where everyone has a similar task, e.g. `Engineering`.
                datasourceProfiles:
                    type: array
                    description: The datasource profiles of the employee, e.g. `Slack`,`Github`.
                    items:
                        $ref: "#/components/schemas/DatasourceProfile"
                teams:
                    type: array
                    description: Info about the employee's team(s)
                    items:
                        $ref: "#/components/schemas/EmployeeTeamInfo"
                startDate:
                    type: string
                    format: date
                    description: The date when the employee started
                endDate:
                    type: string
                    format: date
                    description: If a former employee, the last date of employment.
                bio:
                    type: string
                    description: Short biography or mission statement of the employee.
                pronoun:
                    type: string
                    description: She/her, He/his or other pronoun.
                alsoKnownAs:
                    type: array
                    description: Other names associated with the employee.
                    items:
                        type: string
                profileUrl:
                    type: string
                    description: Link to internal company person profile.
                socialNetworks:
                    type: array
                    description: List of social network profiles.
                    items:
                        $ref: "#/components/schemas/SocialNetworkDefinition"
                managerEmail:
                    type: string
                    description: The email of the employee's manager
                managerId:
                    type: string
                    description: |
                        **[Advanced]** A unique universal internal identifier for the employee's manager. This is solely used in conjunction with `id`.
                type:
                    type: string
                    description: The type of the employee, an enum of `FULL_TIME`, `CONTRACTOR`, `NON_EMPLOYEE`
                    default: FULL_TIME
                relationships:
                    type: array
                    description: List of unidirectional relationships with other employees. E.g. this employee (`A`) is a CHIEF_OF_STAFF to another employee (`B`); or this employee (`A`) is an EXECUTIVE_ASSISTANT of another employee (`C`). The mapping should be attached to `A`'s profile.
                    items:
                        $ref: "#/components/schemas/EntityRelationship"
                status:
                    type: string
                    description: The status of the employee, an enum of `CURRENT`, `FUTURE`, `EX`
                    default: CURRENT
                additionalFields:
                    type: array
                    description: List of additional fields with more information about the employee.
                    items:
                        $ref: "#/components/schemas/AdditionalFieldDefinition"
            required:
                - department
                - email
        EmployeeAndVersionDefinition:
            type: object
            description: describes info about an employee and optional version for that info
            properties:
                employee:
                    description: Info about the employee
                    $ref: "#/components/schemas/EmployeeInfoDefinition"
                version:
                    description: Version number for the employee object. If absent or 0 then no version checks are done
                    type: integer
                    format: int64
            required:
                - info
        EmployeeTeamInfo:
            type: object
            description: Information about which team an employee belongs to
            properties:
                id:
                    type: string
                    description: unique identifier for this team
                name:
                    type: string
                    description: Team name
                url:
                    type: string
                    format: uri
                    description: Link to internal company team page
        EntityRelationship:
            type: object
            description: Describes a relationship edge between a source and destination entity
            required:
                - name
                - email
            properties:
                name:
                    type: string
                    description: The title or type of relationship. Currently an enum of `CHIEF_OF_STAFF`, `EXECUTIVE_ASSISTANT`
                email:
                    type: string
                    description: Email of the person with whom the relationship exists. Per the example above, either `B` or `C`'s email depending on the relationship.
        TeamMember:
            type: object
            description: Information about a team's member
            properties:
                email:
                    type: string
                    description: The member's email
                    format: email
                relationship:
                    type: string
                    description: The member's relationship to the team, an enum of `MEMBER`, `MANAGER`, `LEAD`, `POINT_OF_CONTACT`, `OTHER`
                    default: MEMBER
                join_date:
                    type: string
                    format: date
                    description: The member's start date
            required:
                - email
        TeamInfoDefinition:
            type: object
            description: Information about an employee's team
            properties:
                id:
                    type: string
                    description: The unique ID of the team
                name:
                    type: string
                    description: Human-readable team name
                description:
                    type: string
                    description: The description of this team
                businessUnit:
                    type: string
                    description: Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
                department:
                    type: string
                    description: An organizational unit where everyone has a similar task, e.g. `Engineering`.
                photoUrl:
                    type: string
                    format: uri
                    description: A link to the team's photo
                externalLink:
                    type: string
                    format: uri
                    description: |
                        A link to an external team page. If set, team results will link to it.
                emails:
                    type: array
                    description: The emails of the team
                    items:
                        $ref: "#/components/schemas/TeamEmail"
                datasourceProfiles:
                    type: array
                    description: The datasource profiles of the team, e.g. `Slack`,`Github`.
                    items:
                        $ref: "#/components/schemas/DatasourceProfile"
                members:
                    type: array
                    description: The members of the team
                    items:
                        $ref: "#/components/schemas/TeamMember"
                additionalFields:
                    type: array
                    description: List of additional fields with more information about the team.
                    items:
                        $ref: "#/components/schemas/AdditionalFieldDefinition"
            required:
                - id
                - members
                - name
        IndexTeamRequest:
            type: object
            description: Info about a team and optional version for that info
            properties:
                team:
                    description: Info about the team
                    $ref: "#/components/schemas/TeamInfoDefinition"
                version:
                    description: Version number for the team object. If absent or 0 then no version checks are done
                    type: integer
                    format: int64
            required:
                - team
        BulkIndexShortcutsRequest:
            type: object
            description: Describes the request body of the /bulkindexshortcuts API call
            allOf:
                - $ref: "#/components/schemas/BulkIndexRequest"
                - type: object
                  properties:
                    shortcuts:
                        description: Batch of shortcuts information
                        type: array
                        items:
                            $ref: "#/components/schemas/ExternalShortcut"
                  required:
                    - shortcuts
        UploadShortcutsRequest:
            type: object
            description: Describes the request body of the /uploadshortcuts API call
            allOf:
                - $ref: "#/components/schemas/BulkIndexRequest"
                - type: object
                  properties:
                    shortcuts:
                        description: Batch of shortcuts information
                        type: array
                        items:
                            $ref: "#/components/schemas/IndexingShortcut"
                  required:
                    - shortcuts
        DebugDatasourceStatusResponse:
            type: object
            description: Describes the response body of the /debug/{datasource}/status API call
            properties:
                documents:
                    type: object
                    properties:
                        bulkUploadHistory:
                            type: object
                            $ref: "#/components/schemas/BulkUploadHistoryEventList"
                        counts:
                            type: object
                            properties:
                                uploaded:
                                    type: array
                                    items:
                                        $ref: "#/components/schemas/DatasourceObjectTypeDocumentCountEntry"
                                    description: A list of object types and corresponding upload counts
                                indexed:
                                    type: array
                                    description: The number of documents indexed, grouped by objectType
                                    items:
                                        $ref: "#/components/schemas/DatasourceObjectTypeDocumentCountEntry"
                        processingHistory:
                            $ref: "#/components/schemas/ProcessingHistoryEventList"
                identity:
                    type: object
                    properties:
                        processingHistory:
                            $ref: "#/components/schemas/ProcessingHistoryEventList"
                        users:
                            $ref: "#/components/schemas/DebugDatasourceStatusIdentityResponseComponent"
                        groups:
                            $ref: "#/components/schemas/DebugDatasourceStatusIdentityResponseComponent"
                        memberships:
                            $ref: "#/components/schemas/DebugDatasourceStatusIdentityResponseComponent"
                datasourceVisibility:
                    type: string
                    description: The visibility of the datasource, an enum of VISIBLE_TO_ALL, VISIBLE_TO_TEST_GROUP, NOT_VISIBLE
                    enum:
                        - ENABLED_FOR_ALL
                        - ENABLED_FOR_TEST_GROUP
                        - NOT_ENABLED
                    example: ENABLED_FOR_ALL
        DebugDatasourceStatusIdentityResponseComponent:
            type: object
            properties:
                bulkUploadHistory:
                    type: object
                    $ref: "#/components/schemas/BulkUploadHistoryEventList"
                counts:
                    type: object
                    properties:
                        uploaded:
                            type: integer
                            description: The number of users/groups/memberships uploaded
                            example: 15
        DatasourceObjectTypeDocumentCountEntry:
            type: object
            properties:
                objectType:
                    type: string
                    description: The object type of the document
                    example: Article
                count:
                    type: integer
                    description: The number of documents of the corresponding objectType
                    example: 15
        BulkUploadHistoryEvent:
            type: object
            description: Information about a successful bulk upload
            properties:
                uploadId:
                    type: string
                    description: The unique ID of the upload
                    example: upload-id-content-1707403081
                startTime:
                    type: string
                    description: The start time of the upload in ISO 8601 format
                    example: "2021-08-06T17:58:01.000Z"
                endTime:
                    type: string
                    description: The end time of the upload in ISO 8601 format, 'NA' if the upload is still active
                    example: "2021-08-06T18:58:01.000Z"
                status:
                    type: string
                    description: The status of the upload, an enum of ACTIVE, SUCCESSFUL
                    enum:
                        - ACTIVE
                        - SUCCESSFUL
                    example: SUCCESSFUL
                processingState:
                    type: string
                    description: The current state of the upload, an enum of UNAVAILABLE, UPLOAD STARTED, UPLOAD IN PROGRESS, UPLOAD COMPLETED, DELETION PAUSED, INDEXING COMPLETED
                    enum:
                        - UNAVAILABLE
                        - UPLOAD STARTED
                        - UPLOAD IN PROGRESS
                        - UPLOAD COMPLETED
                        - DELETION PAUSED
                        - INDEXING COMPLETED
                    example: UPLOAD COMPLETED
        BulkUploadHistoryEventList:
            description: Information about active and recent successful uploads for the datasource
            type: array
            items:
                $ref: "#/components/schemas/BulkUploadHistoryEvent"
        DebugDocumentRequest:
            type: object
            description: Describes the request body of the /debug/{datasource}/document API call.
            properties:
                objectType:
                    type: string
                    description: Object type of the document to get the status for.
                    example: Article
                docId:
                    type: string
                    description: Glean Document ID within the datasource to get the status for.
                    example: art123
            required:
                - objectType
                - docId
        DebugDocumentResponse:
            type: object
            description: Describes the response body of the /debug/{datasource}/document API call
            properties:
                status:
                    type: object
                    description: Upload and indexing status of the document
                    $ref: "#/components/schemas/DocumentStatusResponse"
                uploadedPermissions:
                    $ref: "#/components/schemas/DocumentPermissionsDefinition"
        DebugDocumentsRequest:
            type: object
            description: Describes the request body of the /debug/{datasource}/documents API call.
            properties:
                debugDocuments:
                    type: array
                    description: Documents to fetch debug information for
                    items:
                        $ref: "#/components/schemas/DebugDocumentRequest"
            required:
                - debugDocuments
        DebugDocumentsResponseItem:
            type: object
            description: Describes the response body of a single document in the /debug/{datasource}/documents API call
            properties:
                docId:
                    type: string
                    description: Id of the document
                objectType:
                    type: string
                    description: objectType of the document
                debugInfo:
                    type: object
                    description: Debug information of the document
                    $ref: "#/components/schemas/DebugDocumentResponse"
        DebugDocumentsResponse:
            type: object
            description: Describes the response body of a single document in the /debug/{datasource}/documents API call
            properties:
                documentStatuses:
                    type: array
                    description: List of document ids/urls and their debug information
                    items:
                        $ref: "#/components/schemas/DebugDocumentsResponseItem"
        DocumentStatusResponse:
            type: object
            description: Describes the document status response body
            properties:
                uploadStatus:
                    type: string
                    description: Upload status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN
                    example: UPLOADED
                lastUploadedAt:
                    type: string
                    description: Time of last successful upload for the document, in ISO 8601 format
                    example: "2021-08-06T17:58:01.000Z"
                indexingStatus:
                    type: string
                    description: Indexing status, enum of NOT_INDEXED, INDEXED, STATUS_UNKNOWN
                    example: INDEXED
                lastIndexedAt:
                    type: string
                    description: Time of last successful indexing for the document, in ISO 8601 format
                    example: "2021-08-06T17:58:01.000Z"
                permissionIdentityStatus:
                    type: string
                    description: Permission identity status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN (Always unknown if `identityDatasourceName` is set). Document visibility may be affected status is `NOT_UPLOADED`.
                    example: UPLOADED
        ProcessingHistoryEvent:
            type: object
            description: Processing history event for a datasource
            properties:
                startTime:
                    type: string
                    description: The start time of the processing in ISO 8601 format
                    example: "2021-08-06T17:58:01.000Z"
                endTime:
                    type: string
                    description: The end time of the processing in ISO 8601 format, 'NA' if still in progress
                    example: "2021-08-06T18:58:01.000Z"
        ProcessingHistoryEventList:
            description: Information about processing history for the datasource
            type: array
            items:
                $ref: "#/components/schemas/ProcessingHistoryEvent"
        DebugUserRequest:
            type: object
            description: Describes the request body of the /debug/{datasource}/user API call
            properties:
                email:
                    type: string
                    description: Email ID of the user to get the status for
                    example: u1@foo.com
            required:
                - email
        DebugUserResponse:
            type: object
            description: Describes the response body of the /debug/{datasource}/user API call
            properties:
                status:
                    type: object
                    description: Upload and indexing status of the user
                    $ref: "#/components/schemas/UserStatusResponse"
                uploadedGroups:
                    type: array
                    description: List of groups the user is a member of, as uploaded via permissions API.
                    items:
                        $ref: "#/components/schemas/DatasourceGroupDefinition"
        UserStatusResponse:
            type: object
            description: Describes the user status response body
            properties:
                isActiveUser:
                    type: boolean
                    description: Whether the user is active or not
                    example: true
                uploadStatus:
                    $ref: "#/components/schemas/UploadStatusEnum"
                lastUploadedAt:
                    type: string
                    description: Time of last successful upload for the user, in ISO 8601 format
                    example: "2021-08-06T17:58:01.000Z"
        UploadStatusEnum:
            type: string
            description: Upload status, enum of NOT_UPLOADED, UPLOADED, STATUS_UNKNOWN
            enum:
                - UPLOADED
                - NOT_UPLOADED
                - STATUS_UNKNOWN
            example: UPLOADED
        PropertyDefinition:
            properties:
                name:
                    type: string
                    description: The name of the property in the `DocumentMetadata` (e.g. 'createTime', 'updateTime', 'author', 'container'). In the future, this will support custom properties too.
                displayLabel:
                    type: string
                    description: The user friendly label for the property.
                displayLabelPlural:
                    type: string
                    description: The user friendly label for the property that will be used if a plural context.
                propertyType:
                    type: string
                    enum:
                        - TEXT
                        - DATE
                        - INT
                        - USERID
                        - PICKLIST
                        - TEXTLIST
                        - MULTIPICKLIST
                    description: The type of custom property - this governs the search and faceting behavior. Note that MULTIPICKLIST is not yet supported.
                uiOptions:
                    type: string
                    enum:
                        - NONE
                        - SEARCH_RESULT
                        - DOC_HOVERCARD
                hideUiFacet:
                    type: boolean
                    description: If true then the property will not show up as a facet in the UI.
                uiFacetOrder:
                    type: integer
                    description: Will be used to set the order of facets in the UI, if present. If set for one facet, must be set for all non-hidden UI facets. Must take on an integer value from 1 (shown at the top) to N (shown last), where N is the number of non-hidden UI facets. These facets will be ordered below the built-in "Type" and "Tag" operators.
                skipIndexing:
                    type: boolean
                    description: If true then the property will not be indexed for retrieval and ranking.
                group:
                    type: string
                    description: The unique identifier of the `PropertyGroup` to which this property belongs.
        PropertyGroup:
            description: A grouping for multiple PropertyDefinition. Grouped properties will be displayed together in the UI.
            properties:
                name:
                    type: string
                    description: The unique identifier of the group.
                displayLabel:
                    type: string
                    description: The user-friendly group label to display.
        ObjectDefinition:
            description: The definition for an `DocumentMetadata.objectType` within a datasource.
            properties:
                name:
                    type: string
                    description: Unique identifier for this `DocumentMetadata.objectType`. If omitted, this definition is used as a default for all unmatched `DocumentMetadata.objectType`s in this datasource.
                displayLabel:
                    type: string
                    description: The user-friendly name of the object for display.
                docCategory:
                    type: string
                    enum:
                        - UNCATEGORIZED
                        - TICKETS
                        - CRM
                        - PUBLISHED_CONTENT
                        - COLLABORATIVE_CONTENT
                        - QUESTION_ANSWER
                        - MESSAGING
                        - CODE_REPOSITORY
                        - CHANGE_MANAGEMENT
                        - PEOPLE
                        - EMAIL
                        - SSO
                        - ATS
                        - KNOWLEDGE_HUB
                        - EXTERNAL_SHORTCUT
                        - ENTITY
                        - CALENDAR
                    description: The document category of this object type.
                propertyDefinitions:
                    type: array
                    items:
                        $ref: "#/components/schemas/PropertyDefinition"
                propertyGroups:
                    type: array
                    description: A list of `PropertyGroup`s belonging to this object type, which will group properties to be displayed together in the UI.
                    items:
                        $ref: "#/components/schemas/PropertyGroup"
                summarizable:
                    description: Whether or not the object is summarizable
                    type: boolean
        CanonicalizingRegexType:
            description: Regular expression to apply to an arbitrary string to transform it into a canonical string.
            properties:
                matchRegex:
                    type: string
                    description: Regular expression to match to an arbitrary string.
                rewriteRegex:
                    type: string
                    description: Regular expression to transform into a canonical string.
        SharedDatasourceConfigNoInstance:
            type: object
            description: Structure describing shared config properties of a datasource with no multi-instance support.
            required:
                - name
            properties:
                name:
                    type: string
                    description: Unique identifier of datasource instance to which this config applies.
                displayName:
                    type: string
                    description: The user-friendly instance label to display. If omitted, falls back to the title-cased `name`.
                datasourceCategory:
                    type: string
                    enum:
                        - UNCATEGORIZED
                        - TICKETS
                        - CRM
                        - PUBLISHED_CONTENT
                        - COLLABORATIVE_CONTENT
                        - QUESTION_ANSWER
                        - MESSAGING
                        - CODE_REPOSITORY
                        - CHANGE_MANAGEMENT
                        - PEOPLE
                        - EMAIL
                        - SSO
                        - ATS
                        - KNOWLEDGE_HUB
                        - EXTERNAL_SHORTCUT
                        - ENTITY
                        - CALENDAR
                    default: UNCATEGORIZED
                    description: The type of this datasource. It is an important signal for relevance and must be specified and cannot be UNCATEGORIZED. Please refer to [this](https://developers.glean.com/docs/indexing_api_datasource_category/) for more details.
                urlRegex:
                    type: string
                    description: "Regular expression that matches URLs of documents of the datasource instance. The behavior for multiple matches is non-deterministic. **Note: `urlRegex` is a required field for non-entity datasources, but not required if the datasource is used to push custom entities (ie. datasources where isEntityDatasource is false). Please add a regex as specific as possible to this datasource instance.**"
                    example: https://example-company.datasource.com/.*
                iconUrl:
                    type: string
                    description: The URL to an image to be displayed as an icon for this datasource instance. Must have a transparency mask. SVG are recommended over PNG. Public, scio-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
                objectDefinitions:
                    type: array
                    description: The list of top-level `objectType`s for the datasource.
                    items:
                        $ref: "#/components/schemas/ObjectDefinition"
                suggestionText:
                    type: string
                    description: Example text for what to search for in this datasource
                homeUrl:
                    type: string
                    description: The URL of the landing page for this datasource instance. Should point to the most useful page for users, not the company marketing page.
                crawlerSeedUrls:
                    type: array
                    description: This only applies to WEB_CRAWL and BROWSER_CRAWL datasources. Defines the seed URLs for crawling.
                    items:
                        type: string
                iconDarkUrl:
                    type: string
                    description: The URL to an image to be displayed as an icon for this datasource instance in dark mode. Must have a transparency mask. SVG are recommended over PNG. Public, scio-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
                hideBuiltInFacets:
                    type: array
                    description: List of built-in facet types that should be hidden for the datasource.
                    items:
                        type: string
                        enum:
                            - TYPE
                            - TAG
                            - AUTHOR
                            - OWNER
                canonicalizingURLRegex:
                    type: array
                    description: A list of regular expressions to apply to an arbitrary URL to transform it into a canonical URL for this datasource instance. Regexes are to be applied in the order specified in this list.
                    items:
                        $ref: "#/components/schemas/CanonicalizingRegexType"
                canonicalizingTitleRegex:
                    type: array
                    description: A list of regular expressions to apply to an arbitrary title to transform it into a title that will be displayed in the search results
                    items:
                        $ref: "#/components/schemas/CanonicalizingRegexType"
                redlistTitleRegex:
                    type: string
                    description: A regex that identifies titles that should not be indexed
                connectorType:
                    allOf:
                        - $ref: "#/components/schemas/ConnectorType"
                    type: string
                quicklinks:
                    type: array
                    description: List of actions for this datasource instance that will show up in autocomplete and app card, e.g. "Create new issue" for jira
                    items:
                        $ref: "#/components/schemas/Quicklink"
                renderConfigPreset:
                    type: string
                    description: The name of a render config to use for displaying results from this datasource. Any well known datasource name may be used to render the same as that source, e.g. `web` or `gdrive`. Please refer to [this](https://developers.glean.com/docs/rendering_search_results/) for more details
                aliases:
                    type: array
                    description: Aliases that can be used as `app` operator-values.
                    items:
                        type: string
                isOnPrem:
                    type: boolean
                    description: Whether or not this datasource is hosted on-premise.
                trustUrlRegexForViewActivity:
                    type: boolean
                    default: true
                    description: True if browser activity is able to report the correct URL for VIEW events. Set this to true if the URLs reported by Chrome are constant throughout each page load. Set this to false if the page has Javascript that modifies the URL during or after the load.
                includeUtmSource:
                    type: boolean
                    description: If true, a utm_source query param will be added to outbound links to this datasource within Glean.
                stripFragmentInCanonicalUrl:
                    type: boolean
                    default: true
                    description: If true, the fragment part of the URL will be stripped when converting to a canonical url.
        CustomDatasourceConfig:
            description: Structure describing config properties of a custom datasource
            allOf:
                - $ref: "#/components/schemas/SharedDatasourceConfigNoInstance"
                - type: object
                  properties:
                    identityDatasourceName:
                        type: string
                        description: If the datasource uses another datasource for identity info, then the name of the datasource. The identity datasource must exist already.
                    productAccessGroup:
                        type: string
                        description: If the datasource uses a specific product access group, then the name of that group.
                    isUserReferencedByEmail:
                        type: boolean
                        description: whether email is used to reference users in document ACLs and in group memberships.
                    isEntityDatasource:
                        type: boolean
                        default: false
                        description: True if this datasource is used to push custom entities.
                    isTestDatasource:
                        type: boolean
                        default: false
                        description: True if this datasource will be used for testing purpose only. Documents from such a datasource wouldn't have any effect on search rankings.
        ShortcutProperties:
            properties:
                inputAlias:
                    type: string
                    description: link text following the viewPrefix as entered by the user. For example, if the view prefix is `go/` and the shortened URL is `go/abc`, then `abc` is the inputAlias.
                description:
                    type: string
                    description: A short, plain text blurb to help people understand the intent of the shortcut.
                destinationUrl:
                    type: string
                    format: url
                    description: destination URL for the shortcut.
                createdBy:
                    type: string
                    description: Email of the user who created this shortcut.
                createTime:
                    type: integer
                    format: int64
                    description: The time the shortcut was created in epoch seconds.
                updatedBy:
                    type: string
                    description: Email of the user who last updated this shortcut.
                updateTime:
                    type: integer
                    format: int64
                    description: The time the shortcut was updated in epoch seconds.
        ExternalShortcut:
            allOf:
                - $ref: "#/components/schemas/ShortcutProperties"
                - type: object
                  required:
                    - destinationUrl
                    - intermediateUrl
                    - createdBy
                    - inputAlias
            properties:
                title:
                    type: string
                    description: Title of the golink
                intermediateUrl:
                    type: string
                    format: url
                    description: The URL from which the user is then redirected to the destination URL.
                decayedVisitScore:
                    type: number
                    format: double
                    description: decayed visits score for ranking
                editUrl:
                    type: string
                    format: url
                    description: The URL using which the user can access the edit page of the shortcut.
        SharedDatasourceConfig:
            description: Structure describing shared config properties of the datasource (including multi-instance support)
            allOf:
                - $ref: "#/components/schemas/SharedDatasourceConfigNoInstance"
                - type: object
                  properties:
                    datasourceName:
                        type: string
                        description: The (non-unique) name of the datasource of which this config is an instance, e.g. "jira".
                    instanceOnlyName:
                        type: string
                        description: The instance of the datasource for this particular config, e.g. "onprem".
                    instanceDescription:
                        type: string
                        description: A human readable string identifying this instance as compared to its peers, e.g. "github.com/askscio" or "github.askscio.com"
        IndexingShortcut:
            allOf:
                - $ref: "#/components/schemas/ShortcutProperties"
                - type: object
                  required:
                    - destinationUrl
                    - createdBy
                    - inputAlias
            properties:
                unlisted:
                    type: boolean
                    description: Whether this shortcut is unlisted or not. Unlisted shortcuts are visible to author and admins only.
                urlTemplate:
                    type: string
                    description: For variable shortcuts, contains the URL template; note, `destinationUrl` contains default URL.
        ChatRequestStream:
            required:
                - messages
            properties:
                saveChat:
                    type: boolean
                    description: >-
                        Save the current interaction as a Chat for the user to access and potentially continue later.
                chatId:
                    type: string
                    description: >-
                        The id of the Chat that context should be retrieved from and messages added to. An empty id starts a new Chat, and the Chat is saved if saveChat is true.
                messages:
                    type: array
                    description: >-
                        A list of chat messages, from most recent to least recent. It can be assumed that the first chat message in the list is the user's most recent query.
                    items:
                        $ref: '#/components/schemas/ChatMessage'
                agentConfig:
                    $ref: '#/components/schemas/AgentConfig'
                    description: Describes the agent that will execute the request.
                inclusions:
                    $ref: '#/components/schemas/ChatRestrictionFilters'
                    description: >-
                        A list of filters which only allows chat to access certain content.
                exclusions:
                    $ref: '#/components/schemas/ChatRestrictionFilters'
                    description: >-
                        A list of filters which disallows chat from accessing certain content. If content is in both inclusions and exclusions, it'll be excluded.
                timeoutMillis:
                    type: integer
                    description: >-
                        Timeout in milliseconds for the request. A `408` error will be returned if handling the request takes longer.
                    example: 30000
                applicationId:
                    type: string
                    description: >-
                        The ID of the application this request originates from, used to determine the configuration of underlying chat processes. This should correspond to the ID set during admin setup. If not specified, the default chat experience will be used.
                stream:
                    type: boolean
                    description: >-
                        If set, response lines will be streamed one-by-one as they become available. Each will be a ChatResponse, formatted as JSON, and separated by a new line. If false, the entire response will be returned at once. Note that if this is set and the model being used does not support streaming, the model's response will not be streamed, but other messages from the endpoint still will be.
                    default: true
    parameters:
        timezoneOffset:
            name: timezoneOffset
            in: query
            description: The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC.
            schema:
                type: integer
x-tagGroups:
    - name: Search & Generative AI
      tags:
        - Chat
        - Search
        - Summarize
        - Tools
    - name: Connected Content
      tags:
        - Calendar
        - Documents
        - Entities
        - Messages
    - name: User Generated Content
      tags:
        - Announcements
        - Answers
        - Collections
        - Displayable Lists
        - Images
        - Pins
        - Shortcuts
        - Verification
    - name: General
      tags:
        - Activity
        - Authentication
        - Insights
        - User
tags:
    - name: Datasources
      description: Manage datasources.
    - name: Documents
      description: Index documents from a datasource.
    - name: People
      description: Index employee people data.
    - name: Permissions
      description: Manage users, groups and membership.
    - name: Authentication
      description: Manage indexing API tokens.
